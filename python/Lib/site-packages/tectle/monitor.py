from .db import get_connection, get_data_dict
from flask import render_template, url_for, make_response, session
import requests
import traceback
import logging
import subprocess
from math import ceil, sqrt
logger = logging.getLogger()

def do_monitor():
    context = {'monitor_page': True}
    conn = get_connection()
    cur = conn.cursor()
    query = """
        SELECT id,
               COALESCE(name, printer_ip) name,
               COALESCE(rtsp_url, 'static/img/no-cam.jpg') rtsp_url
          FROM printers
    """
    printers = get_data_dict(cur, query)
    
    create_config(printers)
    subprocess.Popen([session['VLC_LOCATION'], '--vlm-conf', 'vlc/mosaic.vlm'])
    
    return render_template('monitor.html', **context)

def create_config(printers):
    window_width = 1600
    window_height = 900
    text_padding = 50
    
    length = len(printers)
    num_cols = ceil(sqrt(length))
    num_rows = ceil(sqrt(length))
    
    box_width = window_width/num_cols
    box_height = window_height/num_rows
    
    available_height = box_height-text_padding
    available_width = box_width
    
    estimated_height = (available_width/window_width)*window_height
    estimated_width = (available_height/window_height)*window_width
    
    if (estimated_width < available_width):
        stream_height = available_height
        stream_width = estimated_width
    else:
        stream_height = estimated_height
        stream_width = available_width
    
    stream_left_padding = (box_width - stream_width)/2
    stream_top_padding = box_height - stream_height
    
    offsets = []
    marquees = []
    marquee_template = 'marq{marquee="%s",x=%s,y=%s,size=12,color=0xFFFFFF}'
    
    broadcasts = []
    broadcast_template = '''new ch%(num)s broadcast enabled
setup ch%(num)s input "%(link)s"
setup ch%(num)s output #mosaic-bridge{id=ch%(num)s,width=%(stream_width)s,height=%(stream_height)s}'''
    
    controls = []
    channels = []
    
    i = 0
    for row in range(num_rows):
        for col in range(num_cols):
            if i == len(printers):
                break
            x = round(box_width*col + stream_left_padding)
            y = round(box_height*row + stream_top_padding)
            offsets.append("%s,%s" % (x, y))
            
            marquee_x = round(box_width*col + stream_left_padding)
            marquee_y = round(box_height*row + stream_top_padding/2)
            marquees.append(marquee_template % (printers[i]['name'], marquee_x, marquee_y))
            
            
            data = {'num': (i+1), 'link': printers[i]['rtsp_url'], 'stream_width': round(stream_width), 'stream_height': round(stream_height)}
            broadcasts.append(broadcast_template % data)
            
            
            controls.append("control ch%s play" % (i+1))
            
            
            channels.append("ch%s" % (i+1))
            
            i += 1
        if i == len(printers):
            break
            
    offset = ",".join(offsets)
    marquee = ":".join(marquees)
    broadcast = "\n".join(broadcasts)
    control = "\n".join(controls)
    channel = ",".join(channels)
    
    fh = open('vlc/mosaic.vlm', 'w')
    config = """del all

%(broadcast)s

new bg broadcast enabled

setup bg input "/static/img/black.jpg"
setup bg option image-duration=-1
setup bg output #transcode{vcodec=mp4v,vb=0,fps=0,acodec=none,channels=2,sfilter='mosaic{alpha=255,width=1600,height=900,cols=%(num_cols)s,rows=%(num_rows)s,position=3,offsets="%(offset)s",order="%(channel)s",keep-aspect-ratio=enabled,mosaic-align=0,keep-picture=1}:%(marquee)s'}:bridge-in{offset=100}:display

control bg play

%(control)s

""" % {'broadcast': broadcast, 
       'num_rows':num_rows, 
       'num_cols':num_cols, 
       'offset':offset, 
       'channel':channel, 
       'marquee':marquee, 
       'control':control}
    fh.write(config)
    fh.close()
    