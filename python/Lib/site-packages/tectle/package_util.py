from .db import get_data_dict

def package_new_receipts(cur, new_receipt_ids, receipt_items):
    # new_receipt_ids: list of str
    # receipt_items: dictionary of (key, value) of (receipt_id, list of skus)
    package_configs = get_package_configs(cur)
    query = """
        SELECT receipt_id, 
               CASE country
               WHEN 'CA' THEN 'cost_ca'
                         ELSE 'cost_us'
               END cost_key
          FROM receipts
         WHERE receipt_id in ('%s')
    """ % "','".join([str(receipt_id) for receipt_id in new_receipt_ids])
    cur.execute(query)
    rows = cur.fetchall()
    for row in rows:
        receipt_id = row[0]
        cost_key = row[1]
        
        sku_list = receipt_items[receipt_id]
        package_new_receipt(cur, receipt_id, cost_key, sku_list, package_configs)

def get_package_configs(cur):
    query = """
        SELECT *
          FROM package_configs
    """
    rows = get_data_dict(cur, query)
    package_configs = {}
    for row in rows:
        package_id = row['package_id']
        package_class_id = row['package_class_id']
        if package_id not in package_configs:
            package_configs[package_id] = {'box_id': row['box_id'],
                                          'cost_ca': row['cost_ca'],
                                          'cost_us': row['cost_us'],
                                          'values': {},
                                          'num_items': 0
                                         }
        package_configs[package_id]['values'][package_class_id] = row['quantity']
        package_configs[package_id]['num_items'] += row['quantity']
    return package_configs

def package_new_receipt(cur, receipt_id, cost_key, sku_list, package_configs):
    query = """
        SELECT p.package_class_id,
               COUNT(1) num,
               r.country
          FROM printer_queue pq
          JOIN products p ON p.sku = pq.sku
          JOIN receipts r ON r.receipt_id = '%s'
         WHERE pq.receipt_id = '%s'
         GROUP BY p.package_class_id, r.country
    """ % (receipt_id, receipt_id)
    cur.execute(query)
    rows = cur.fetchall()
    product_order = {row[0]:row[1] for row in rows if row[0]}
    query = """
        SELECT p.sku,
               p.package_class_id
          FROM printer_queue pq
          JOIN products p ON p.sku = pq.sku
         WHERE pq.receipt_id = '%s'
           AND p.category = 'Planter'
    """ % receipt_id
    cur.execute(query)
    rows = cur.fetchall()
    sku_class_map = {row[0]:row[1] for row in rows if row[0]}
    cur.execute(query)
    class_sku_lists = {}
    for sku in sku_list:
        planter_sku = sku.split(',')[0]
        package_class_id = sku_class_map[planter_sku]
        if package_class_id not in class_sku_lists:
            class_sku_lists[package_class_id] = []
        class_sku_lists[package_class_id].append(sku)
    packaging_data = get_packaging(cur, product_order, package_configs, class_sku_lists, cost_key)
    save_packaging(cur, receipt_id, packaging_data)

def get_packaging(cur, product_order, package_configs, class_sku_lists, cost_key):
    combination = {'cost': 0}  
    query = """
        SELECT id
          FROM package_classes
    """
    cur.execute(query)
    rows = cur.fetchall()
    package_class_ids = [row[0] for row in rows]
    best_combs = {}
    best_comb = get_packaging_helper(product_order, package_configs, combination, cost_key, package_class_ids, best_combs)
    cost = best_comb['cost']
    del best_comb['cost']
    packaging_data = []
    for key in best_comb:
        qty = best_comb[key]
        for i in range(qty):
            config = package_configs[key]
            box_id = config['box_id']
            values = config['values']
            sku_map = {}
            for k in values:
                for j in range(values[k]):
                    sku = class_sku_lists[k].pop()
                    if sku not in sku_map:
                        sku_map[sku] = 0
                    sku_map[sku] += 1
            package = {'box_id': box_id, 'items': sku_map}
            packaging_data.append(package)
            
    return packaging_data

from functools import reduce
def get_packaging_helper(product_order, package_configs, combination, cost_key, package_class_ids, best_combs):
    key = get_hashable(product_order, package_class_ids)
    if key in best_combs:
        return best_combs[key]
    num_items = reduce(lambda x, y: x + y, product_order.values())
    if (num_items == 0):
        return combination
    else:
        best_comb = {}
        cost = 0
        for package_id in package_configs:
            config = package_configs[package_id]
            if config['num_items'] <= num_items:
                fits, new_product_order = fit_in_box(product_order, config['values'])
                if fits:
                    new_comb = dict(combination)
                    if package_id not in new_comb:
                        new_comb[package_id] = 0
                    new_comb[package_id] += 1
                    new_comb['cost'] += config[cost_key]
                    res_comb = get_packaging_helper(new_product_order, package_configs, new_comb, cost_key, package_class_ids, best_combs)
                    if cost == 0 or res_comb['cost'] < cost:
                        best_comb = dict(res_comb)
                        cost = int(res_comb['cost'])
        best_combs[key] = best_comb
        return best_comb

def get_hashable(data, keys):
    return ",".join([str(data[key]) for key in keys if key in data])

def fit_in_box(product_order, package_config):
    new_product_order = dict(product_order)
    fits_some = False
    for key in package_config:
        if package_config[key] > product_order.get(key, 0):
            return False, new_product_order
        if not fits_some and key in product_order:
            fits_some = True
    if not fits_some:
        return False, new_product_order
    for key in package_config:
        if key in new_product_order:
            new_product_order[key] -= package_config[key]
    return True, new_product_order

def save_packaging(cur, receipt_id, packaging_data):
    row = {}
    row['receipt_id'] = receipt_id
    data_template = "('%(receipt_id)s', %(package_id)s, %(box_id)s, '%(sku)s', %(quantity)s)"
    data_rows = []
    query = "SELECT COALESCE(MAX(package_id), 1) FROM receipt_packages"
    cur.execute(query)
    package_id = cur.fetchone()[0]
    for package in packaging_data:
        box_id = package['box_id']
        row['box_id'] = box_id
        row['package_id'] = package_id
        for full_sku in package['items']:
            quantity = package['items'][full_sku]
            skus = full_sku.split(',')
            row['quantity'] = quantity
            for sku in skus:
                row['sku'] = sku.strip()
                data_rows.append(data_template % row)
        package_id += 1
    values = ",\n".join(data_rows)
    query = "DELETE FROM receipt_packages WHERE receipt_id = '%s'" % receipt_id
    cur.execute(query)
    query = """
        INSERT INTO receipt_packages (receipt_id, package_id, box_id, sku, quantity)
        VALUES %s
    """ % values
    cur.execute(query)