from .db import get_connection, get_data_dict
from flask import render_template, url_for, make_response, jsonify
from .buildschema import create_fake_receipts


def do_open_receipts(limit, offset):
    conn = get_connection()
    cur = conn.cursor()
    query = """
        SELECT *
          FROM fake_receipts
         WHERE status = 0
         ORDER BY receipt_id DESC
         LIMIT %s
         OFFSET %s
    """ % (limit, offset)
    rows = get_data_dict(cur, query)
    query = """
        SELECT COUNT(1)
          FROM fake_receipts
         WHERE status = 0
    """
    cur.execute(query)
    count = cur.fetchone()[0]
    
    data = {'count': count,
            'results': rows}
    
    if limit+offset >= count:
        cur.execute("SELECT MAX(receipt_id) FROM fake_receipts")
        receipt_id = cur.fetchone()[0] + 1
        #create_fake_receipts(cur, receipt_id, 10)
    conn.commit()
    return jsonify(data)
    
def do_transactions(receipt_id):
    conn = get_connection()
    cur = conn.cursor()
    query = """
        SELECT *
          FROM fake_transactions ft
          JOIN fake_products fp
                ON fp.id = ft.listing_id
               AND fp.id = ft.product_id
         WHERE receipt_id = %s
    """ % receipt_id
    rows = get_data_dict(cur, query)
    new_rows = []
    for row in rows:
        data_row = {'receipt_id': row['receipt_id'],
                    'quantity': row['quantity'],
                    'listing_id': row['listing_id'],
                    'product_data': {'product_id': row['product_id'],
                                     'sku': row['sku']
                                    }
                   }
        new_rows.append(data_row)
    data = {'count': len(rows),
            'results': new_rows}
    return jsonify(data)

# CAN BE REMOVED 
def do_listing_product(listing_id, product_id):
    conn = get_connection()
    cur = conn.cursor()
    query = """
        SELECT *
          FROM fake_products
         WHERE id = %s
           AND id = %s
    """ % (listing_id, product_id)
    rows = get_data_dict(cur, query)
    data = {'count': len(rows),
            'results': rows}
    return jsonify(data)
# OK