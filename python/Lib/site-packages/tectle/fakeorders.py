from .db import get_connection, get_data_dict
from flask import render_template, url_for, make_response, jsonify
from .buildschema import create_fake_receipts
from datetime import datetime

def add_one_more(cur):
    query = """
        SELECT MAX(CAST(receipt_id AS INT))+COUNT(1)+1 as new_receipt_id 
          FROM FAKE_RECEIPTS
    """
    cur.execute(query)
    new_receipt_id = cur.fetchone()[0]
    n = 1
    max_items = 5
    max_quantity = 3
    create_fake_receipts(cur, new_receipt_id, n, max_items, max_quantity)

def do_open_receipts(limit, offset):
    conn = get_connection()
    cur = conn.cursor()
    
    add_one_more(cur)
    conn.commit()
    
    query = """
        SELECT *
          FROM fake_receipts
         WHERE status = 0
           AND source = 'Etsy'
         ORDER BY receipt_id DESC
         LIMIT %s
         OFFSET %s
    """ % (limit, offset)
    rows = get_data_dict(cur, query)
    query = """
        SELECT COUNT(1)
          FROM fake_receipts
         WHERE status = 0
    """
    cur.execute(query)
    count = cur.fetchone()[0]
    
    data = {'count': count,
            'results': rows}
    
    return jsonify(data)

def do_unfulfilled_receipts(limit, offset):
    conn = get_connection()
    cur = conn.cursor()
    
    add_one_more(cur)
    conn.commit()
    
    query = """
        SELECT *
          FROM fake_receipts
         WHERE status = 0
           AND source = 'Webflow'
         ORDER BY receipt_id DESC
         LIMIT %s
         OFFSET %s
    """ % (limit, offset)
    rows = get_data_dict(cur, query)
    
    data = [ _format_row(row) for row in rows]
    
    return jsonify(data)

def _format_row(row):
    new_row = {
        'orderId': row['receipt_id'],
        'status': 'unfulfilled' if row['status'] == 0 else 'fulfilled',
        'customerInfo': {
            'fullName': row['name'],
            'email': row['buyer_email']
        },
        'shippingAddress': {
            'type': 'shipping',
            'addressee': row['name'],
            'line1': row['first_line'],
            'line2': row['second_line'],
            'city': row['city'],
            'state': row['state'],
            'country': 'US' if row['country_id'] == 209 else 'CA',
            'postalCode': row['zip']        
        },
        "acceptedOn": datetime.utcfromtimestamp(row['creation_tsz']).isoformat(timespec='milliseconds') + 'Z'
    }
    purchased_items_data = _get_purchased_items_data(row['receipt_id'])
    new_row.update(purchased_items_data)
    return new_row    

def _get_purchased_items_data(receipt_id):
    conn = get_connection()
    cur = conn.cursor()
    query = """
        SELECT *
          FROM fake_transactions ft
          JOIN fake_products fp
                ON fp.id = ft.listing_id
               AND fp.id = ft.product_id
         WHERE receipt_id = '%s'
    """ % receipt_id
    rows = get_data_dict(cur, query)
    purchased_items = []
    purchased_items_count = 0
    total_price = 0
    for row in rows:
        purchased_item = {
            'count': row['quantity'],
            'rowTotal': {
                'unit': 'USD',
                'value': 5200,
                'string': '$ 52.00 USD'
            },
            'variantSKU': row['sku'],
            'variantPrice': {
                'unit': 'USD',
                'value': 5200,
                'string': '$ 52.00 USD'
            }
        }
        total_price += 52
        purchased_items_count += row['quantity']
        purchased_items.append(purchased_item)
    data = {
        'purchasedItems': purchased_items,
        'purchasedItemsCount': purchased_items_count,
        'totals': {
            'subtotal': {
                'unit': 'USD',
                'value': total_price,
                'string': '$ %.2lf USD' % (total_price/100)
            },
            "extras": [
                {
                    "type": "shipping",
                    "name": "Free Shipping",
                    "description": "Orders over 35 USD qualify for free shipping.",
                    "price": {
                        "unit": "USD",
                        "value": 0,
                        "string": "$ 0.00 USD"
                    }
                }
            ],
            'total': {
                'unit': 'USD',
                'value': total_price,
                'string': '$ %.2lf USD' % (total_price/100)
            },
        }
    }
    return data

def do_transactions(receipt_id):
    conn = get_connection()
    cur = conn.cursor()
    query = """
        SELECT *
          FROM fake_transactions ft
          JOIN fake_products fp
                ON fp.id = ft.listing_id
               AND fp.id = ft.product_id
         WHERE receipt_id = '%s'
    """ % receipt_id
    rows = get_data_dict(cur, query)
    new_rows = []
    for row in rows:
        data_row = {'receipt_id': row['receipt_id'],
                    'quantity': row['quantity'],
                    'listing_id': row['listing_id'],
                    'product_data': {'product_id': row['product_id'],
                                     'sku': row['sku']
                                    }
                   }
        new_rows.append(data_row)
    data = {'count': len(rows),
            'results': new_rows}
    return jsonify(data)

# CAN BE REMOVED 
def do_listing_product(listing_id, product_id):
    conn = get_connection()
    cur = conn.cursor()
    query = """
        SELECT *
          FROM fake_products
         WHERE id = %s
           AND id = %s
    """ % (listing_id, product_id)
    rows = get_data_dict(cur, query)
    data = {'count': len(rows),
            'results': rows}
    return jsonify(data)
# OK