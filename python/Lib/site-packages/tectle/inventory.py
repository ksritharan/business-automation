from .db import get_connection, get_data_dict
from .fulfillable import get_fulfillable_receipts
from .config import load_config, is_debug
from flask import render_template, url_for, make_response
import requests
import traceback
import logging
logger = logging.getLogger()

def do_fulfillable(strategy='oldest'):
    context = {'fulfillable_page': True}
    conn = get_connection()
    cur = conn.cursor()
    query = """
        SELECT *
          FROM products
         ORDER BY sku
    """
    products = get_data_dict(cur, query)
    logger.debug(str(products))
    
    context['products'] = products
    context['skus'] = "['%s']" % "','".join([str(product['sku']) for product in products])
    
    allowed_strategies = {'oldest', 'most'}
    strategy = 'oldest' if strategy not in allowed_strategies else strategy
    context['strategy'] = strategy
    context['fulfillable'] = get_fulfillable_receipts(cur, strategy=strategy)
    
    if is_debug():
        context['debug'] = True
    return render_template('fulfillable.html', **context)

    
def do_add_items(inv_data):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        query = """
            SELECT COUNT(1)
              FROM products
             WHERE sku = '%(sku)s'
        """ % inv_data
        cur.execute(query)
        exists = cur.fetchone()[0] > 0
        if not exists:
            response = make_response('sku does not exist', 400)
        else:
            add_or_insert(cur, inv_data)
            conn.commit()
            response = make_response('success', 200)
    except Exception as e:
        logger.exception(e)
        tb = traceback.format_exc()
        response = make_response(tb, 400)
    return response

def add_or_insert(cur, inv_data):
    query = """
        SELECT p.id product_id,
               p.sku,
               (%(quantity)s + COALESCE(i.quantity, 0)) quantity,
               i.quantity existing_quantity
          FROM products p
          LEFT JOIN inventory i on p.id = i.product_id
         WHERE p.sku = '%(sku)s'
    """ % inv_data
    row_data = get_data_dict(cur, query)[0]
    logger.debug(row_data)
    if row_data['existing_quantity'] is None:
        #insert
        query = """
            INSERT INTO inventory (product_id, sku, quantity)
            VALUES (%(product_id)s, '%(sku)s', %(quantity)s)
        """ % row_data
    else:
        #update
        query = """
            UPDATE inventory
               SET quantity = %(quantity)s
             WHERE product_id = %(product_id)s
        """ % row_data
    cur.execute(query)
    
def do_edit_items(inv_data):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        query = """
            SELECT COUNT(1)
              FROM products
             WHERE sku = '%(sku)s'
        """ % inv_data
        cur.execute(query)
        exists = cur.fetchone()[0] > 0
        if not exists:
            response = make_response('sku does not exist', 400)
        else:
            query = """
                SELECT COUNT(1)
                  FROM inventory
                 WHERE sku = '%(sku)s'
            """ % inv_data
            cur.execute(query)
            exists = cur.fetchone()[0] > 0
            if exists:
                query = """
                    UPDATE inventory
                       SET quantity = %(quantity)s
                     WHERE sku = '%(sku)s'
                """ % inv_data
                cur.execute(query)
            else:
                add_or_insert(cur, inv_data)
            conn.commit()
            response = make_response('success', 200)
    except Exception as e:
        logger.exception(e)
        tb = traceback.format_exc()
        response = make_response(tb, 400)
    return response

from random import randint
def do_add_random_items():
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        query = """
            SELECT sku,
                   COUNT(1) quantity
              FROM printer_queue pq
             GROUP BY sku
        """
        rows = get_data_dict(cur, query)
        for row in rows:
            inv_data = dict(row)
            inv_data['quantity'] = randint(0, inv_data['quantity'])
            if inv_data['quantity'] > 0:
                add_or_insert(cur, inv_data)
        conn.commit()
        response = make_response('success', 200)
    except Exception as e:
        logger.exception(e)
        tb = traceback.format_exc()
        response = make_response(tb, 400)
    return response
    