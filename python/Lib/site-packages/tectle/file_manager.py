from .config import load_config_non_flask, load_config
from .db import get_data_dict
from flask import session
import requests
import os
import logging
logger = logging.getLogger()

def update_local_files(conn, cur, local_parent, remote_path):    
    files = [(f, os.path.join(local_parent, f)) for f in os.listdir(local_parent) if os.path.isfile(os.path.join(local_parent, f))]
    file_data = [(filename, int(os.path.getmtime(fullpath))) for filename, fullpath in files]
    
    if len(file_data) > 0:
        query = """
            SELECT filename, date_modified
              FROM file_manager
             WHERE local_parent = '%s'
               AND filename IN (%s)
        """ % (local_parent,
              "'%s'" % "','".join([filename for filename, date_modified in file_data]))
        rows = get_data_dict(cur, query)
        cur_file_data = {row['filename']:row['date_modified'] for row in rows}
        files_to_add = []
        files_to_update = []
        for filename, date_modified in file_data:
            if filename in cur_file_data:
                if date_modified > cur_file_data[filename]:
                    files_to_update.append((filename, date_modified))
            else:
                files_to_add.append((filename, date_modified))
        
        if len(files_to_add) > 0:
            insert_files(cur, files_to_add, local_parent, remote_path)
        if len(files_to_update) > 0:
            query = """
                DELETE FROM file_manager
                 WHERE local_parent = '%s'
                   AND filename IN (%s)
            """ % (local_parent,
                  "'%s'" % "','".join([filename for filename, date_modified in files_to_update]))
            cur.execute(query)
            insert_files(cur, files_to_update, local_parent, remote_path)
        conn.commit()

def insert_files(cur, files_to_add, local_parent, remote_path):
    query = """
        INSERT INTO file_manager (filename, date_modified, local_parent, remote_path)
        VALUES %s
    """ % ',\n'.join(["('%s', %s, '%s', '%s')" % (filename, date_modified, local_parent, remote_path)
                        for filename, date_modified in files_to_add])
    cur.execute(query)

def is_printer_up_to_date(cur, printer_ip, filename, remote_path):
    query = """
        SELECT COUNT(1)
          FROM file_manager fm
          JOIN printer_files pf
               ON fm.id = pf.file_manager_id
          JOIN printers p
               ON pf.printer_ip = p.printer_ip
         WHERE fm.filename = '%(filename)s'
           AND fm.remote_path = '%(remote_path)s'
           AND p.printer_ip = '%(printer_ip)s'
           AND fm.date_modified = pf.date_modified
    """ % {'filename': filename, 'printer_ip': printer_ip, 'remote_path':remote_path}
    cur.execute(query)
    is_up_to_date = cur.fetchone()[0] == 1
    return is_up_to_date

def send_files_to_printer(printer_url, fullpaths, remote_path, printer_ip, successful_files):
    try:
        requests.get(printer_url + 'rr_connect')
        
        for fullpath in fullpaths:
            try:
                basename = os.path.basename(fullpath)
                request_url = printer_url + ('rr_upload?name=%s/%s' % (remote_path, basename))
                data = IterableToFileAdapter(upload_in_chunks(fullpath))
                
                response = requests.post(request_url, data=data)
                
                response.raise_for_status()
                response_json = response.json()
                if response_json['err'] == 0:
                    successful_files.append((printer_ip, fullpath))
                else:
                    logger.debug(response.text)
            except Exception as e:
                logging.exception(e)
       
        requests.get(printer_url + 'rr_disconnect')
    except Exception as e:
        logging.exception(e)
    

def send_file_to_printer(printer_url, fullpath, remote_path, callback_fn=None, callback_fn_args=None):
    basename = os.path.basename(fullpath)
    request_url = printer_url + ('rr_upload?name=%s/%s' % (remote_path, basename))
    logger.debug(request_url)

    logger.debug("connecting to printer")
    response1 = requests.get(printer_url + 'rr_connect')
    logger.debug("done")
    
    logger.debug("sending file")
    data = IterableToFileAdapter(upload_in_chunks(fullpath, callback_fn=callback_fn, callback_fn_args=callback_fn_args))
    response2 = requests.post(request_url, data=data)
    logger.debug("done")
    
    logger.debug("disconnecting")
    response3 = requests.get(printer_url + 'rr_disconnect')
    logger.debug("done")
    
    logger.debug(response2.text)
    response_json = response2.json()
    return response_json['err'] == 0 #resp = {err:0} if err == 0 then success
    

class upload_in_chunks(object):
    def __init__(self, filename, chunksize=1 << 13, callback_fn=None, callback_fn_args=None):
        self.filename = filename
        self.chunksize = chunksize
        self.totalsize = os.path.getsize(filename)
        self.readsofar = 0
        self.callback_fn = callback_fn
        self.callback_fn_args = callback_fn_args

    def __iter__(self):
        with open(self.filename, 'rb') as file:
            while True:
                data = file.read(self.chunksize)
                if not data:
                    break
                self.readsofar += len(data)
                percent = self.readsofar * 1e2 / self.totalsize
                if self.callback_fn:
                    self.callback_fn(percent, *self.callback_fn_args)
                yield data

    def __len__(self):
        return self.totalsize

class IterableToFileAdapter(object):
    def __init__(self, iterable):
        self.iterator = iter(iterable)
        self.length = len(iterable)

    def read(self, size=-1): # TBD: add buffer for `len(data) > size` case
        return next(self.iterator, b'')

    def __len__(self):
        return self.length