from .db import get_connection, get_data_dict
from .util import get_local_ip
from .config import is_printer_debug, load_config
from .file_manager import update_local_files, send_files_to_printer
from flask import render_template, url_for, make_response, session
import traceback
import re
import logging
import os
logger = logging.getLogger()

def do_printers():
    context = {'addprinters': True}
    conn = get_connection()
    cur = conn.cursor()
    query = """
        SELECT P.id,
               P.name,
               P.printer_ip,
               P.status,
               P.ui_change,
               P.color,
               P.gcode,
               P.waterplate_only,
               COALESCE(P.rtsp_url, '') rtsp_url,
               CASE WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is NULL) THEN 'online'
                    WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is not NULL) THEN 'away'
                    ELSE 'busy'
               END css_status,
               CASE WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is NULL) THEN 'ready'
                    WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is not NULL) THEN 'printing'
                    ELSE 'offline'
               END str_status,
               COALESCE(PQ.num, 0) num,
               COALESCE(IP.sku, P.gcode) current_sku,
               IP.receipt_id current_receipt,
               COALESCE(IP.progress, P.progress) progress,
               COALESCE(IP.is_printing, 0) is_printing
          FROM PRINTERS P
          LEFT JOIN (
                        SELECT COUNT(1) num, printer_id
                          FROM PRINTER_QUEUE
                         WHERE status = 0 /* PENDING */
                         GROUP BY printer_id
                    ) PQ
               ON P.id = PQ.printer_id
          LEFT JOIN (
                        SELECT sku, 
                               receipt_id, 
                               progress,
                               printer_id,
                               TRUE is_printing
                          FROM PRINTER_QUEUE
                         WHERE status = 1 /* PRINTING */
                    ) IP /* IN_PROGRESS */
               ON P.id = IP.printer_id
    """
    printers = get_data_dict(cur, query)
    query2 = """
        SELECT * 
          FROM PRINTER_QUEUE
         WHERE status = 0
         ORDER BY printer_id, priority
    """
    rows = get_data_dict(cur, query2)
    printer_queue = {}
    for row in rows:
        key = row['printer_id']
        if key not in printer_queue:
            printer_queue[key] = []
        printer_queue[key].append(row)
    for printer in printers:
        if printer['id'] in printer_queue:
            printer['queue'] = printer_queue[printer['id']]
        else:
            printer['queue'] = []
    context['printers'] = printers
    
    query = """
        SELECT color
          FROM colors
    """
    cur.execute(query)
    colors = [c[0] for c in cur.fetchall()]
    context['colors'] = colors
    return render_template('printers.html', **context)

def do_add_printers(printer_ip, name=''):
    # validate printer ip
    response = None
    if not re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', printer_ip):
        response = make_response('invalid ip address format', 400)
    else:
        conn = get_connection()
        cur = conn.cursor()
        query = "SELECT COUNT(1) num FROM PRINTERS WHERE printer_ip = '%s'" % printer_ip
        cur.execute(query)
        existing = cur.fetchone()[0] == 1
        if existing:
            response = make_response('printer already exists', 400)
        else:
            try:
                cur.execute("INSERT INTO printers (printer_ip, name) VALUES ('%s', '%s')" % (printer_ip, name))
                if is_printer_debug():
                    cur.execute("INSERT INTO fake_printers (printer_ip) VALUES ('%s')" % printer_ip)
                conn.commit()
                response = make_response('success', 200)
            except Exception as e:
                response = make_response(str(e), 400)

    return response

def do_remove_printers(printer_id):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    query = "SELECT COUNT(1) num FROM PRINTERS WHERE id = %s" % printer_id
    cur.execute(query)
    existing = cur.fetchone()[0] == 1
    if not existing:
        response = make_response('printer doesnt exist', 400)
    else:
        try:
            query = "SELECT printer_ip num FROM PRINTERS WHERE id = %s" % printer_id
            cur.execute(query)
            printer_ip = cur.fetchone()[0]
            cur.execute("UPDATE PRINTER_QUEUE SET printer_id = NULL, status = 0 WHERE printer_id = %s" % printer_id)
            cur.execute("DELETE FROM PRINTERS WHERE id = %s" % printer_id)
            cur.execute("DELETE FROM PRINTER_FILES WHERE printer_ip = '%s'" % printer_ip)
            if is_printer_debug():
                cur.execute("DELETE FROM FAKE_PRINTERS WHERE printer_ip = %s" % printer_ip)
            conn.commit()
            response = make_response('success', 200)
        except Exception as e:
            response = make_response(str(e), 400)
    return response
    

def do_color_printers(printer_id, color):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    logger.debug(printer_id + " " + color);
    
    query = "SELECT COUNT(1) num FROM PRINTERS WHERE id = %s" % printer_id
    cur.execute(query)
    existing = cur.fetchone()[0] == 1
    
    query = "SELECT COUNT(1) num FROM colors WHERE color = '%s'" % color
    cur.execute(query)
    existing_color = cur.fetchone()[0] == 1
    
    query = "SELECT gcode FROM PRINTERS WHERE id = %s" % printer_id
    cur.execute(query)
    gcode = cur.fetchone()[0]
    
    if not existing:
        response = make_response('printer doesnt exist', 400)
    elif not existing_color:
        response = make_response('color doesnt exist', 400)
    elif gcode is not None:
        response = make_response("can't change color while printer is printing", 400)
    else:
        try:
            cur.execute("UPDATE PRINTERS SET color = '%s' WHERE id = %s" % (color, printer_id))
            cur.execute("UPDATE PRINTER_QUEUE SET printer_id = NULL, status = 0 WHERE printer_id = %s" % printer_id)
            conn.commit()
            response = make_response('success', 200)
        except Exception as e:
            response = make_response(str(e), 400)
    return response
    

def do_waterplate_printers(printer_id, waterplate_only):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    logger.debug(printer_id + " " + str(waterplate_only));
    
    query = "SELECT COUNT(1) num FROM PRINTERS WHERE id = %s" % printer_id
    cur.execute(query)
    existing = cur.fetchone()[0] == 1
    
    query = "SELECT gcode FROM PRINTERS WHERE id = %s" % printer_id
    cur.execute(query)
    gcode = cur.fetchone()[0]
    
    if not existing:
        response = make_response('printer doesnt exist', 400)
    elif gcode is not None:
        response = make_response("can't change waterplate priority while printer is printing", 400)
    else:
        try:
            cur.execute("UPDATE PRINTERS SET waterplate_only = %s WHERE id = %s" % (waterplate_only, printer_id))
            cur.execute("UPDATE PRINTER_QUEUE SET printer_id = NULL, status = 0 WHERE printer_id = %s" % printer_id)
            conn.commit()
            response = make_response('success', 200)
        except Exception as e:
            response = make_response(str(e), 400)
    return response

DEBUG_PRINTER_URL_TEMPLATE = "http://%s:80/printer/%%s/" % get_local_ip()
PRINTER_URL_TEMPLATE = "http://%s/"

def do_update_system_files():
    response = None
    try:
        sys_folder = session['SYS_FOLDER']
        if not sys_folder:
            response = make_response('No SYS FOLDER detected check config', 400)
        else:
            conn = get_connection()
            cur = conn.cursor()
            update_local_files(conn, cur, sys_folder, 'sys')
            query = """
                WITH required_files AS (
                    SELECT *
                      FROM file_manager
                     WHERE remote_path = 'sys'
                )
                SELECT rf.filename,
                       rf.local_parent,
                       rf.remote_path,
                       p.printer_ip,
                       rf.date_modified
                  FROM required_files rf
                       CROSS JOIN printers p
                       
                        LEFT JOIN printer_files pf
                        ON rf.id = pf.file_manager_id
                           AND pf.printer_ip = p.printer_ip
                 WHERE pf.date_modified IS NULL
                    OR (pf.date_modified <> rf.date_modified)
            """
            file_data = get_data_dict(cur, query)
            if len(file_data) == 0:
                response = make_response('All files up-to-date', 200)
            else:
                requests_by_printer_ip = {}
                successful_files = []
                
                # We could thread this... only if it takes too long...
                
                for row in file_data:
                    printer_ip = row['printer_ip']
                    if printer_ip not in requests_by_printer_ip:
                        requests_by_printer_ip[printer_ip] = []
                    requests_by_printer_ip[printer_ip].append(os.path.join(row['local_parent'], row['filename']))
                for printer_ip in requests_by_printer_ip:
                    fullpaths = requests_by_printer_ip[printer_ip]
                    printer_url = None
                    if is_printer_debug():
                        printer_url = DEBUG_PRINTER_URL_TEMPLATE % printer_ip
                    else:
                        printer_url = PRINTER_URL_TEMPLATE % printer_ip
                        
                    send_files_to_printer(printer_url, fullpaths, 'sys', printer_ip, successful_files)
                
                num_updated = 0
                logger.debug(successful_files)
                for printer_ip, fullpath in successful_files:
                    try:
                        filename = os.path.basename(fullpath)
                        update_system_file(cur, printer_ip, filename)
                    except:
                        pass
                    else:
                        num_updated += 1
                num_failed = len(file_data) - num_updated
                conn.commit()
                if num_failed == 0:
                    response = make_response('Successfully updated', 200)
                else:
                    response = make_response('Failed to update %s files' % num_failed, 400)
    except Exception as e:
        tb = traceback.format_exc()
        response = make_response(tb, 400)
        logger.exception(e)
    return response

def update_system_file(cur, printer_ip, filename):
    data = {
        'filename': filename, 
        'printer_ip': printer_ip,
        'remote_path': 'sys',
    }
    query = """
        DELETE FROM printer_files
         WHERE printer_ip = '%(printer_ip)s'
           AND filename = '%(filename)s'
           AND remote_path = '%(remote_path)s'
    """ % data
    cur.execute(query)
    query = """
        INSERT INTO printer_files (file_manager_id, filename, printer_ip, date_modified, remote_path)
        SELECT fm.id as file_manager_id,
               fm.filename,
               '%(printer_ip)s' printer_ip,
               fm.date_modified,
               fm.remote_path
          FROM file_manager fm
         WHERE filename = '%(filename)s'
           AND remote_path = '%(remote_path)s'
          
    """ % data
    cur.execute(query)


def do_rtsp_printers(printer_id, rtsp):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    
    query = "SELECT COUNT(1) num FROM PRINTERS WHERE id = %s" % printer_id
    cur.execute(query)
    existing = cur.fetchone()[0] == 1
    
    if not existing:
        response = make_response('printer doesnt exist', 400)
    else:
        try:
            cur.execute("UPDATE PRINTERS SET rtsp_url = '%s' WHERE id = %s" % (rtsp, printer_id))
            conn.commit()
            response = make_response('success', 200)
        except Exception as e:
            response = make_response(str(e), 400)
    return response