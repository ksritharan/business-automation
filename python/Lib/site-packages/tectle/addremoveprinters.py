from .db import get_connection, get_data_dict
from .config import is_printer_debug
from flask import render_template, url_for, make_response
import re
import logging
logger = logging.getLogger()

def do_printers():
    context = {'addprinters': True}
    conn = get_connection()
    cur = conn.cursor()
    query = """
        SELECT P.id,
               P.name,
               P.printer_ip,
               P.status,
               P.ui_change,
               P.color,
               P.gcode,
               P.waterplate_only,
               CASE WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is NULL) THEN 'online'
                    WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is not NULL) THEN 'away'
                    ELSE 'busy'
               END css_status,
               CASE WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is NULL) THEN 'ready'
                    WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is not NULL) THEN 'printing'
                    ELSE 'offline'
               END str_status,
               COALESCE(PQ.num, 0) num,
               COALESCE(IP.sku, P.gcode) current_sku,
               IP.receipt_id current_receipt,
               COALESCE(IP.progress, P.progress) progress,
               COALESCE(IP.is_printing, 0) is_printing
          FROM PRINTERS P
          LEFT JOIN (
                        SELECT COUNT(1) num, printer_id
                          FROM PRINTER_QUEUE
                         WHERE status = 0 /* PENDING */
                         GROUP BY printer_id
                    ) PQ
               ON P.id = PQ.printer_id
          LEFT JOIN (
                        SELECT sku, 
                               receipt_id, 
                               progress,
                               printer_id,
                               TRUE is_printing
                          FROM PRINTER_QUEUE
                         WHERE status = 1 /* PRINTING */
                    ) IP /* IN_PROGRESS */
               ON P.id = IP.printer_id
    """
    printers = get_data_dict(cur, query)
    query2 = """
        SELECT * 
          FROM PRINTER_QUEUE
         WHERE status = 0
         ORDER BY printer_id, priority
    """
    rows = get_data_dict(cur, query2)
    printer_queue = {}
    for row in rows:
        key = row['printer_id']
        if key not in printer_queue:
            printer_queue[key] = []
        printer_queue[key].append(row)
    for printer in printers:
        if printer['id'] in printer_queue:
            printer['queue'] = printer_queue[printer['id']]
        else:
            printer['queue'] = []
    context['printers'] = printers
    
    query = """
        SELECT color
          FROM colors
    """
    cur.execute(query)
    colors = [c[0] for c in cur.fetchall()]
    context['colors'] = colors
    return render_template('printers.html', **context)

def do_add_printers(printer_ip, name=''):
    # validate printer ip
    response = None
    if not re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', printer_ip):
        response = make_response('invalid ip address format', 400)
    else:
        conn = get_connection()
        cur = conn.cursor()
        query = "SELECT COUNT(1) num FROM PRINTERS WHERE printer_ip = '%s'" % printer_ip
        cur.execute(query)
        existing = cur.fetchone()[0] == 1
        if existing:
            response = make_response('printer already exists', 400)
        else:
            try:
                cur.execute("INSERT INTO printers (printer_ip, name) VALUES ('%s', '%s')" % (printer_ip, name))
                if is_printer_debug():
                    cur.execute("INSERT INTO fake_printers (printer_ip) VALUES ('%s')" % printer_ip)
                conn.commit()
                response = make_response('success', 200)
            except Exception as e:
                response = make_response(str(e), 400)

    return response

def do_remove_printers(printer_id):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    query = "SELECT COUNT(1) num FROM PRINTERS WHERE id = %s" % printer_id
    cur.execute(query)
    existing = cur.fetchone()[0] == 1
    if not existing:
        response = make_response('printer doesnt exist', 400)
    else:
        try:
            query = "SELECT printer_ip num FROM PRINTERS WHERE id = %s" % printer_id
            cur.execute(query)
            printer_ip = cur.fetchone()[0]
            cur.execute("UPDATE PRINTER_QUEUE SET printer_id = NULL, status = 0 WHERE printer_id = %s" % printer_id)
            cur.execute("DELETE FROM PRINTERS WHERE id = %s" % printer_id)
            cur.execute("DELETE FROM PRINTER_GCODES WHERE printer_ip = '%s'" % printer_ip)
            if is_printer_debug():
                cur.execute("DELETE FROM FAKE_PRINTERS WHERE printer_ip = %s" % printer_ip)
            conn.commit()
            response = make_response('success', 200)
        except Exception as e:
            response = make_response(str(e), 400)
    return response
    

def do_color_printers(printer_id, color):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    logger.debug(printer_id + " " + color);
    
    query = "SELECT COUNT(1) num FROM PRINTERS WHERE id = %s" % printer_id
    cur.execute(query)
    existing = cur.fetchone()[0] == 1
    
    query = "SELECT COUNT(1) num FROM colors WHERE color = '%s'" % color
    cur.execute(query)
    existing_color = cur.fetchone()[0] == 1
    
    query = "SELECT gcode FROM PRINTERS WHERE id = %s" % printer_id
    cur.execute(query)
    gcode = cur.fetchone()[0]
    
    if not existing:
        response = make_response('printer doesnt exist', 400)
    elif not existing_color:
        response = make_response('color doesnt exist', 400)
    elif gcode is not None:
        response = make_response("can't change color while printer is printing", 400)
    else:
        try:
            cur.execute("UPDATE PRINTERS SET color = '%s' WHERE id = %s" % (color, printer_id))
            cur.execute("UPDATE PRINTER_QUEUE SET printer_id = NULL, status = 0 WHERE printer_id = %s" % printer_id)
            conn.commit()
            response = make_response('success', 200)
        except Exception as e:
            response = make_response(str(e), 400)
    return response
    

def do_waterplate_printers(printer_id, waterplate_only):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    logger.debug(printer_id + " " + str(waterplate_only));
    
    query = "SELECT COUNT(1) num FROM PRINTERS WHERE id = %s" % printer_id
    cur.execute(query)
    existing = cur.fetchone()[0] == 1
    
    query = "SELECT gcode FROM PRINTERS WHERE id = %s" % printer_id
    cur.execute(query)
    gcode = cur.fetchone()[0]
    
    if not existing:
        response = make_response('printer doesnt exist', 400)
    elif gcode is not None:
        response = make_response("can't change waterplate priority while printer is printing", 400)
    else:
        try:
            cur.execute("UPDATE PRINTERS SET waterplate_only = %s WHERE id = %s" % (waterplate_only, printer_id))
            cur.execute("UPDATE PRINTER_QUEUE SET printer_id = NULL, status = 0 WHERE printer_id = %s" % printer_id)
            conn.commit()
            response = make_response('success', 200)
        except Exception as e:
            response = make_response(str(e), 400)
    return response
    
def do_update_system_files():
    pass