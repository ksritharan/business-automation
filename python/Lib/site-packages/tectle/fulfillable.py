from .db import get_connection, get_data_dict
from flask import make_response
from datetime import datetime
import logging
logger = logging.getLogger()

# allowed strategies
# oldest, most
def do_create_manifest(strategy='oldest'):
    allowed_strategies = {'oldest', 'most'}
    response = None
    if strategy not in allowed_strategies:
        response = make_response('invalid strategy', 400)
    else:
        conn = get_connection()
        cur = conn.cursor()
        try:
            receipts = get_fulfillable_receipts(cur, strategy)
            if len(receipts) == 0:
                response = make_response('no receipts to create manifest', 400)
            else:
                group_id = get_new_group_id(cur)
                query = """
                    UPDATE receipts
                       SET group_id = '%(group_id)s'
                     WHERE receipt_id in ('%(receipt_ids)s')
                """ % {'group_id': group_id, 'receipt_ids': "','".join([receipt['receipt_id'] for receipt in receipts])}
                cur.execute(query)
                delete_from_inventory(cur, receipts)
                conn.commit()
                response = make_response(group_id, 200)
        except Exception as e:
            conn.rollback()
            logger.exception(e)
            response = make_response(str(e), 400)
    return response

def delete_from_inventory(cur, receipts):
    counts = {}
    for receipt in receipts:
        order_info = receipt['order_info_dict']
        for sku in order_info:
            if sku not in counts:
                counts[sku] = 0
            counts[sku] += order_info[sku]
    template_str = """
        UPDATE inventory
           SET quantity = quantity - %s
         WHERE sku = '%s'
    """
    for sku in counts:
        query = template_str % (counts[sku], sku)
        cur.execute(query)
    
def get_new_group_id(cur):
    date_key = datetime.now().date().isoformat() + '-' + str(int(datetime.now().timestamp()))
    query = """
        SELECT COUNT(1)
          FROM manifests
         WHERE date_key = '%(date_key)s'
    """ % {'date_key': date_key}
    cur.execute(query)
    num = cur.fetchone()[0]
    group_id = 'tectle-%s-%s' % (date_key, num+1)
    query = """
        INSERT INTO manifests (date_key, group_id)
        VALUES ('%(date_key)s', '%(group_id)s')
    """ % {'date_key': date_key, 'group_id': group_id}
    cur.execute(query)
    return group_id

def get_fulfillable_receipts(cur, strategy='oldest'):
    query = """
        SELECT sku,
               quantity
          FROM inventory
         WHERE quantity > 0
    """
    rows = get_data_dict(cur, query)
    inventory = {row['sku']:row['quantity'] for row in rows}
    query = """
        WITH required_skus as (
            SELECT r.receipt_id,
                   pq.sku,
                   r.order_time,
                   COUNT(1) required_amt
              FROM RECEIPTS r
                   JOIN PRINTER_QUEUE pq
                        ON r.receipt_id = pq.receipt_id
             WHERE r.group_id IS NULL
             GROUP BY r.receipt_id, pq.sku, r.order_time
             ORDER BY r.order_time ASC
        ), unsatisfied_receipts as (
            SELECT rs.receipt_id,
                   rs.order_time,
                   group_concat('''' || rs.sku || ''': ' || rs.required_amt, ',') order_info,
                   SUM(
                       CASE WHEN rs.required_amt > COALESCE(i.quantity, 0)
                            THEN 1
                            ELSE 0
                       END
                   ) num_unsatisfied
              FROM required_skus rs
              LEFT JOIN INVENTORY i
                        ON rs.sku = i.sku
             GROUP BY rs.receipt_id,
                      rs.order_time
             ORDER BY rs.order_time ASC
        )
        SELECT ur.receipt_id,
               ur.order_time,
               '{ ' || ur.order_info || ' }' as order_info
          FROM unsatisfied_receipts ur
         WHERE num_unsatisfied = 0
         ORDER BY ur.order_time ASC
    """
    receipts = get_data_dict(cur, query)
    for receipt in receipts:
        receipt['order_info_dict'] = eval(receipt['order_info'])
        receipt['order_date_str'] = datetime.fromtimestamp(receipt['order_time']).strftime('%Y-%m-%d %H:%M:%S')
    
    if strategy == 'most':
        return get_most_fulfillable_helper(inventory, receipts)
    elif strategy == 'oldest':
        return get_oldest_fulfillable_helper(inventory, receipts)
    else:
        #default
        return get_oldest_fulfillable_helper(inventory, receipts)
    
def get_oldest_fulfillable_helper(inventory, fullfillable_receipts):
    receipts = []
    if fullfillable_receipts:
        for receipt in fullfillable_receipts:
            change = remove_from_inventory(inventory, receipt['order_info_dict'])
            if change:
                receipts.append(receipt)
    return receipts

def remove_from_inventory(inventory, order_info):
    satisfied = True
    for sku in order_info:
        if inventory[sku] < order_info[sku]:
            satisfied = False
            break
    
    if satisfied:
        for sku in order_info:
            inventory[sku] -= order_info[sku]
    return satisfied
    

def get_most_fulfillable_helper(inventory, receipts):
    if len(receipts) == 0:
        return []
    else:
        receipt = receipts[0]
        temp_inventory = dict(inventory)
        receipts_without = get_most_fulfillable_helper(inventory, receipts[1:])
        satisfied = remove_from_inventory(temp_inventory, receipt['order_info_dict'])
        if satisfied:
            receipts_with = get_most_fulfillable_helper(temp_inventory, receipts[1:])
            receipts_with.append(receipt)
            if len(receipts_with) >= len(receipts_without):
                return receipts_with
            else:
                return receipts_without
        else:
            return receipts_without
    