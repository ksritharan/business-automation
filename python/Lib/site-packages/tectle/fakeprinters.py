from .db import get_connection, get_data_dict
from flask import render_template, url_for, make_response, jsonify
from flask.json import dumps
import traceback

READY = '0'
PRINTING = '1'

import random
import logging
logger = logging.getLogger()

def do_printer_rrstatus(printer_ip, status_type):
    conn = get_connection()
    cur = conn.cursor()
    
    response = None
    override = {}
    if not check_printer_exists(cur, printer_ip):
        response = make_response('printer ip not found', 400)
    else:
        try:
            printer = get_printer_info(cur, printer_ip)
            if printer['status'] == PRINTING:
                if printer['current_time'] > printer['finish_time']:
                    override = {'status': 'I'}
                    cur.execute("UPDATE FAKE_PRINTERS SET status = '0' WHERE printer_ip = '%s'" % printer_ip)
                else:
                    override = {'status': 'P', 'currentLayer': int(100*(printer['current_time']-printer['start_time'])/(printer['finish_time']-printer['start_time']))}
            else:
                override = {'status': 'I'}
            conn.commit()
            if not status_type:
                status_type = '1'
            response = status_templates(status_type, **override)
        except Exception as e:
            logging.exception(e)
            response = make_response(str(e), 400)
    return response

def do_printer_gcode(printer_ip, gcode):
    conn = get_connection()
    cur = conn.cursor()
    override = {}
    
    response = None
    if not check_printer_exists(cur, printer_ip):
        response = make_response('printer ip not found', 400)
    else:
        try:
            vals = gcode.split(" ")
            command = vals[0]
            if command == 'M32':
                printer = get_printer_info(cur, printer_ip)
                if printer['status'] == PRINTING:
                    response = make_response('printer is busy', 400)
                else:
                    sku = vals[1].split(",")[0]
                    query = """
                                UPDATE FAKE_PRINTERS
                                   SET status = '1',
                                       current_sku = '%(sku)s',
                                       start_time = datetime('now'),
                                       finish_time = datetime('now', '+20 seconds') /*'+5 minutes')*/
                                 WHERE printer_ip = '%(printer_ip)s'
                            """ % {'printer_ip': printer_ip, 'sku': sku}
                    cur.execute(query)
                    conn.commit()
                    response = make_response('{"buff":247}', 200)
            elif gcode == 'M36':
                printer = get_printer_info(cur, printer_ip)
                if printer['status'] == PRINTING:
                    file_info = {"err":0,"size":457574,"height":4.00,"layerHeight":0.25,"filament":[6556.3],"generatedBy":"Slic3r 1.1.7 on 2014-11-09 at 17:11:32"}
                    file_info['fileName'] = "%s.gcode" % printer['current_sku']
                    last_resp = dumps(file_info)
                    cur.execute("UPDATE FAKE_PRINTERS SET last_resp = '%s' WHERE printer_ip = '%s'" % (last_resp, printer_ip))
                    conn.commit()
                response = make_response('{"buff":247}', 200)
            elif gcode == 'M408 S0':
                printer = get_printer_info(cur, printer_ip)
                if printer['status'] == PRINTING:
                    if printer['current_time'] > printer['finish_time']:
                        override = {'status': 'I'}
                        cur.execute("UPDATE FAKE_PRINTERS SET status = '0' WHERE printer_ip = '%s'" % printer_ip)
                    else:
                        # randomly stop
                        val = random.randint(1, 1000)
                        if val <= 985: # 98.5% success rate
                            override = {'status': 'P', 'fraction_printed': round(((printer['current_time']-printer['start_time'])/(printer['finish_time']-printer['start_time'])), 3)}
                        else:
                            override = {'status': 'S', 'fraction_printed': round(((printer['current_time']-printer['start_time'])/(printer['finish_time']-printer['start_time'])), 3)}
                            cur.execute("UPDATE FAKE_PRINTERS SET status = '0' WHERE printer_ip = '%s'" % printer_ip)
 
                    conn.commit()
                last_resp = short_status_templates(**override)
                cur.execute("UPDATE FAKE_PRINTERS SET last_resp = '%s' WHERE printer_ip = '%s'" % (last_resp.replace("'", "''"), printer_ip))
                conn.commit()
                response = make_response('{"buff":247}', 200)
            else:
                response = make_response('invalid gcode', 400)
        except Exception as e:
            logger.debug(str(e))
            tb = traceback.format_exc()
            response = make_response(tb, 400)
            
    return response

def do_printer_reply(printer_ip):
    conn = get_connection()
    cur = conn.cursor()
    response = None
    try:
        query = """
            SELECT last_resp
              FROM FAKE_PRINTERS
             WHERE printer_ip = '%s'  
        """ % printer_ip
        cur.execute(query)
        last_resp = cur.fetchone()[0]
        cur.execute("UPDATE FAKE_PRINTERS SET last_resp = NULL WHERE printer_ip = '%s'" % printer_ip)
        conn.commit()
        if not last_resp:
            raise Exception('No response')
        response = make_response(last_resp, 200)
    except Exception as e:
        response = make_response(str(e), 400)
    return response

def check_printer_exists(cur, printer_ip):
    query = """
                SELECT COUNT(1)
                FROM FAKE_PRINTERS
                WHERE printer_ip = '%s'
            """ % printer_ip
    cur.execute(query)
    return cur.fetchone()[0] == 1

def get_printer_info(cur, printer_ip):
    query = """
                SELECT id,
                       printer_ip,
                       status,
                       current_sku,
                       start_time,
                       finish_time,
                       datetime('now') "current_time [timestamp]"
                FROM FAKE_PRINTERS
                WHERE printer_ip = '%s'
            """ % printer_ip
    printer = get_data_dict(cur, query)[0]
    return printer
    
def short_status_templates(**override):
    data = {
        "status": "I",
        "heaters": [25.0, 29.0, 28.3],
        "active": [-273.1, 0.0, 0.0],
        "standby": [-273.1, 0.0, 0.0],
        "hstat": [0, 2, 1],
        "pos": [-11.00, 0.00, 0.00],
        "extr": [0.0, 0.0],
        "sfactor": 100.00,
        "efactor": [100.00, 100.00],
        "tool": 1,
        "probe": "535",
        "fanPercent": [75.0, 0.0],
        "fanRPM": 0,
        "homed": [0, 0, 0]
    }
    for key in override:
        data[key] = override[key]
    return dumps(data)

def status_templates(status_type='1', **override):
    data = {}
    response = None
    if status_type == '1':
        data = {
            "status": "STATE",
            "coords": {
                "axesHomed": [0, 0, 0],
                "extr": [0.0, 0.0],
                "xyz": [0.0, 0.0, 0.0]
            },
            "currentTool":1, # -1 means none
            "output":{                # This
                "beepDuration": 3000, # is       # These are only included
                "beepFrequency": 2000,# missing  #in webserver responses
                "message": ""         # by
            },                        # default
            "params": {
                "atxPower": 0,
                "fanPercent": [100.0, 35.0],    # NOTE: This used to be a single value (up to v1.09o-ch)
                "speedFactor": 100.00,
                "extrFactors": [100.0, 100.0]
            },
            "seq":0, # Only included in webserver status response to indicate a new G-code response
            "sensors": {
                "probeValue": 0,
                "probeSecondary": [0,0], # Hidden for unmodulated probes, otherwise its array size depends on the probe type (usually 1 or 2)
                "fanRPM": 0
            },
            "temps": {
                "bed": {             # Missing
                    "current": 20.0, # if no
                    "active": -273.1,# heated
                    "state": 0       # bed
                },                   # is present
                "chamber": {         # Missing
                    "current": 19.7, # if no
                    "active": 50.0,  # chamber was
                    "state": 2       # previously defined
                },                   # using M141 H#
                "heads": {
                    "current": [25.0, 25.0],
                    "active": [0.0, 0.0],
                    "standby": [0.0, 0.0],
                    "state": [2, 1]  # 0: off, 1: standby, 2: active, 3: fault (same for bed)
                },
                "tools": {           # New in RRF 1.19. This reflects the set tool temperatures
                    "active": [[0.0], [0.0]],
                    "standby": [[0.0], [0.0]]
                }
            },
            "seq": 0, # NEW: As of 1.09m-ch, these two fields for G-Code responses
            "resp": "G-Code response for PanelDue", # may be included in AUX status responses as well (if available)
            "time": 435.2, # time since last reset
            "scanner": {   # OPTIONAL: only reported if a scanner is attached to the Duet. NOT FINAL YET, only RRF 1.18 or later
                "status": "D", # may be 'D'isconnected, 'I'dle, 'S'canning or 'U'ploading to Duet
                "progress": 95 # progress in per cent. This is 0 if the state is 'I', otherwise it reflects progress of the current state
            }
        }
        keys = ['status']
        for key in keys:
            if key in override:
                data[key] = override[key]
        response = dumps(data)
    elif status_type == '3':
        data = {
            "currentLayer": 0,
            "currentLayerTime": 0.0,
            "extrRaw": [0.0, 0.0],  # How much filament would have been printed without extrusion factors applied
            "fractionPrinted": 0.0, # one decimal place
            "firstLayerDuration": 0.0,
            "firstLayerHeight": 0.0,
            "printDuration": 0.0,
            "warmUpDuration": 0.0,
            
            "timesLeft": {
                "file": 0.0,
                "filament": 0.0,
                "layer": 0.0
            }
        }
        keys = ['currentLayer', 'printDuration', 'timesLeft']
        for key in keys:
            if key in override:
                data[key] = override[key]
        response = dumps(data)
    else:
        response = 'invalid status type'
        
    return response