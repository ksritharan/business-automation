from .db import get_connection, get_data_dict
from flask import render_template, url_for, make_response
import requests
import traceback
import logging
logger = logging.getLogger()

def do_manifestinfo(ca_post_manifest_id):
    context = {'orders': True}
    conn = get_connection()
    cur = conn.cursor()
    existing = False
    if ca_post_manifest_id:
        query = """
            SELECT COUNT(1)
              FROM manifest_links ml
             WHERE ml.get_url LIKE '%%%s'
        """ % ca_post_manifest_id
        cur.execute(query)
        existing = cur.fetchone()[0] > 0
    if existing:
        order_info = {}
        
        query = """
            WITH groups as (
                SELECT m.group_id
                  FROM manifests m 
                       JOIN manifest_links ml
                       ON m.id = ml.manifest_id
                 WHERE ml.get_url LIKE '%%%s'
            ), info as (
                SELECT r.receipt_id,
                       rp.tracking_pin,
                       r.name recipient_name,
                       r.country,
                       CASE r.country
                            WHEN 'US' THEN 0
                            WHEN 'CA' THEN 1
                            ELSE 2
                       END country_type,
                       CASE r.country
                            WHEN 'US' THEN 'USA'
                            WHEN 'CA' THEN 'CANADA'
                            ELSE 'INTERNATIONAL'
                       END country_type_str,
                       rp.package_id,
                       b.type box_type,
                       b.length_in,
                       b.width_in,
                       b.height_in,
                       p.sku,
                       p.name,
                       p.color,
                       p.size,
                       p.bottom,
                       COALESCE(pc.class, '') product_type,
                       p.category,
                       rp.quantity
                  FROM receipts r
                       JOIN groups g ON r.group_id = g.group_id
                       JOIN receipt_packages rp ON r.receipt_id = rp.receipt_id
                       JOIN boxes b ON b.id = rp.box_id
                       JOIN products p ON p.sku = rp.sku
                       LEFT JOIN package_classes pc ON pc.id = p.package_class_id
            )
            SELECT * 
              FROM info
          ORDER BY country_type, receipt_id, package_id
        """ % ca_post_manifest_id
        rows = get_data_dict(cur, query)
        
        manifest_info = {'keys': []}
        box_info = {}
        sku_info = {}
        
        for row in rows:
            country_type = row['country_type_str']
            receipt_id = row['receipt_id']
            package_id = row['package_id']
            
            # add by country -> receipt -> package hierarchy
            if country_type not in manifest_info:
                manifest_info[country_type] = {'keys': []}
                manifest_info['keys'].append(country_type)
            if receipt_id not in manifest_info[country_type]:
                manifest_info[country_type][receipt_id] = {'keys': [], 
                                                           'country': row['country'],
                                                           'recipient_name': row['recipient_name'],
                                                           'num_rows': 0}
                manifest_info[country_type]['keys'].append(receipt_id)
            if package_id not in manifest_info[country_type][receipt_id]:
                manifest_info[country_type][receipt_id][package_id] = {'num_rows': 0}
                manifest_info[country_type][receipt_id]['keys'].append(package_id)
            
            order_info = manifest_info[country_type][receipt_id][package_id]
            
            if 'box_type' not in order_info:
                order_info['tracking_pin'] = row['tracking_pin']
                order_info['box_type'] = row['box_type']
                order_info['length_in'] = row['length_in']
                order_info['width_in'] = row['width_in']
                order_info['height_in'] = row['height_in']
                order_info['skus'] = []
                box_type = row['box_type']
                if box_type not in box_info:
                    box_info[box_type] = {
                        'box_type': box_type,
                        'length_in': row['length_in'],
                        'width_in': row['width_in'],
                        'height_in': row['height_in'],
                        'quantity': 0
                    }
                box_info[box_type]['quantity'] += 1
                
                
            item = {'sku': row['sku'],
                    'name': row['name'],
                    'color': row['color'],
                    'size': row['size'],
                    'quantity': row['quantity'],
                    'bottom': row['bottom'],
                    'category': row['category'],
                    'product_type': row['product_type']
                   }
            order_info['skus'].append(item)
            manifest_info[country_type][receipt_id][package_id] = order_info
            
            sku = row['sku']
            if sku not in sku_info:
                sku_info[sku] = {
                    'sku': sku,
                    'name': row['name'],
                    'color': row['color'],
                    'size': row['size'],
                    'bottom': row['bottom'],
                    'category': row['category'],
                    'product_type': row['product_type'],
                    'quantity': 0
                }
            sku_info[sku]['quantity'] += row['quantity']
            manifest_info[country_type][receipt_id]['num_rows'] += 1
            manifest_info[country_type][receipt_id][package_id]['num_rows'] += 1
            
        context['manifest_info'] = manifest_info
        context['box_info'] = sorted(list(box_info.values()), key=lambda box: box['box_type'])
        context['sku_info'] = sorted(list(sku_info.values()), key=lambda sku: sku['sku'])
    
    return render_template('manifestinfo.html', **context)