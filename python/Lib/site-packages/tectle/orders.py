from .db import get_connection, get_data_dict
from flask import render_template, url_for, make_response, session
import requests
import traceback
from datetime import datetime
from time import sleep, process_time
from .config import load_config, is_debug
from .etsy import send_etsy_post_request
from .sources.etsy import Etsy
from .sources.webflow import Webflow
from .shipping import create_shipping_label, create_manifest

import logging
logger = logging.getLogger()

def do_orders(group_id=None):
    context = {'orders': True}
    conn = get_connection()
    cur = conn.cursor()
    where_clause = ""
    clauses = []
    if group_id:
        clauses.append("group_id = '%s'" % group_id)
    if clauses:
        where_clause = 'WHERE %s' % ' \n AND'.join(clauses)
    query = """
        WITH unique_packages as (
             SELECT r.receipt_id,
                    rp.package_id,
                    MAX(rp.filename) filename,
                    MAX(rp.tracking_pin) tracking_pin
               FROM receipts r
                    JOIN receipt_packages rp
                      ON r.receipt_id = rp.receipt_id
              GROUP BY r.receipt_id, rp.package_id
        ), tracking_pins as (
             SELECT receipt_id,
                    MIN(tracking_pin) tracking_pin,
                    COUNT(filename) num_completed_labels,
                    COUNT(1) total_num_labels
               FROM unique_packages
              GROUP BY receipt_id
        )
        SELECT r.*,
               CASE r.status
                    WHEN 0 THEN 'pending'
                    WHEN 1 THEN 'printed'
                    WHEN 2 THEN 'completed'
                    ELSE ''
               END html_status,
               CASE r.status
                    WHEN 0 THEN 'secondary'
                    WHEN 1 THEN 'warning'
                    WHEN 2 THEN 'success'
                    ELSE ''
               END css_status,
               pq.printer_id,
               pq.sku,
               pq.status item_status,
               pq.progress,
               (CASE WHEN tp.num_completed_labels = tp.total_num_labels THEN tp.tracking_pin ELSE NULL END) tracking_pin,
               tp.num_completed_labels,
               tp.total_num_labels
          FROM receipts r
               JOIN printer_queue pq
                 ON r.receipt_id = pq.receipt_id
               JOIN tracking_pins tp
                 ON r.receipt_id = tp.receipt_id
          %s
    """ % where_clause
    logger.info(query)
    receipts = get_data_dict(cur, query)
    grouped_receipts = {}
    pq_keys = ['printer_id', 'sku', 'item_status', 'progress']
    for receipt in receipts:
        receipt_id = receipt['receipt_id']
        if receipt_id not in grouped_receipts:
            grouped_receipts[receipt_id] = {k: receipt[k] for k in receipt if k not in pq_keys}
            grouped_receipts[receipt_id]['queue'] = []
        queue_item = {k: receipt[k] for k in receipt if k in pq_keys}
        grouped_receipts[receipt_id]['queue'].append(queue_item)
    
    context['receipts'] = list(grouped_receipts.values())
    
    query = """
        SELECT group_id
          FROM manifests
         WHERE status = 0
         ORDER BY group_id DESC
    """
    manifests = get_data_dict(cur, query)
    context['manifests'] = manifests
    context['selected_manifest'] = group_id
    
    if group_id:
        query = """
            WITH receipt_package_grouped as (
            SELECT rp.filename
              FROM receipts r
              JOIN receipt_packages rp
                   ON r.receipt_id = rp.receipt_id
             WHERE r.group_id = '%s'
             GROUP BY r.receipt_id, rp.package_id, rp.filename
            )
            SELECT COUNT(filename) total_num_complete,
                   COUNT(1) total_num_labels
              FROM receipt_package_grouped
        """ % group_id
        cur.execute(query)
        total_num_complete, total_num_labels = cur.fetchone()
        context['total_num_complete'] = total_num_complete
        context['total_num_labels'] = total_num_labels
        query = """
            SELECT ml.filename
              FROM manifests m
              LEFT JOIN manifest_links ml
                   ON m.id = ml.manifest_id
             WHERE m.group_id = '%s'
        """ % group_id
        cur.execute(query)
        context['manifest_file'] = cur.fetchone()[0]
    
    return render_template('orders.html', **context)


def do_update_orders():
    response = None
    try:
        Etsy().fetch_and_insert()
        Webflow().fetch_and_insert()
        response = make_response('success', 200)
    except Exception as e:
        tb = traceback.format_exc()
        response = make_response(tb, 400)
        logging.exception(e)
    return response

def do_contract_shipping_label(group_id):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        num_failed = create_shipping_label(cur, group_id)
        conn.commit()
        if num_failed == 0:
            create_manifest(cur, group_id)
            response = make_response('success', 200)
        else:
            response = make_response('failed to get %s labels' % num_failed, 400)
    except Exception as e:
        tb = traceback.format_exc()
        response = make_response(tb, 400)
        logger.exception(e)
    return response

def do_order_complete(receipt_id):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        load_config()
        query = """
             SELECT r.receipt_id,
                    r.source,
                    MIN(rp.tracking_pin) tracking_pin
               FROM receipts r
                    JOIN receipt_packages rp
                      ON r.receipt_id = rp.receipt_id
              WHERE r.receipt_id = '%s'
              GROUP BY r.receipt_id, r.source
              HAVING SUM(CASE WHEN rp.tracking_pin IS NULL THEN 1 ELSE 0 END) = 0
        """ % receipt_id
        cur.execute(query)
        source, tracking_pin = cur.fetchone()[1:]
        data = {'tracking_pin': tracking_pin}
        url = None
        if not is_debug():
            if source == 'Etsy':
                url = 'https://openapi.etsy.com/v2/shops/%s/receipts/%s/tracking' % (session['SHOP_ID'], receipt_id)
                send_etsy_post_request(url, data)
            elif source == 'Webflow':
                complete_order_webflow(receipt_id, tracking_pin)
        query = """
            UPDATE receipts
               SET status = 2 /* completed */
             WHERE receipt_id = '%s'
        """ % receipt_id
        cur.execute(query)
        conn.commit()
        response = make_response('success', 200)
    except Exception as e:
        logger.exception(e)
        response = make_response(str(e), 400)
    return response
    
def do_manifest(group_id):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        create_manifest(cur, group_id)
        conn.commit()
        response = make_response('success', 200)
    except Exception as e:
        tb = traceback.format_exc()
        response = make_response(tb, 400)
        logger.exception(e)
    return response