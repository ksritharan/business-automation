from .db import get_connection, get_data_dict
from flask import render_template, url_for, make_response, session
import requests
from math import ceil
import traceback
from datetime import datetime
from time import sleep, process_time
from .config import load_config, is_debug
import logging
logger = logging.getLogger()

def do_orders(status=None):
    context = {'orders': True}
    conn = get_connection()
    cur = conn.cursor()
    where_clause = ""
    if status in (0, 1, 2):
        where_clause = "WHERE r.status = %s" % status
    query = """
        WITH unique_packages as (
             SELECT r.receipt_id,
                    rp.package_id,
                    MAX(rp.tracking_pin) tracking_pin
               FROM receipts r
                    JOIN receipt_packages rp
                      ON r.receipt_id = rp.receipt_id
              GROUP BY r.receipt_id, rp.package_id
        ), tracking_pins as (
             SELECT receipt_id,
                    MAX(tracking_pin) tracking_pin,
                    SUM(CASE WHEN tracking_pin IS NULL THEN 0 ELSE 1 END) num_completed_labels,
                    COUNT(1) total_num_labels
               FROM unique_packages
              GROUP BY receipt_id
        )
        SELECT r.*,
               CASE r.status
                    WHEN 0 THEN 'pending'
                    WHEN 1 THEN 'printed'
                    WHEN 2 THEN 'completed'
                    ELSE ''
               END html_status,
               CASE r.status
                    WHEN 0 THEN 'secondary'
                    WHEN 1 THEN 'warning'
                    WHEN 2 THEN 'success'
                    ELSE ''
               END css_status,
               pq.printer_id,
               pq.sku,
               pq.status item_status,
               pq.progress,
               (CASE WHEN tp.num_completed_labels = tp.total_num_labels THEN tp.tracking_pin ELSE NULL END) tracking_pin,
               tp.num_completed_labels,
               tp.total_num_labels
          FROM receipts r
               JOIN printer_queue pq
                 ON r.receipt_id = pq.receipt_id
               JOIN tracking_pins tp
                 ON r.receipt_id = tp.receipt_id
          %s
    """ % where_clause
    logger.info(query)
    receipts = get_data_dict(cur, query)
    grouped_receipts = {}
    pq_keys = ['printer_id', 'sku', 'item_status', 'progress']
    for receipt in receipts:
        receipt_id = receipt['receipt_id']
        if receipt_id not in grouped_receipts:
            grouped_receipts[receipt_id] = {k: receipt[k] for k in receipt if k not in pq_keys}
            grouped_receipts[receipt_id]['queue'] = []
        queue_item = {k: receipt[k] for k in receipt if k in pq_keys}
        grouped_receipts[receipt_id]['queue'].append(queue_item)
    
    context['receipts'] = list(grouped_receipts.values())
    return render_template('orders.html', **context)


def do_update_orders():
    response = None
    batch_size = 25
    conn = get_connection()
    cur = conn.cursor()
    try:
        receipts, total_receipts = update_orders_helper(batch_size, 0)
        num_loops = ceil((total_receipts/batch_size)-1)
        for x in range(num_loops):
            new_receipts, total_receipts = update_orders_helper(batch_size, len(receipts))
            receipts.extend(new_receipts)
        new_receipt_ids = add_new_receipts(cur, receipts)
        new_sku_lists = add_to_printer_queue(cur, new_receipt_ids)
        package_new_receipts(cur, new_receipt_ids, new_sku_lists)
        conn.commit()
        response = make_response('success', 200)
    except Exception as e:
        tb = traceback.format_exc()
        response = make_response(tb, 400)
        logging.exception(e)
    return response

def do_shipping_label(receipt_id):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        num_failed = create_shipping_label(cur, receipt_id)
        conn.commit()
        if num_failed == 0:
            response = make_response('success', 200)
        else:
            response = make_response('failed to get %s labels' % num_failed, 400)
    except Exception as e:
        tb = traceback.format_exc()
        response = make_response(tb, 400)
        logger.exception(e)
    return response
    

def update_orders_helper(limit, offset):
    url = None
    if 'DEBUG' not in session:
        url = 'https://openapi.etsy.com/v2/shops/%s/receipts/open?limit=%s&offset=%s' % (session['SHOP_ID'], limit, offset)
    else:
        url = 'http://127.0.0.1:8080/receipts/open?limit=%s&offset=%s' %(limit, offset)
    response = requests.get(url)
    response.raise_for_status()
    response_json = response.json()
    receipts = response_json['results']
    total_receipts = response_json['count']
    return receipts, total_receipts

def add_new_receipts(cur, receipts):
    receipt_ids = [str(receipt['receipt_id']) for receipt in receipts]
    query = """
        SELECT receipt_id
          FROM receipts
         WHERE receipt_id in (%s)
    """ % ",".join(receipt_ids)
    cur.execute(query)
    rows = cur.fetchall()
    old_receipts = {row[0] for row in rows}
    new_receipts = []
    for receipt in receipts:
        if receipt['receipt_id'] not in old_receipts:
            if receipt['country_id'] == 79:
                receipt['country'] = 'CA'
            else:
                receipt['country'] = 'US'
            new_receipts.append(receipt)
    values = ',\n'.join(["('%(name)s', %(receipt_id)s, '%(first_line)s', '%(second_line)s', '%(city)s', '%(state)s', '%(zip)s', '%(country)s', '%(country_id)s', '%(buyer_email)s')" % receipt
                for receipt in new_receipts])
    if new_receipts:
        query = """
            INSERT INTO receipts (name, receipt_id, first_line, second_line, city, state, zip, country, country_id, buyer_email)
            VALUES %s
        """ % values
        cur.execute(query)
    return [receipt['receipt_id'] for receipt in new_receipts]

def add_to_printer_queue(cur, new_receipt_ids):
    queue_items = []
    sku_lists = {}
    for receipt_id in new_receipt_ids:
        items, sku_list = transaction_info_helper(receipt_id)
        sku_lists[receipt_id] = sku_list
        queue_items.extend(items)
    values = ',\n'.join(["(%(receipt_id)s, '%(sku)s')" % queue_item for queue_item in queue_items])
    if queue_items:
        query = """
            INSERT INTO printer_queue (receipt_id, sku)
            VALUES %s
        """ % values
        cur.execute(query)
        skus = list({queue_item['sku'] for queue_item in queue_items})
        import_new_skus(cur, skus)
    return sku_lists

def transaction_info_helper(receipt_id):
    url = None
    if not is_debug():
        url = 'https://openapi.etsy.com/v2/receipts/%s/transactions' % receipt_id
    else:
        url = 'http://127.0.0.1:8080/receipts/%s/transactions' % receipt_id
    response = requests.get(url)
    response.raise_for_status()
    response_json = response.json()
    transactions = response_json['results']
    rows = []
    sku_list = []
    for transaction in transactions:
        skus = transaction['product_data']['sku'].split('.')
        for i in range(len(skus)):
            sku = skus[i].strip()
            for j in range(transaction['quantity']):
                row = {'receipt_id': receipt_id,
                       'sku': sku,
                      }
                rows.append(row)
        for i in range(transaction['quantity']):
            sku_list.append(transaction['product_data']['sku'])
    return rows, sku_list
    
def import_new_skus(cur, skus):
    values = "('%s')" % "','".join(skus)
    query = """
        SELECT sku
          FROM products
         WHERE sku in %s
    """ % values
    cur.execute(query)
    rows = cur.fetchall()
    old_sku = {row[0] for row in rows}
    new_skus = [sku for sku in skus if sku not in old_sku]
    query = """
        SELECT *
          FROM package_classes
    """
    rows = get_data_dict(cur, query)
    package_classes = {}
    for row in rows:
        package_classes[row['class']] = row
    if new_skus:
        insert_data = []
        for sku in new_skus:
            insert_data.append("('%(sku)s', %(design_id)s, '%(category)s', '%(name)s', '%(color)s', %(size)s, '%(bottom)s', %(package_class_id)s)" % get_product_data(sku, package_classes))
        query = """
            INSERT INTO products (sku, design_id, category, name, color, size, bottom, package_class_id)
            VALUES %s
        """ % ',\n'.join(insert_data)
        cur.execute(query)
    
def get_product_data(sku, package_classes):
    #PD750001WTM
    data = {}
    data['sku'] = sku
    category = sku[0]
    if category == 'P':
        data['category'] = 'Planter'
    elif category == 'A':
        data['category'] = 'Accessory'
    else:
        logger.error(sku)
        logger.error(data['category'])
        raise Exception('Invalid category')
        
    size = ord(sku[1]) - ord('A') + 1
    size_decimal = float("0."+sku[2:4])
    data['size'] = size + size_decimal
    
    data['design_id'] = int(sku[4:8])

    if category == 'P':
        if data['design_id'] == 1:
            data['name'] = 'Fractal'
        elif data['design_id'] == 2:
            data['name'] = 'Opal'
        elif data['design_id'] == 3:
            data['name'] = 'Ripple'
        elif data['design_id'] == 4:
            data['name'] = 'Mica'
        elif data['design_id'] == 5:
            data['name'] = 'Pineapple'
        else:
            logger.error(sku)
            logger.error(data['design_id'])
            raise Exception('Invalid design_id')
    elif category == 'A':
        data['name'] = 'WaterPlate'
    
    color = sku[8:9]
    if color == 'W':
        data['color'] = 'White'
    elif color == 'B':
        data['color'] = 'Blue'
    elif color == 'K':
        data['color'] = 'Black'
    elif color == 'R':
        data['color'] = 'Red'
    else:
        logger.error(sku)
        logger.error(data['color'])
        raise Exception('Invalid color')
        
    if category == 'P':
        bottom = sku[10]
        if bottom == 'M':
            data['bottom'] = 'Mesh'
        elif bottom == 'S':
            data['bottom'] = 'Sealed'
        else:
            logger.error(sku)
            logger.error(data['bottom'])
            raise Exception('Invalid bottom')  
    else:
        data['bottom'] = ''
    
    if category == 'A':
        data['package_class_id'] = 'NULL'
    else:
        if data['size'] < 5:
            data['package_class_id'] = package_classes['Medium']['id']
        elif data['size'] < 9:
            data['package_class_id'] = package_classes['Large']['id']
        elif data['size']:
            data['package_class_id'] = package_classes['XLarge']['id']

    return data

def get_package_configs(cur):
    query = """
        SELECT *
          FROM package_configs
    """
    rows = get_data_dict(cur, query)
    package_configs = {}
    for row in rows:
        package_id = row['package_id']
        package_class_id = row['package_class_id']
        if package_id not in package_configs:
            package_configs[package_id] = {'box_id': row['box_id'],
                                          'cost_ca': row['cost_ca'],
                                          'cost_us': row['cost_us'],
                                          'values': {},
                                          'num_items': 0
                                         }
        package_configs[package_id]['values'][package_class_id] = row['quantity']
        package_configs[package_id]['num_items'] += row['quantity']
    return package_configs

def package_new_receipt(cur, receipt_id, cost_key, sku_list, package_configs):
    query = """
        SELECT p.package_class_id,
               COUNT(1) num,
               r.country
          FROM printer_queue pq
          JOIN products p ON p.sku = pq.sku
          JOIN receipts r ON r.receipt_id = %s
         WHERE pq.receipt_id = %s
         GROUP BY p.package_class_id, r.country
    """ % (receipt_id, receipt_id)
    cur.execute(query)
    rows = cur.fetchall()
    product_order = {row[0]:row[1] for row in rows if row[0]}
    query = """
        SELECT p.sku,
               p.package_class_id
          FROM printer_queue pq
          JOIN products p ON p.sku = pq.sku
         WHERE pq.receipt_id = %s
           AND p.category = 'Planter'
    """ % receipt_id
    cur.execute(query)
    rows = cur.fetchall()
    sku_class_map = {row[0]:row[1] for row in rows if row[0]}
    cur.execute(query)
    class_sku_lists = {}
    for sku in sku_list:
        planter_sku = sku.split('.')[0]
        package_class_id = sku_class_map[planter_sku]
        if package_class_id not in class_sku_lists:
            class_sku_lists[package_class_id] = []
        class_sku_lists[package_class_id].append(sku)
    packaging_data = get_packaging(cur, product_order, package_configs, class_sku_lists, cost_key)
    save_packaging(cur, receipt_id, packaging_data)

def save_packaging(cur, receipt_id, packaging_data):
    row = {}
    row['receipt_id'] = receipt_id
    data_template = "(%(receipt_id)s, %(package_id)s, %(box_id)s, '%(sku)s', %(quantity)s)"
    data_rows = []
    query = "SELECT COALESCE(MAX(package_id), 1) FROM receipt_packages"
    cur.execute(query)
    package_id = cur.fetchone()[0]
    for package in packaging_data:
        box_id = package['box_id']
        row['box_id'] = box_id
        row['package_id'] = package_id
        for full_sku in package['items']:
            quantity = package['items'][full_sku]
            skus = full_sku.split('.')
            row['quantity'] = quantity
            for sku in skus:
                row['sku'] = sku
                data_rows.append(data_template % row)
        package_id += 1
    values = ",\n".join(data_rows)
    query = "DELETE FROM receipt_packages WHERE receipt_id = %s" % receipt_id
    cur.execute(query)
    query = """
        INSERT INTO receipt_packages (receipt_id, package_id, box_id, sku, quantity)
        VALUES %s
    """ % values
    cur.execute(query)
    
def package_new_receipts(cur, new_receipt_ids, new_sku_lists):
    package_configs = get_package_configs(cur)
    query = """
        SELECT receipt_id, 
               CASE country
               WHEN 'CA' THEN 'cost_ca'
                         ELSE 'cost_us'
               END cost_key
          FROM receipts
         WHERE receipt_id in (%s)
    """ % ','.join([str(receipt_id) for receipt_id in new_receipt_ids])
    cur.execute(query)
    rows = cur.fetchall()
    cost_keys = {row[0]:row[1] for row in rows}
    for receipt_id in new_receipt_ids:
        cost_key = cost_keys[receipt_id]
        sku_list = new_sku_lists[receipt_id]
        package_new_receipt(cur, receipt_id, cost_key, sku_list, package_configs)

def fit_in_box(product_order, package_config):
    new_product_order = dict(product_order)
    fits_some = False
    for key in package_config:
        if package_config[key] > product_order.get(key, 0):
            return False, new_product_order
        if not fits_some and key in product_order:
            fits_some = True
    if not fits_some:
        return False, new_product_order
    for key in package_config:
        if key in new_product_order:
            new_product_order[key] -= package_config[key]
    return True, new_product_order

def get_hashable(data, keys):
    return ",".join([str(data[key]) for key in keys if key in data])
    
from functools import reduce
def get_packaging_helper(product_order, package_configs, combination, cost_key, package_class_ids, best_combs):
    key = get_hashable(product_order, package_class_ids)
    if key in best_combs:
        return best_combs[key]
    num_items = reduce(lambda x, y: x + y, product_order.values())
    if (num_items == 0):
        return combination
    else:
        best_comb = {}
        cost = 0
        for package_id in package_configs:
            config = package_configs[package_id]
            if config['num_items'] <= num_items:
                fits, new_product_order = fit_in_box(product_order, config['values'])
                if fits:
                    new_comb = dict(combination)
                    if package_id not in new_comb:
                        new_comb[package_id] = 0
                    new_comb[package_id] += 1
                    new_comb['cost'] += config[cost_key]
                    res_comb = get_packaging_helper(new_product_order, package_configs, new_comb, cost_key, package_class_ids, best_combs)
                    if cost == 0 or res_comb['cost'] < cost:
                        best_comb = dict(res_comb)
                        cost = int(res_comb['cost'])
        best_combs[key] = best_comb
        return best_comb


def get_packaging(cur, product_order, package_configs, class_sku_lists, cost_key):
    combination = {'cost': 0}  
    query = """
        SELECT id
          FROM package_classes
    """
    cur.execute(query)
    rows = cur.fetchall()
    package_class_ids = [row[0] for row in rows]
    best_combs = {}
    best_comb = get_packaging_helper(product_order, package_configs, combination, cost_key, package_class_ids, best_combs)
    cost = best_comb['cost']
    del best_comb['cost']
    packaging_data = []
    for key in best_comb:
        qty = best_comb[key]
        for i in range(qty):
            config = package_configs[key]
            box_id = config['box_id']
            values = config['values']
            sku_map = {}
            for k in values:
                for j in range(values[k]):
                    sku = class_sku_lists[k].pop()
                    if sku not in sku_map:
                        sku_map[sku] = 0
                    sku_map[sku] += 1
            package = {'box_id': box_id, 'items': sku_map}
            packaging_data.append(package)
            
    return packaging_data

def create_shipping_label(cur, receipt_id):
    num_failed = create_shipping_label_helper(cur, receipt_id)
    if num_failed == 0:
        abs_filename = create_merged_file(cur, receipt_id)
        query = """
            UPDATE receipts
               SET shipping_label = '%s'
             WHERE receipt_id = %s
        """ % (abs_filename, receipt_id)
        cur.execute(query)
    return num_failed

def create_shipping_label_helper(cur, receipt_id):
    query = """
        SELECT name,
               first_line,
               second_line,
               city,
               state,
               zip,
               country,
               buyer_email
          FROM receipts
         WHERE receipt_id = %s
    """ % receipt_id
    buyer_info = get_data_dict(cur, query)[0]
    packages = {}
    
    query = """
        SELECT rp.package_id,
               b.weight_kg box_weight,
               b.length_cm length,
               b.width_cm width,
               b.height_cm height,
               p.sku,
               'Container' as desc,
               pc.weight_kg unit_weight,
               pc.cost cad_value,
               rp.quantity,
               p.category,
               rp.label_url,
               rp.tracking_pin
          FROM receipt_packages rp
               JOIN boxes b ON b.id = rp.box_id
               JOIN products p ON p.sku = rp.sku
          LEFT JOIN package_classes pc ON pc.id = p.package_class_id
         WHERE receipt_id = %s
           AND p.category = 'Planter'
           AND rp.filename IS NULL
    """ % receipt_id
    rows = get_data_dict(cur, query)
    
    for row in rows:
        package_id = row['package_id']
        if package_id not in packages:
            packages[package_id] = dict(buyer_info)
            packages[package_id]['weight'] = row['box_weight']
            packages[package_id]['length'] = row['length']
            packages[package_id]['width'] = row['width']
            packages[package_id]['height'] = row['height']
            packages[package_id]['items'] = []
            packages[package_id]['label_url'] = row['label_url']
            packages[package_id]['tracking_pin'] = row['tracking_pin']
        if row['category'] == 'Planter':
            packages[package_id]['weight'] += row['quantity'] * row['unit_weight']
            item = {'sku': row['sku'],
                    'desc': row['desc'],
                    'unit_weight': row['unit_weight'],
                    'cad_value': row['cad_value'],
                    'quantity': row['quantity']
                    }
            packages[package_id]['items'].append(item)
    
    num = 1
    
    files = []
    
    num_failed = 0
    for package_id in packages:
        weight = round(ceil(round(packages[package_id]['weight'],2)/0.5)*0.5, 1)
        packages[package_id]['weight'] = weight
        context = {'data': packages[package_id], 'items': packages[package_id]['items']}
        if not get_shipping_label(cur, context, receipt_id, num, package_id, packages[package_id]['label_url'], packages[package_id]['tracking_pin']):
            num_failed += 1
        num += 1

    return num_failed

def create_merged_file(cur, receipt_id):
    query = """
        SELECT rp.package_id,
               p.sku,
               rp.quantity,
               p.category || ' ' || p.name || ' ' || p.bottom as type,
               p.color,
               p.size,
               'Box ' || b.type || ' ' || b.length_in || 'x' || b.width_in || 'x' || b.height_in as box_label,
               rp.filename
          FROM receipt_packages rp
               JOIN boxes b ON b.id = rp.box_id
               JOIN products p ON p.sku = rp.sku
          LEFT JOIN package_classes pc ON pc.id = p.package_class_id
         WHERE receipt_id = %s
    """ % receipt_id
    rows = get_data_dict(cur, query)
    packages = {}
    for row in rows:
        package_id = row['package_id']
        if package_id not in packages:
            packages[package_id] = {}
            packages[package_id]['box_label'] = row['box_label']
            packages[package_id]['all_items'] = []
            packages[package_id]['filename'] = row['filename']
        all_item = {'sku': row['sku'],
                    'quantity': row['quantity'],
                    'type': row['type'],
                    'color': row['color'],
                    'size': row['size']
                   }
        packages[package_id]['all_items'].append(all_item)
    files = []
    num = 1    
    max_num = len(packages.keys())
    for package_id in packages:
        lines = get_lines(receipt_id, num, max_num, packages[package_id]['box_label'], packages[package_id]['all_items'])
        filename = packages[package_id]['filename']
        files.append((filename, lines))
        num += 1
    abs_filename = add_writing(receipt_id, files)
    return abs_filename

def get_lines(receipt_id, num, max_num, box_label, items):
    lines = ["Receipt ID: %s" % receipt_id,
             "PDF Num: %s of %s" % (num, max_num),
             box_label,
             ""]
    for item in items:
        lines.append("SKU: %s" % item['sku'])
        lines.append("Type: %s" % item['type'])
        lines.append("Color: %s" % item['color'])
        lines.append("Size: %s inch" % item['size'])
        lines.append("Quantity: %s" % item['quantity'])
        lines.append("")
    return lines

import random
def get_shipping_label(cur, context, receipt_id, num, package_id, label_url, tracking_pin):
    load_config()
    try:
        headers = {
          'Accept': 'application/vnd.cpc.ncshipment-v4+xml',
          'Content-Type': 'application/vnd.cpc.ncshipment-v4+xml',
          'Accept-language': 'en-CA'
        }
        if not label_url:
            if is_debug():
                some_number = random.randint(1,2)
                if some_number == 2:
                    raise Exception('xd')
            xml_body = render_template('shipping_request_template.xml', **context)
            url = None
            if is_debug():
                headers['Authorization'] = 'Basic %s' % session['CP_AUTH_DEBUG']
                url = "https://ct.soa-gw.canadapost.ca/rs/%s/ncshipment" % session['CP_SHOP']
            else:
                headers['Authorization'] = 'Basic %s' % session['CP_AUTH']
                url = "https://soa-gw.canadapost.ca/rs/%s/ncshipment" % session['CP_SHOP']
                
            response = requests.request("POST", url, headers=headers, data=xml_body)
            response_text = response.text
            label_url = response_text.split('<link rel="label" href="')[1].split('"')[0]
            tracking_pin = 'NOTRACKING'
            if 'tracking-pin' in response_text:
                tracking_pin = response_text.split('<tracking-pin>')[1].split('</tracking-pin>')[0]
            query = """
                UPDATE receipt_packages
                   SET label_url = '%s',
                       tracking_pin = '%s'
                 WHERE receipt_id = %s
                   AND package_id = %s
            """ % (label_url, tracking_pin, receipt_id, package_id)
            cur.execute(query)

        headers['Accept'] = 'application/pdf'
        headers['Content-Type'] = 'application/pdf'
        r = requests.request("GET", label_url, headers=headers, stream=True)
        filename = 'static/pdfs/%s %s [%s] %s.pdf' % (receipt_id, datetime.today().strftime('%Y-%m-%d'), tracking_pin, num)
        with open(filename, 'wb') as fd:
            for chunk in r.iter_content(2048):
                fd.write(chunk)
        query = """
            UPDATE receipt_packages
               SET filename = '%s'
             WHERE receipt_id = %s
               AND package_id = %s
        """ % (filename, receipt_id, package_id)
        cur.execute(query)
    except Exception as e:
        logger.exception(e)
        logger.error("Failed to get/save label_pdf")
        return False

    return True


from PyPDF2 import PdfFileWriter, PdfFileReader
import io
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import inch
import os
from shutil import copyfile

def add_writing(receipt_id, files):

    output = PdfFileWriter()
    for filename, lines in files:
        packet = io.BytesIO()
        c = canvas.Canvas(packet, pagesize=letter)
        c.setFillColorRGB(1,1,1)
        c.rect(0, 0, 5.5*inch, 8.5*inch, fill=1)
        c.setFillColorRGB(0,0,0)
        y_decrement = 0.2*inch
        y_offset = 8.1*inch
        y_offset_start = 7.4*inch
        x_increment = 2.5*inch
        x_offset = 0.2*inch
        min_y = 0.9*inch
        i = 1
        max_lines = lines[:75]
        for line in max_lines:
            if line == "":
                y_offset -= 0.5*y_decrement
            else:
                c.drawString(x_offset, y_offset, line)
                y_offset -= y_decrement
            if y_offset <= min_y:
                y_offset = y_offset_start
                x_offset += x_increment
            i += 1
        c.save()
        
        packet.seek(0)
        new_pdf = PdfFileReader(packet)
        existing_pdf = PdfFileReader(open(filename, "rb"))
        page = existing_pdf.getPage(0)
        page.mergePage(new_pdf.getPage(0))
        output.addPage(page)
    
    
    filename2 = 'static/pdfs/%s %s_merged.pdf' % (receipt_id, datetime.today().strftime('%Y-%m-%d'))
    outputStream = open(filename2, "wb")
    output.write(outputStream)
    outputStream.close()
    
    load_config()
    try:
        if 'PDF_FOLDER' in session:
            pdf_folder = session['PDF_FOLDER']
            basename = os.path.basename(filename2)
            new_path = os.path.join(pdf_folder, basename)
            copyfile(filename2, new_path)
    except:
        pass
    
    return filename2
    
def do_order_complete(receipt_id):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        load_config()
        query = """
             SELECT r.receipt_id,
                    MAX(rp.tracking_pin) tracking_pin
               FROM receipts r
                    JOIN receipt_packages rp
                      ON r.receipt_id = rp.receipt_id
              WHERE r.receipt_id = %s
              GROUP BY r.receipt_id
              HAVING SUM(CASE WHEN rp.tracking_pin IS NULL THEN 1 ELSE 0 END) = 0
        """ % receipt_id
        cur.execute(query)
        tracking_pin = cur.fetchone()[1]
        data = {'tracking_pin': tracking_pin}
        url = None
        if not is_debug():
            url = 'https://openapi.etsy.com/v2/shops/%s/receipts/%s/tracking' % (session['SHOP_ID'], receipt_id)
            send_etsy_post_request(url, data)
        query = """
            UPDATE receipts
               SET status = 2 /* completed */
             WHERE receipt_id = %s
        """ % receipt_id
        cur.execute(query)
        conn.commit()
        response = make_response('success', 200)
    except Exception as e:
        logger.exception(e)
        response = make_response(str(e), 400)
    return response