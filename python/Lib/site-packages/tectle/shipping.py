from .config import load_config, is_debug
from .db import get_connection, get_data_dict
from flask import render_template, session
from datetime import datetime
from time import sleep, process_time
import requests

import logging
logger = logging.getLogger()

def create_shipping_label(cur, group_id):
    query = """
        SELECT receipt_id
          FROM receipts
         WHERE group_id = '%s'
    """ % group_id
    cur.execute(query)
    rows = cur.fetchall()
    receipt_ids = [row[0] for row in rows]

    total_num_failed = 0
    load_config()
    for receipt_id in receipt_ids:
        num_failed = create_shipping_label_helper(cur, receipt_id)
        if num_failed == 0:
            abs_filename = create_merged_file(cur, receipt_id)
            query = """
                UPDATE receipts
                   SET shipping_label = '%s'
                 WHERE receipt_id = '%s'
            """ % (abs_filename, receipt_id)
            cur.execute(query)
        total_num_failed += num_failed
    return total_num_failed

def create_shipping_label_helper(cur, receipt_id):
    query = """
        SELECT r.name,
               r.first_line,
               r.second_line,
               r.city,
               r.state,
               r.zip,
               r.country,
               r.buyer_email,
               r.group_id,
               c.currency,
               MIN(999.999, c.fxrate) fxrate
          FROM receipts r
          JOIN countries c ON c.country_id = r.country_id
         WHERE receipt_id = '%s'
    """ % receipt_id
    buyer_info = get_data_dict(cur, query)[0]
    mailing_date = datetime.now().date().isoformat()
    packages = {}
    
    query = """
        SELECT rp.package_id,
               b.weight_kg box_weight,
               b.length_cm length,
               b.width_cm width,
               b.height_cm height,
               p.sku,
               'Container' as desc,
               pc.weight_kg unit_weight,
               pc.cost cad_value,
               rp.quantity,
               p.category,
               rp.label_url,
               rp.tracking_pin
          FROM receipt_packages rp
               JOIN boxes b ON b.id = rp.box_id
               JOIN products p ON p.sku = rp.sku
          LEFT JOIN package_classes pc ON pc.id = p.package_class_id
         WHERE receipt_id = '%s'
           AND p.category = 'Planter'
           AND rp.filename IS NULL
    """ % receipt_id
    rows = get_data_dict(cur, query)
    
    for row in rows:
        package_id = row['package_id']
        if package_id not in packages:
            packages[package_id] = dict(buyer_info)
            packages[package_id]['weight'] = row['box_weight']
            packages[package_id]['length'] = row['length']
            packages[package_id]['width'] = row['width']
            packages[package_id]['height'] = row['height']
            packages[package_id]['items'] = []
            packages[package_id]['label_url'] = row['label_url']
            packages[package_id]['tracking_pin'] = row['tracking_pin']
            packages[package_id]['mailing_date'] = mailing_date
        if row['category'] == 'Planter':
            packages[package_id]['weight'] += row['quantity'] * row['unit_weight']
            item = {'sku': row['sku'],
                    'desc': row['desc'],
                    'unit_weight': row['unit_weight'],
                    'cad_value': row['cad_value'],
                    'quantity': row['quantity']
                    }
            packages[package_id]['items'].append(item)
            
    query = """
        SELECT MIN(package_id)
          FROM receipt_packages
         WHERE receipt_id = '%s'
         GROUP BY receipt_id
    """ % receipt_id
    cur.execute(query)
    first_package_id = cur.fetchone()[0]
    
    files = []
    
    num_failed = 0
    for package_id in packages:
        weight = round(packages[package_id]['weight'],2)
        packages[package_id]['weight'] = weight
        context = {
            'data': packages[package_id], 
            'items': packages[package_id]['items'], 
            'is_first_package': package_id == first_package_id,
            'contract_id': session['CP_CONTRACT']
        }
        if not get_shipping_label(cur, context, receipt_id, package_id, packages[package_id]['label_url'], packages[package_id]['tracking_pin']):
            num_failed += 1

    return num_failed

def create_merged_file(cur, receipt_id):
    query = """
        SELECT rp.package_id,
               p.sku,
               rp.quantity,
               p.category || ' ' || p.name || ' ' || p.bottom as type,
               p.color,
               p.size,
               'Box ' || b.type || ' ' || b.length_in || 'x' || b.width_in || 'x' || b.height_in as box_label,
               rp.filename
          FROM receipt_packages rp
               JOIN boxes b ON b.id = rp.box_id
               JOIN products p ON p.sku = rp.sku
          LEFT JOIN package_classes pc ON pc.id = p.package_class_id
         WHERE receipt_id = '%s'
    """ % receipt_id
    rows = get_data_dict(cur, query)
    packages = {}
    for row in rows:
        package_id = row['package_id']
        if package_id not in packages:
            packages[package_id] = {}
            packages[package_id]['box_label'] = row['box_label']
            packages[package_id]['all_items'] = []
            packages[package_id]['filename'] = row['filename']
        all_item = {'sku': row['sku'],
                    'quantity': row['quantity'],
                    'type': row['type'],
                    'color': row['color'],
                    'size': row['size']
                   }
        packages[package_id]['all_items'].append(all_item)
    files = []
    num = 1    
    max_num = len(packages.keys())
    query = """
        SELECT COUNT(1) 
          FROM receipts r1 
               JOIN receipts r2 
               ON r1.buyer_email = r2.buyer_email 
         WHERE r2.order_time < r1.order_time 
           AND r1.receipt_id = '%s'
    """ % receipt_id
    cur.execute(query)
    returning_customer = cur.fetchone()[0] > 0
    for package_id in packages:
        lines = get_lines(receipt_id, num, max_num, packages[package_id]['box_label'], packages[package_id]['all_items'])
        if returning_customer and num == 1:
            lines.append('*RC*')
        filename = packages[package_id]['filename']
        files.append((filename, lines))
        num += 1
    abs_filename = add_writing(receipt_id, files)
    return abs_filename

def get_lines(receipt_id, num, max_num, box_label, items):
    lines = ["Receipt ID: %s" % receipt_id,
             "PDF Num: %s of %s" % (num, max_num),
             box_label,
             ""]
    for item in items:
        lines.append("SKU: %s" % item['sku'])
        lines.append("Type: %s" % item['type'])
        lines.append("Color: %s" % item['color'])
        lines.append("Size: %s inch" % item['size'])
        lines.append("Quantity: %s" % item['quantity'])
        lines.append("")
    return lines

import random
def get_shipping_label(cur, context, receipt_id, package_id, label_url, tracking_pin):
    try:
        headers = {
          'Accept': 'application/vnd.cpc.shipment-v8+xml',
          'Content-Type': 'application/vnd.cpc.shipment-v8+xml',
          'Accept-language': 'en-CA'
        }
        if is_debug():
            url = "https://ct.soa-gw.canadapost.ca/rs/%s/%s/shipment" % (session['CP_SHOP'], session['CP_SHOP'])
            headers['Authorization'] = 'Basic %s' % session['CP_AUTH_DEBUG']
        else:
            url = "https://soa-gw.canadapost.ca/rs/%s/%s/shipment" % (session['CP_SHOP'], session['CP_SHOP'])
            headers['Authorization'] = 'Basic %s' % session['CP_AUTH']
        if not label_url:
            xml_body = render_template('shipping_request_template.xml', **context).encode('utf-8').decode('latin-1', 'ignore')
            logger.debug(xml_body)
            response_text = cp_request(url, headers=headers, data=xml_body)
            logger.debug(response_text)
            
            label_url = response_text.split('<link rel="label" href="')[1].split('"')[0]
            logger.debug(label_url)
            
            tracking_pin = 'NOTRACKING'
            if 'tracking-pin' in response_text:
                tracking_pin = response_text.split('<tracking-pin>')[1].split('</tracking-pin>')[0]
            query = """
                UPDATE receipt_packages
                   SET label_url = '%s',
                       tracking_pin = '%s'
                 WHERE receipt_id = '%s'
                   AND package_id = %s
            """ % (label_url, tracking_pin, receipt_id, package_id)
            cur.execute(query)
            sleep(float(session['CP_INTERVAL']))
            
        logger.debug("fetching pdf")
        logger.debug(label_url)
        logger.debug(str(headers))
        headers['Accept'] = 'application/pdf'
        headers['Content-Type'] = 'application/pdf'
        r = requests.request("GET", label_url, headers=headers)
        r.raise_for_status()
        filename = 'static/pdfs/%s %s [%s] %s.pdf' % (receipt_id, datetime.today().strftime('%Y-%m-%d'), tracking_pin, package_id)
        fd = open(filename, 'wb')
        try:
            fd.write(r.content)
        except Exception as e:
            fd.close()
            raise e
        finally:
            fd.close()
        logger.debug("Closed?")
        logger.debug(fd.closed)
        query = """
            UPDATE receipt_packages
               SET filename = '%s'
             WHERE receipt_id = '%s'
               AND package_id = %s
        """ % (filename, receipt_id, package_id)
        cur.execute(query)
        sleep(float(session['CP_INTERVAL']))
    except Exception as e:
        logger.exception(e)
        logger.error("Failed to get/save label_pdf")
        return False

    return True

def create_manifest(cur, group_id):
    try:
        manifest_urls = get_manifest_urls(cur, group_id)
        if len(manifest_urls) == 0:
            headers = {
              'Accept': 'application/vnd.cpc.manifest-v8+xml',
              'Content-Type': 'application/vnd.cpc.manifest-v8+xml',
              'Accept-language': 'en-CA'
            }
            url = None
            if is_debug():
                url = "https://ct.soa-gw.canadapost.ca/rs/%s/%s/manifest" % (session['CP_SHOP'], session['CP_SHOP'])
                headers['Authorization'] = 'Basic %s' % session['CP_AUTH_DEBUG']
            else:
                url = "https://soa-gw.canadapost.ca/rs/%s/%s/manifest" % (session['CP_SHOP'], session['CP_SHOP'])
                headers['Authorization'] = 'Basic %s' % session['CP_AUTH']
            context = {'group_id': group_id}
            xml_body = render_template('manifest_template.xml', **context)
            logger.debug(xml_body)
            response = requests.post(url, headers=headers, data=xml_body)
            response_text = response.text
            logger.debug(response_text)
            urls = response_text.split('<link rel="manifest" href="')[1:]
            logger.debug("manifest urls")
            logger.debug(urls)
            sleep(float(session['CP_INTERVAL']))
            manifest_urls = []
            for u in urls:
                manifest_url = u.split('"')[0]
                manifest_urls.append(manifest_url)
                logger.debug(manifest_url)
            add_manifest_urls(cur, group_id, manifest_urls)
            manifest_urls = get_manifest_urls(cur, group_id)
        for manifest_url in manifest_urls:
            save_manifest_url(cur, manifest_url)
        manifest_urls = get_manifest_urls(cur, group_id)
        filenames = [m['filename'] for m in manifest_urls]
        filename = combine_files(group_id, filenames)
        query = """
            UPDATE manifests
               SET filename = '%s'
             WHERE group_id = '%s'
        """ % (filename, group_id)
        cur.execute(query)
    except Exception as e:
        logger.exception(e)
        logger.error("Failed to get/save manifest urls")

def get_manifest_urls(cur, group_id):
    query = """
        SELECT ml.id,
               m.group_id,
               ml.manifest_id,
               ml.get_url,
               ml.pdf_url,
               ml.filename
          FROM manifests m
          JOIN manifest_links ml
               ON m.id = ml.manifest_id
         WHERE m.group_id = '%s'
    """ % group_id
    urls = get_data_dict(cur, query)
    return urls

def add_manifest_urls(cur, group_id, manifest_urls):
    query = """
        SELECT id
          FROM manifests
         WHERE group_id = '%s'
    """ % group_id
    cur.execute(query)
    manifest_id = cur.fetchone()[0]
    
    values = ',\n'.join(["(%s, '%s')" % (manifest_id, url) for url in manifest_urls])
    query = """
        INSERT INTO manifest_links (manifest_id, get_url)
        VALUES %s
    """ % values
    cur.execute(query)

def save_manifest_url(cur, manifest_url):
    if manifest_url['filename'] is None:
        try:
            headers = {
              'Accept': 'application/vnd.cpc.manifest-v8+xml',
              'Accept-language': 'en-CA'
            }
            if is_debug():
                headers['Authorization'] = 'Basic %s' % session['CP_AUTH_DEBUG']
            else:
                headers['Authorization'] = 'Basic %s' % session['CP_AUTH']
            pdf_url = manifest_url['pdf_url']
            if pdf_url is None:
                logger.debug('getting manifest')
                logger.debug(manifest_url['get_url'])
                
                response_text = cp_request(manifest_url['get_url'], headers=headers)
                logger.debug(response_text)
                
                po_number = response_text.split('<po-number>')[1].split('<')[0]
                pdf_url = response_text.split('<link rel="artifact" href="')[1].split('"')[0]
                query = """
                    UPDATE manifest_links
                       SET pdf_url = '%s',
                           po_number = '%s'
                     WHERE id = %s
                """ % (pdf_url, po_number, manifest_url['id'])
                cur.execute(query)
                sleep(float(session['CP_INTERVAL']))
                
            logger.debug("fetching pdf")
            logger.debug(pdf_url)
            logger.debug(str(headers))
            headers['Accept'] = 'application/pdf'
            headers['Content-Type'] = 'application/pdf'
            r = requests.get(pdf_url, headers=headers)
            
            filename = 'static/pdfs/%(group_id)s %(id)s.pdf' % manifest_url
            fd = open(filename, 'wb')
            try:
                fd.write(r.content)
            except Exception as e:
                fd.close()
                raise e
            finally:
                fd.close()
            logger.debug("Closed?")
            logger.debug(fd.closed)
            query = """
                UPDATE manifest_links
                   SET filename = '%s'
                 WHERE id = %s
            """ % (filename, manifest_url['id'])
            cur.execute(query)
            sleep(float(session['CP_INTERVAL']))
        except Exception as e:
            logger.exception(e)
            logger.error("Failed to get/save manifest pdf")

    
       
def cp_request(url, headers, data=None):
    load_config()
    headers_copy = dict(headers)
    repeat = True
    response = None
    logger.debug("DOING CP Request")
    logger.debug(headers_copy)
    logger.debug(url)
    logger.debug("Data: "+str(data))
    count = 0
    while repeat and count < 2:
        logger.debug(count)
        if data is not None:
            response = requests.post(url, headers=headers_copy, data=data)
        else:
            response = requests.get(url, headers=headers_copy)
        response_text = response.text
        repeat = 'code' in response_text and ('9153' in response_text or '7010' in response_text)
        if repeat:
            sleep(1)
            count += 1
        else:
            logger.debug(response_text)
            response.raise_for_status()
    return response_text
    

from PyPDF2 import PdfFileWriter, PdfFileReader
import io
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import inch
import os
from shutil import copyfile


def combine_files(tag, files):
    output = PdfFileWriter()
    for filename in files:
        existing_pdf = PdfFileReader(open(filename, "rb"))
        page = existing_pdf.getPage(0)
        output.addPage(page)
    
    filename2 = 'static/pdfs/%s %s_merged.pdf' % (tag, datetime.today().strftime('%Y-%m-%d'))
    outputStream = open(filename2, "wb")
    output.write(outputStream)
    outputStream.close()
    
    load_config()
    try:
        if 'PDF_FOLDER' in session:
            pdf_folder = session['PDF_FOLDER']
            basename = os.path.basename(filename2)
            new_path = os.path.join(pdf_folder, basename)
            copyfile(filename2, new_path)
    except Exception as e:
        logger.debug(str(e))
    
    return filename2
    
def add_writing(receipt_id, files):

    output = PdfFileWriter()
    for filename, lines in files:
        packet = io.BytesIO()
        c = canvas.Canvas(packet, pagesize=letter)
        c.setFillColorRGB(1,1,1)
        c.rect(0, 0, 5.5*inch, 8.5*inch, fill=1)
        c.setFillColorRGB(0,0,0)
        y_decrement = 0.2*inch
        y_offset = 8.1*inch
        y_offset_start = 7.4*inch
        x_increment = 2.5*inch
        x_offset = 0.2*inch
        min_y = 0.9*inch
        i = 1
        max_lines = lines[:75]
        for line in max_lines:
            if line == "":
                y_offset -= 0.5*y_decrement
            else:
                c.drawString(x_offset, y_offset, line)
                y_offset -= y_decrement
            if y_offset <= min_y:
                y_offset = y_offset_start
                x_offset += x_increment
            i += 1
        c.save()
        
        packet.seek(0)
        new_pdf = PdfFileReader(packet)
        existing_pdf = PdfFileReader(open(filename, "rb"))
        page = existing_pdf.getPage(0)
        page.mergePage(new_pdf.getPage(0))
        output.addPage(page)
    
    
    filename2 = 'static/pdfs/%s %s_merged.pdf' % (receipt_id, datetime.today().strftime('%Y-%m-%d'))
    outputStream = open(filename2, "wb")
    output.write(outputStream)
    outputStream.close()
    
    load_config()
    try:
        if 'PDF_FOLDER' in session:
            pdf_folder = session['PDF_FOLDER']
            basename = os.path.basename(filename2)
            new_path = os.path.join(pdf_folder, basename)
            copyfile(filename2, new_path)
    except:
        pass
    
    return filename2