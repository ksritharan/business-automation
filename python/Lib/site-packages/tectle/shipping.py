# TO BE DELETED

def create_shipping_label(cur, receipt_id):
    num_failed = create_shipping_label_helper(cur, receipt_id)
    if num_failed == 0:
        abs_filename = create_merged_file(cur, receipt_id)
        query = """
            UPDATE receipts
               SET shipping_label = '%s'
             WHERE receipt_id = '%s'
        """ % (abs_filename, receipt_id)
        cur.execute(query)
    return num_failed

def create_shipping_label_helper(cur, receipt_id):
    query = """
        SELECT name,
               first_line,
               second_line,
               city,
               state,
               zip,
               country,
               buyer_email
          FROM receipts
         WHERE receipt_id = '%s'
    """ % receipt_id
    buyer_info = get_data_dict(cur, query)[0]
    packages = {}
    
    query = """
        SELECT rp.package_id,
               b.weight_kg box_weight,
               b.length_cm length,
               b.width_cm width,
               b.height_cm height,
               p.sku,
               'Container' as desc,
               pc.weight_kg unit_weight,
               pc.cost cad_value,
               rp.quantity,
               p.category,
               rp.label_url,
               rp.tracking_pin
          FROM receipt_packages rp
               JOIN boxes b ON b.id = rp.box_id
               JOIN products p ON p.sku = rp.sku
          LEFT JOIN package_classes pc ON pc.id = p.package_class_id
         WHERE receipt_id = '%s'
           AND p.category = 'Planter'
           AND rp.filename IS NULL
    """ % receipt_id
    rows = get_data_dict(cur, query)
    
    for row in rows:
        package_id = row['package_id']
        if package_id not in packages:
            packages[package_id] = dict(buyer_info)
            packages[package_id]['weight'] = row['box_weight']
            packages[package_id]['length'] = row['length']
            packages[package_id]['width'] = row['width']
            packages[package_id]['height'] = row['height']
            packages[package_id]['items'] = []
            packages[package_id]['label_url'] = row['label_url']
            packages[package_id]['tracking_pin'] = row['tracking_pin']
        if row['category'] == 'Planter':
            packages[package_id]['weight'] += row['quantity'] * row['unit_weight']
            item = {'sku': row['sku'],
                    'desc': row['desc'],
                    'unit_weight': row['unit_weight'],
                    'cad_value': row['cad_value'],
                    'quantity': row['quantity']
                    }
            packages[package_id]['items'].append(item)
            
    query = """
        SELECT MIN(package_id)
          FROM receipt_packages
         WHERE receipt_id = '%s'
         GROUP BY receipt_id
    """ % receipt_id
    cur.execute(query)
    first_package_id = cur.fetchone()[0]
    
    files = []
    
    num_failed = 0
    for package_id in packages:
        weight = round(packages[package_id]['weight'],2)
        packages[package_id]['weight'] = weight
        context = {'data': packages[package_id], 'items': packages[package_id]['items'], 'is_first_package': package_id == first_package_id}
        if not get_shipping_label(cur, context, receipt_id, package_id, packages[package_id]['label_url'], packages[package_id]['tracking_pin']):
            num_failed += 1

    return num_failed

def create_merged_file(cur, receipt_id):
    query = """
        SELECT rp.package_id,
               p.sku,
               rp.quantity,
               p.category || ' ' || p.name || ' ' || p.bottom as type,
               p.color,
               p.size,
               'Box ' || b.type || ' ' || b.length_in || 'x' || b.width_in || 'x' || b.height_in as box_label,
               rp.filename
          FROM receipt_packages rp
               JOIN boxes b ON b.id = rp.box_id
               JOIN products p ON p.sku = rp.sku
          LEFT JOIN package_classes pc ON pc.id = p.package_class_id
         WHERE receipt_id = '%s'
    """ % receipt_id
    rows = get_data_dict(cur, query)
    packages = {}
    for row in rows:
        package_id = row['package_id']
        if package_id not in packages:
            packages[package_id] = {}
            packages[package_id]['box_label'] = row['box_label']
            packages[package_id]['all_items'] = []
            packages[package_id]['filename'] = row['filename']
        all_item = {'sku': row['sku'],
                    'quantity': row['quantity'],
                    'type': row['type'],
                    'color': row['color'],
                    'size': row['size']
                   }
        packages[package_id]['all_items'].append(all_item)
    files = []
    num = 1    
    max_num = len(packages.keys())
    for package_id in packages:
        lines = get_lines(receipt_id, num, max_num, packages[package_id]['box_label'], packages[package_id]['all_items'])
        filename = packages[package_id]['filename']
        files.append((filename, lines))
        num += 1
    abs_filename = add_writing(receipt_id, files)
    return abs_filename

def get_lines(receipt_id, num, max_num, box_label, items):
    lines = ["Receipt ID: %s" % receipt_id,
             "PDF Num: %s of %s" % (num, max_num),
             box_label,
             ""]
    for item in items:
        lines.append("SKU: %s" % item['sku'])
        lines.append("Type: %s" % item['type'])
        lines.append("Color: %s" % item['color'])
        lines.append("Size: %s inch" % item['size'])
        lines.append("Quantity: %s" % item['quantity'])
        lines.append("")
    return lines

import random
def get_shipping_label(cur, context, receipt_id, package_id, label_url, tracking_pin):
    load_config()
    try:
        headers = {
          'Accept': 'application/vnd.cpc.ncshipment-v4+xml',
          'Content-Type': 'application/vnd.cpc.ncshipment-v4+xml',
          'Accept-language': 'en-CA'
        }
        url = None
        if is_debug():
            headers['Authorization'] = 'Basic %s' % session['CP_AUTH_DEBUG']
            url = "https://ct.soa-gw.canadapost.ca/rs/%s/ncshipment" % session['CP_SHOP']
        else:
            headers['Authorization'] = 'Basic %s' % session['CP_AUTH']
            url = "https://soa-gw.canadapost.ca/rs/%s/ncshipment" % session['CP_SHOP']
        if not label_url:
            if is_debug():
                some_number = random.randint(1,5)
                if some_number == 2:
                    raise Exception('xd')
            xml_body = render_template('shipping_request_template.xml', **context)
            response = requests.request("POST", url, headers=headers, data=xml_body)
            response_text = response.text
            logger.debug(response_text)
            label_url = response_text.split('<link rel="label" href="')[1].split('"')[0]
            logger.debug(label_url)
            tracking_pin = 'NOTRACKING'
            if 'tracking-pin' in response_text:
                tracking_pin = response_text.split('<tracking-pin>')[1].split('</tracking-pin>')[0]
            query = """
                UPDATE receipt_packages
                   SET label_url = '%s',
                       tracking_pin = '%s'
                 WHERE receipt_id = '%s'
                   AND package_id = %s
            """ % (label_url, tracking_pin, receipt_id, package_id)
            cur.execute(query)
        logger.debug("fetching pdf")
        logger.debug(label_url)
        logger.debug(str(headers))
        headers['Accept'] = 'application/pdf'
        headers['Content-Type'] = 'application/pdf'
        r = requests.request("GET", label_url, headers=headers)
        r.raise_for_status()
        filename = 'static/pdfs/%s %s [%s] %s.pdf' % (receipt_id, datetime.today().strftime('%Y-%m-%d'), tracking_pin, package_id)
        fd = open(filename, 'wb')
        try:
            fd.write(r.content)
        except Exception as e:
            fd.close()
            raise e
        finally:
            fd.close()
        logger.debug("Closed?")
        logger.debug(fd.closed)
        query = """
            UPDATE receipt_packages
               SET filename = '%s'
             WHERE receipt_id = '%s'
               AND package_id = %s
        """ % (filename, receipt_id, package_id)
        cur.execute(query)
    except Exception as e:
        logger.exception(e)
        logger.error("Failed to get/save label_pdf")
        return False

    return True


from PyPDF2 import PdfFileWriter, PdfFileReader
import io
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import inch
import os
from shutil import copyfile

def add_writing(receipt_id, files):

    output = PdfFileWriter()
    for filename, lines in files:
        packet = io.BytesIO()
        c = canvas.Canvas(packet, pagesize=letter)
        c.setFillColorRGB(1,1,1)
        c.rect(0, 0, 5.5*inch, 8.5*inch, fill=1)
        c.setFillColorRGB(0,0,0)
        y_decrement = 0.2*inch
        y_offset = 8.1*inch
        y_offset_start = 7.4*inch
        x_increment = 2.5*inch
        x_offset = 0.2*inch
        min_y = 0.9*inch
        i = 1
        max_lines = lines[:75]
        for line in max_lines:
            if line == "":
                y_offset -= 0.5*y_decrement
            else:
                c.drawString(x_offset, y_offset, line)
                y_offset -= y_decrement
            if y_offset <= min_y:
                y_offset = y_offset_start
                x_offset += x_increment
            i += 1
        c.save()
        
        packet.seek(0)
        new_pdf = PdfFileReader(packet)
        existing_pdf = PdfFileReader(open(filename, "rb"))
        page = existing_pdf.getPage(0)
        page.mergePage(new_pdf.getPage(0))
        output.addPage(page)
    
    
    filename2 = 'static/pdfs/%s %s_merged.pdf' % (receipt_id, datetime.today().strftime('%Y-%m-%d'))
    outputStream = open(filename2, "wb")
    output.write(outputStream)
    outputStream.close()
    
    load_config()
    try:
        if 'PDF_FOLDER' in session:
            pdf_folder = session['PDF_FOLDER']
            basename = os.path.basename(filename2)
            new_path = os.path.join(pdf_folder, basename)
            copyfile(filename2, new_path)
    except:
        pass
    
    return filename2