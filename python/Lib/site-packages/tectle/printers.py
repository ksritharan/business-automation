from .db import get_connection, get_data_dict, get_connection_non_flask
from flask import render_template, url_for, make_response, jsonify, session
from .config import load_config, is_printer_debug
from .inventory import add_or_insert
import requests
import logging
logger = logging.getLogger()

def do_printer_print(printer_id):
    conn = get_connection()
    cur = conn.cursor()
    query_1 = "SELECT * FROM PRINTERS WHERE id = %s" % printer_id
    query_2 = """
                SELECT PQ.*
                  FROM PRINTER_QUEUE PQ
                 WHERE printer_id = %s
                   AND status = 0 /* PENDING */
                 ORDER BY priority ASC
              """ % printer_id
    query_3 = """
                UPDATE PRINTER_QUEUE
                   SET status = 1, /* PRINTING */
                       progress = 0
                 WHERE id = %s
              """
    query_4 = """
                UPDATE PRINTER_QUEUE
                   SET priority = priority - 1
                 WHERE printer_id = %s
                   AND status = 0 /* PENDING */
              """ % printer_id
    
    printers = get_data_dict(cur, query_1)
    response = None
    
    if not printers:
        response = make_response('could not find printer', 400)
    else:
        try:
            printer = printers[0]
            printer_queues = get_data_dict(cur, query_2)
            if not printer_queues:
                response = make_response('nothing in print queue', 400)
            else:
                next_print = printer_queues[0]
                conn.close()
                # TODO MOVE DOWN TO BEFORE COMMIT()
                conn = get_connection()
                cur = conn.cursor()
                white_sku = sku_to_white_sku_gcode(cur, next_print['sku'])
                make_print_request(printer['printer_ip'], white_sku)
                cur.execute(query_3 % next_print['id'])
                cur.execute(query_4)
                conn.commit()
                response = make_response('success', 200)
        except Exception as e:
            logging.exception(e)
            response = make_response(str(e), 400)
    
    return response
    
# for now
DEBUG_PRINTER_URL_TEMPLATE = "http://127.0.0.1:8080/printer/%s/"
PRINTER_URL_TEMPLATE = "http://%s/"
def make_print_request(printer_ip, sku):
    printer_url = None
    if is_printer_debug():
        printer_url = DEBUG_PRINTER_URL_TEMPLATE % printer_ip
    else:
        printer_url = PRINTER_URL_TEMPLATE % printer_ip
    response = gcode_request(printer_url + 'rr_gcode?gcode=M408 S0', printer_url)
    response_json = response.json()
    if response_json['status'] == 'I': #idle
        response = requests.get(printer_url + ('rr_gcode?gcode=M32 %s.gcode' % sku))
        response.raise_for_status()
    else:
        raise Exception('printer %s is busy' % printer_ip)

def sku_to_white_sku_gcode(cur, sku):
    query = """
        SELECT REPLACE('%(sku)s', C.color_abbr, 'WT') sku
          FROM COLORS C 
         WHERE '%(sku)s' LIKE '%%' || C.color_abbr || '%%'
    """ % {'sku': sku}
    cur.execute(query)
    return cur.fetchone()[0]

def gcode_request(request_url, printer_url):
    response = requests.get(request_url)
    response.raise_for_status()
    response = requests.get(printer_url + 'rr_reply')
    response.raise_for_status()
    return response

def make_debug_print_request(printer_ip, sku):
    printer_url = DEBUG_PRINTER_URL_TEMPLATE % printer_ip
    response = gcode_request(printer_url + 'rr_gcode?gcode=M408 S0', printer_url)
    response_json = response.json()
    if response_json['status'] == 'I': #idle
        response = requests.get(printer_url + ('rr_gcode?gcode=M32 %s.gcode' % sku_to_white_sku(sku)))
        response.raise_for_status()
    else:
        raise Exception('printer %s is busy' % printer_ip)
        
def update_printers(is_printer_debug, is_debug):
    conn = get_connection_non_flask(is_debug)
    cur = conn.cursor()
    query = """
        SELECT P.id printer_id,
               P.printer_ip,
               CASE WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is NULL) THEN 'ready'
                    WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is not NULL) THEN 'printing'
                    ELSE 'offline'
               END str_status,
               P.gcode,
               C.color_abbr,
               IP.receipt_id current_receipt
          FROM PRINTERS P
          LEFT JOIN (
                        SELECT sku, 
                               receipt_id, 
                               progress,
                               printer_id,
                               id queue_item_id,
                               1 is_printing
                          FROM PRINTER_QUEUE
                         WHERE status = 1 /* PRINTING */
                    ) IP /* IN_PROGRESS */
               ON P.id = IP.printer_id
          JOIN COLORS C
               ON P.color = C.color
    """
    printers = get_data_dict(cur, query)
    for printer in printers:
        update_printer(conn, cur, printer, is_printer_debug)
    conn.close()

def update_printer(conn, cur, printer, is_printer_debug):
    r_json = None
    try:
        if is_printer_debug:
            url_template = DEBUG_PRINTER_URL_TEMPLATE
        else:
            url_template = PRINTER_URL_TEMPLATE
        printer_url = url_template % printer['printer_ip']
        r = gcode_request(printer_url + 'rr_gcode?gcode=M408 S0', printer_url)
        r_json = r.json()
    except Exception as e:
        logging.exception(e)
    if r_json is not None:
        try:
            if r_json['status'] == 'I' and printer['str_status'] == 'printing':
                # add sku
                logger.debug("DONE PRINTING")
                logger.debug(printer)
                if printer['gcode']:
                    logger.debug(printer['gcode'])
                    sku = printer['gcode'].split('.gcode')[0].replace('WT', printer['color_abbr'])
                    query = "SELECT COUNT(1) FROM products WHERE sku = '%s'" % sku
                    cur.execute(query)
                    num = cur.fetchone()[0]
                    if num == 1:
                        add_or_insert(cur, {'sku': sku, 'quantity': 1})
                    update_gcode(cur, printer['printer_id'], None)
                query = """
                    UPDATE PRINTER_QUEUE
                       SET progress = 0,
                           printer_id = NULL,
                           status = 0
                     WHERE printer_id = %s
                       AND status = 1 /* PRINTING */
                """ % (printer['printer_id'],)
                cur.execute(query)
                query = "UPDATE printers SET ui_change = 1 WHERE id = %s" % printer['printer_id']
                cur.execute(query)
            elif r_json['status'] == 'P':
                if not printer['gcode']:
                    m36_response = gcode_request(printer_url + 'rr_gcode?gcode=M36', printer_url)
                    m36_response.raise_for_status()
                    m36_response_json = m36_response.json()
                    update_gcode(cur, printer['printer_id'], m36_response_json['fileName'])
                # update progress
                progress = int(100*r_json['fraction_printed'])
                query = """
                    UPDATE PRINTER_QUEUE
                       SET progress = %s
                     WHERE printer_id = %s
                       AND status = 1 /* PRINTING */
                """ % (progress, printer['printer_id'])
                cur.execute(query)
            elif r_json['status'] == 'S':
                # "Stopped" not paused - means operator says print failed
                update_gcode(cur, printer['printer_id'], None)
                query = """
                    UPDATE PRINTER_QUEUE
                       SET progress = 0,
                           printer_id = NULL,
                           status = 0
                     WHERE printer_id = %s
                       AND status = 1 /* PRINTING */
                """ % (printer['printer_id'],)
                cur.execute(query)
                query = "UPDATE printers SET ui_change = 1 WHERE id = %s" % printer['printer_id']
                cur.execute(query)
            conn.commit()
        except Exception as e:
            logging.exception(e)  
        
def do_printer_status(printer_id):
    conn = get_connection()
    cur = conn.cursor()
    query_1 = """
        SELECT P.*,
               CASE WHEN (P.status = 0 AND IP.sku is NULL) THEN 'online'
                    WHEN (P.status = 0 AND IP.sku is not NULL) THEN 'away'
                    ELSE 'busy'
               END css_status,
               CASE WHEN (P.status = 0 AND IP.sku is NULL) THEN 'ready'
                    WHEN (P.status = 0 AND IP.sku is not NULL) THEN 'printing'
                    ELSE 'offline'
               END str_status,
               COALESCE(PQ.num, 0) num,
               IP.sku current_sku,
               IP.receipt_id current_receipt,
               IP.progress,
               IP.queue_item_id,
               COALESCE(IP.is_printing, 0) is_printing
          FROM PRINTERS P
          LEFT JOIN (
                        SELECT COUNT(1) num, printer_id
                          FROM PRINTER_QUEUE
                         GROUP BY printer_id
                    ) PQ
               ON P.id = PQ.printer_id
          LEFT JOIN (
                        SELECT sku, 
                               receipt_id, 
                               progress,
                               printer_id,
                               id queue_item_id,
                               1 is_printing
                          FROM PRINTER_QUEUE
                         WHERE status = 1 /* PRINTING */
                    ) IP /* IN_PROGRESS */
               ON P.id = IP.printer_id
         WHERE id = %s
    """ % printer_id
    printers = get_data_dict(cur, query_1)
    response = None
    if not printers:
        response = make_response('could not find printer', 400)
    else:
        printer = printers[0]
        try:
            if printer['ui_change'] == 1:
                query = "UPDATE printers SET ui_change = 0 WHERE id = %s" % printer_id
                cur.execute(query)
                conn.commit()
            response = jsonify(printer)
        except Exception as e:
            response = make_response(str(e), 400)
    return response

def update_gcode(cur, printer_id, gcode):
    if not gcode:
        query = """
            UPDATE printers
               SET gcode = NULL
             WHERE id = %s
        """ % printer_id
    else:
        query = """
            UPDATE printers
               SET gcode = '%s'
             WHERE id = %s
        """ % (gcode, printer_id)
    cur.execute(query)    