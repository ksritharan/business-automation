from .db import get_connection, get_data_dict, get_connection_non_flask
from flask import render_template, url_for, make_response, jsonify, session
from .home import do_queue_update
from .config import load_config, is_printer_debug
from .inventory import add_or_insert
from .fulfillable import get_all_receipts
from .gcode_manager import update_gcodes
import requests
import logging
logger = logging.getLogger()
import os

def do_printer_print(printer_id):
    conn = get_connection()
    cur = conn.cursor()
    query_1 = "SELECT * FROM PRINTERS WHERE id = %s" % printer_id
    query_2 = """
                SELECT PQ.*
                  FROM PRINTER_QUEUE PQ
                 WHERE printer_id = %s
                   AND status = 0 /* PENDING */
                 ORDER BY priority ASC
              """ % printer_id
    query_3 = """
                UPDATE PRINTER_QUEUE
                   SET status = 1, /* PRINTING */
                       progress = 0
                 WHERE id = %s
              """
    query_4 = """
                UPDATE PRINTER_QUEUE
                   SET priority = priority - 1
                 WHERE printer_id = %s
                   AND status = 0 /* PENDING */
              """ % printer_id
    
    printers = get_data_dict(cur, query_1)
    response = None
    
    if not printers:
        response = make_response('could not find printer', 400)
    else:
        try:
            printer = printers[0]
            printer_queues = get_data_dict(cur, query_2)
            conn.close()
            if not printer_queues:
                queue_item_id = get_next_in_unassigned_queue(printer['color'], printer['waterplate_only'])
                if queue_item_id is None:
                    response = make_response('no matching item available for print', 400)
                else:
                    intermediate_resp = do_queue_update(queue_item_id, 'None', printer_id, 0, 0)
                    conn = get_connection()
                    cur = conn.cursor()
                    if intermediate_resp.status_code == 200:
                        logger.debug("UI CHANGE")
                        query = "UPDATE printers SET ui_change = 1 WHERE id = %s" % printer_id
                        cur.execute(query)
                        conn.commit()
                    printer_queues = get_data_dict(cur, query_2)
            if not printer_queues:
                response = make_response('nothing in the print queue', 400)
            else:
                next_print = printer_queues[0]
                # TODO MOVE DOWN TO BEFORE COMMIT()
                conn = get_connection()
                cur = conn.cursor()
                sku = next_print['sku']
                make_print_request(conn, cur, printer['printer_ip'], sku)
                cur.execute(query_3 % next_print['id'])
                cur.execute(query_4)
                conn.commit()
                response = make_response('success', 200)
        except Exception as e:
            logging.exception(e)
            response = make_response(str(e), 400)
    
    return response


    
# for now
DEBUG_PRINTER_URL_TEMPLATE = "http://127.0.0.1:8080/printer/%s/"
PRINTER_URL_TEMPLATE = "http://%s/"
def make_print_request(conn, cur, printer_ip, sku):
    printer_url = None
    if is_printer_debug():
        printer_url = DEBUG_PRINTER_URL_TEMPLATE % printer_ip
    else:
        printer_url = PRINTER_URL_TEMPLATE % printer_ip
    response = requests.get(printer_url + 'rr_status')
    response_json = response.json()
    if response_json['status'] != 'I': #idle
        raise Exception('printer %s is busy' % printer_ip)
    else:
        gcode_filename = '%s.gcode' % sku
        update_gcodes(conn, cur)
        conn.commit()
        file_exists = gcode_file_exists(cur, gcode_filename)
        if not file_exists:
            raise Exception('%s could not be found' % gcode_filename)
        else:
            is_up_to_date = is_printer_up_to_date(cur, printer_ip, gcode_filename)
            if not is_up_to_date:
                success = send_file_to_printer(printer_url, printer_ip, gcode_filename)
                if not success:
                    raise Exception('error sending %s to printer %s' % (gcode_filename, printer_ip))
                else:
                    update_printer_date_modified(cur, printer_ip, gcode_filename)
                    conn.commit()
            response = requests.get(printer_url + ('rr_gcode?gcode=M32 %s' % gcode_filename))
            response.raise_for_status()

def update_percent(printer_ip, filename, percent):
    conn = get_connection()
    cur = conn.cursor()
    data = {
        'printer_ip': printer_ip,
        'filename': filename,
        'percent': int(percent),
    }
    query = """
        UPDATE printer_gcodes
           SET progress = %(percent)s
         WHERE printer_ip = '%(printer_ip)s'
           AND filename = '%(filename)s'
    """ % data
    cur.execute(query)
    conn.commit()  

def send_file_to_printer(printer_url, printer_ip, gcode_filename):
    fullpath = os.path.join(session['GCODE_FOLDER'], gcode_filename)
    logger.debug(printer_url + ('rr_upload?name=gcodes/%s' % gcode_filename))

    logger.debug("connecting to printer")
    response1 = requests.get(printer_url + 'rr_connect')
    logger.debug("done")
    
    logger.debug("sending file")
    data = IterableToFileAdapter(upload_in_chunks(fullpath, printer_ip, callback_fn=update_percent))
    response2 = requests.post(printer_url + ('rr_upload?name=gcodes/%s' % gcode_filename), data=data)
    update_percent(printer_ip, gcode_filename, 100)
    logger.debug("done")
    
    logger.debug("disconnecting")
    response3 = requests.get(printer_url + 'rr_disconnect')
    logger.debug("done")
    
    logger.debug(response2.text)
    response_json = response2.json()
    return response_json['err'] == 0 #resp = {err:0} if err == 0 then success

def gcode_file_exists(cur, gcode_filename):
    query = "SELECT COUNT(1) FROM gcodes WHERE filename = '%s'" % gcode_filename
    cur.execute(query)
    return cur.fetchone()[0] == 1

def is_printer_up_to_date(cur, printer_ip, filename):
    query = """
        SELECT COUNT(1)
          FROM gcodes g
          JOIN printer_gcodes pg
               ON g.filename = pg.filename
         WHERE g.filename = '%(filename)s'
           AND pg.printer_ip = '%(printer_ip)s'
           AND g.date_modified = pg.date_modified
    """ % {'filename': filename, 'printer_ip': printer_ip}
    cur.execute(query)
    is_up_to_date = cur.fetchone()[0] == 1
    return is_up_to_date

def update_printer_date_modified(cur, printer_ip, gcode_filename):
    data = {'filename': gcode_filename, 'printer_ip': printer_ip}
    query = """
        DELETE FROM printer_gcodes
         WHERE printer_ip = '%(printer_ip)s'
           AND filename = '%(filename)s'
    """ % data
    cur.execute(query)
    query = """
        INSERT INTO printer_gcodes (filename, printer_ip, date_modified)
        SELECT filename,
               '%(printer_ip)s' printer_ip,
               date_modified
          FROM gcodes
         WHERE filename = '%(filename)s'
    """ % data
    cur.execute(query)
    
def sku_to_white_sku_gcode(cur, sku):
    query = """
        SELECT REPLACE('%(sku)s', C.color_abbr, 'WT') sku
          FROM COLORS C 
         WHERE '%(sku)s' LIKE '%%' || C.color_abbr || '%%'
    """ % {'sku': sku}
    cur.execute(query)
    return cur.fetchone()[0]

def make_debug_print_request(printer_ip, sku):
    printer_url = DEBUG_PRINTER_URL_TEMPLATE % printer_ip
    response = requests.get(printer_url + 'rr_status')
    response_json = response.json()
    if response_json['status'] == 'I': #idle
        response = requests.get(printer_url + ('rr_gcode?gcode=M32 %s.gcode' % sku_to_white_sku(sku)))
        response.raise_for_status()
    else:
        raise Exception('printer %s is busy' % printer_ip)
        
def update_printers(is_printer_debug, is_debug):
    conn = get_connection_non_flask(is_debug)
    cur = conn.cursor()
    query = """
        SELECT P.id printer_id,
               P.printer_ip,
               P.waterplate_only,
               CASE WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is NULL) THEN 'ready'
                    WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is not NULL) THEN 'printing'
                    ELSE 'offline'
               END str_status,
               P.gcode,
               C.color_abbr,
               IP.receipt_id current_receipt
          FROM PRINTERS P
          LEFT JOIN (
                        SELECT sku, 
                               receipt_id, 
                               progress,
                               printer_id,
                               id queue_item_id,
                               1 is_printing
                          FROM PRINTER_QUEUE
                         WHERE status = 1 /* PRINTING */
                    ) IP /* IN_PROGRESS */
               ON P.id = IP.printer_id
          JOIN COLORS C
               ON P.color = C.color
    """
    printers = get_data_dict(cur, query)
    for printer in printers:
        update_printer(conn, cur, printer, is_printer_debug)
    conn.close()

def update_printer(conn, cur, printer, is_printer_debug):
    r_json = None
    try:
        if is_printer_debug:
            url_template = DEBUG_PRINTER_URL_TEMPLATE
        else:
            url_template = PRINTER_URL_TEMPLATE
        printer_url = url_template % printer['printer_ip']
        r = requests.get(printer_url + 'rr_status?type=3')
        r_json = r.json()
    except Exception as e:
        logging.exception(e)
    if r_json is not None:
        try:
            if r_json['status'] == 'I' and printer['str_status'] == 'printing':
                # add sku
                logger.debug("DONE PRINTING")
                logger.debug(printer)
                if printer['gcode']:
                    logger.debug(printer['gcode'])
                    sku = printer['gcode'].split('.gcode')[0]
                    query = "SELECT COUNT(1) FROM products WHERE sku = '%s'" % sku
                    cur.execute(query)
                    num = cur.fetchone()[0]
                    if num == 1:
                        add_or_insert(cur, {'sku': sku, 'quantity': 1})
                    update_gcode(cur, printer['printer_id'], None)
                query = """
                    UPDATE PRINTER_QUEUE
                       SET progress = 0,
                           printer_id = NULL,
                           status = 0
                     WHERE printer_id = %s
                       AND status = 1 /* PRINTING */
                """ % (printer['printer_id'],)
                cur.execute(query)
                query = "UPDATE printers SET ui_change = 1, progress = 0 WHERE id = %s" % printer['printer_id']
                cur.execute(query)
            elif r_json['status'] == 'P':
                fileinfo_response = requests.get(printer_url + 'rr_fileinfo')
                fileinfo_response.raise_for_status()
                fileinfo_json = fileinfo_response.json()
                if not printer['gcode']:
                    update_gcode(cur, printer['printer_id'], os.path.basename(fileinfo_json['fileName']))
                # update progress
                progress = int(100*r_json['fractionPrinted'])
                query = """
                    UPDATE PRINTER_QUEUE
                       SET progress = %s
                     WHERE printer_id = %s
                       AND status = 1 /* PRINTING */
                """ % (progress, printer['printer_id'])
                cur.execute(query)
                query = """
                    UPDATE PRINTERS
                       SET progress = %s
                     WHERE id = %s
                """ % (progress, printer['printer_id'])
                cur.execute(query)
            elif r_json['status'] == 'S':
                # "Stopped" not paused - means operator says print failed
                update_gcode(cur, printer['printer_id'], None)
                query = """
                    UPDATE PRINTER_QUEUE
                       SET progress = 0,
                           printer_id = NULL,
                           status = 0
                     WHERE printer_id = %s
                       AND status = 1 /* PRINTING */
                """ % (printer['printer_id'],)
                cur.execute(query)
                query = "UPDATE printers SET ui_change = 1 WHERE id = %s" % printer['printer_id']
                cur.execute(query)
            conn.commit()
        except Exception as e:
            logging.exception(e)  
        
def do_printer_status(printer_id):
    conn = get_connection()
    cur = conn.cursor()
    query_1 = """
        SELECT P.id,
               P.name,
               P.printer_ip,
               P.status,
               P.ui_change,
               P.color,
               P.gcode,
               P.waterplate_only,
               CASE WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is NULL) THEN 'online'
                    WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is not NULL) THEN 'away'
                    ELSE 'busy'
               END css_status,
               CASE WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is NULL) THEN 'ready'
                    WHEN (P.status = 0 AND COALESCE(IP.sku, P.gcode) is not NULL) THEN 'printing'
                    ELSE 'offline'
               END str_status,
               COALESCE(PQ.num, 0) num,
               COALESCE(IP.sku, P.gcode) current_sku,
               IP.receipt_id current_receipt,
               COALESCE(IP.progress, P.progress) progress,
               IP.queue_item_id,
               COALESCE(IP.is_printing, 0) is_printing
          FROM PRINTERS P
          LEFT JOIN (
                        SELECT COUNT(1) num, printer_id
                          FROM PRINTER_QUEUE
                         GROUP BY printer_id
                    ) PQ
               ON P.id = PQ.printer_id
          LEFT JOIN (
                        SELECT sku, 
                               receipt_id, 
                               progress,
                               printer_id,
                               id queue_item_id,
                               1 is_printing
                          FROM PRINTER_QUEUE
                         WHERE status = 1 /* PRINTING */
                    ) IP /* IN_PROGRESS */
               ON P.id = IP.printer_id
         WHERE id = %s
    """ % printer_id
    printers = get_data_dict(cur, query_1)
    response = None
    if not printers:
        response = make_response('could not find printer', 400)
    else:
        printer = printers[0]
        try:
            if printer['ui_change'] == 1:
                query = "UPDATE printers SET ui_change = 0 WHERE id = %s" % printer_id
                cur.execute(query)
                conn.commit()
            response = jsonify(printer)
        except Exception as e:
            response = make_response(str(e), 400)
    return response

def update_gcode(cur, printer_id, gcode):
    if not gcode:
        query = """
            UPDATE printers
               SET gcode = NULL
             WHERE id = %s
        """ % printer_id
    else:
        query = """
            UPDATE printers
               SET gcode = '%s'
             WHERE id = %s
        """ % (gcode, printer_id)
    cur.execute(query)    

class upload_in_chunks(object):
    def __init__(self, filename, printer_ip, chunksize=1 << 13, callback_fn=None):
        self.filename = filename
        self.chunksize = chunksize
        self.totalsize = os.path.getsize(filename)
        self.readsofar = 0
        self.printer_ip = printer_ip
        self.basename = os.path.basename(filename)
        self.callback_fn = callback_fn

    def __iter__(self):
        with open(self.filename, 'rb') as file:
            while True:
                data = file.read(self.chunksize)
                if not data:
                    break
                self.readsofar += len(data)
                percent = self.readsofar * 1e2 / self.totalsize
                if self.callback_fn:
                    self.callback_fn(self.printer_ip, self.basename, percent)
                yield data

    def __len__(self):
        return self.totalsize

class IterableToFileAdapter(object):
    def __init__(self, iterable):
        self.iterator = iter(iterable)
        self.length = len(iterable)

    def read(self, size=-1): # TBD: add buffer for `len(data) > size` case
        return next(self.iterator, b'')

    def __len__(self):
        return self.length

def do_printer_upload_status():
    conn = get_connection()
    cur = conn.cursor()
    response = None
    try:
        query = """
            SELECT p.id as printer_id,
                   pg.printer_ip,
                   pg.filename,
                   pg.progress
              FROM printer_gcodes pg
              JOIN printers p
                ON p.printer_ip = pg.printer_ip
             WHERE pg.progress != 100
        """
        statuses = get_data_dict(cur, query)
        data = {'count': len(statuses),
                'statuses': statuses}
        response = jsonify(data)
    except Exception as e:
        logging.exception(e)
        response = make_response(str(e), 400)
    
    return response

def get_next_in_unassigned_queue(color, waterplate_only=0):
    conn = get_connection()
    cur = conn.cursor()
    
    query1 = """
        SELECT sku
          FROM products
         WHERE color = '%(color)s'
           AND (0 = %(waterplate_only)s OR name = 'WaterPlate')
    """ % {'color': color, 'waterplate_only': waterplate_only}
    rows = get_data_dict(cur, query1)
    valid_skus = {row['sku'] for row in rows}
    
    
    query2 = """
        SELECT id 
          FROM PRINTER_QUEUE
         WHERE status IN (0, 1) /* PENDING or PRINTING */
           AND printer_id IS NOT NULL
         ORDER BY printer_id, priority
    """
    rows = get_data_dict(cur, query2)
    assigned_queue_items = {row['id'] for row in rows}
    
    completed_receipts, pending_receipts = get_all_receipts(cur)
    conn.close()
    
    unassigned_queue = []
    for receipt in pending_receipts:
        receipt['num'] = sum(receipt['order_info_dict'].values())
        for sku in receipt['order_info_dict']:
            for printer_queue_id in receipt['queue_items_dict'][sku]:
                if printer_queue_id not in assigned_queue_items:
                    if sku in valid_skus:
                        return printer_queue_id
    return None
    