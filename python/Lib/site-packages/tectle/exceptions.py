from .db import get_connection, get_data_dict
from flask import render_template, url_for, make_response
import requests
import traceback
import logging
logger = logging.getLogger()

def do_exceptions():
    context = {'exceptions_page': True}
    conn = get_connection()
    cur = conn.cursor()
    query = """
        SELECT *
          FROM exceptions
    """
    exceptions = get_data_dict(cur, query)
    
    error_levels = [{'level': 0, 'str': 'Warning'}, {'level': 1, 'str': 'Error'}]
    
    context['exception_rows'] = exceptions
    context['error_levels'] = error_levels
    context['exceptions'] = evaluate_exceptions()
    
    return render_template('exceptions.html', **context)
    
def do_edit_exception_level(form_data):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        query = """
            SELECT COUNT(1)
              FROM exceptions
             WHERE id = %(id)s
        """ % form_data
        cur.execute(query)
        exists = cur.fetchone()[0] > 0
        if not exists:
            response = make_response('exception does not exist', 400)
        else:
            query = """
                UPDATE exceptions
                   SET level = %(level)s
                 WHERE id = %(id)s
            """ % form_data
            cur.execute(query)
            conn.commit()
            response = make_response('success', 200)
    except Exception as e:
        conn.rollback()
        logger.exception(e)
        tb = traceback.format_exc()
        response = make_response(tb, 400)
    return response
    
def do_edit_exception_status(form_data):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        query = """
            SELECT COUNT(1)
              FROM exceptions
             WHERE id = %(id)s
        """ % form_data
        cur.execute(query)
        exists = cur.fetchone()[0] > 0
        if not exists:
            response = make_response('exception does not exist', 400)
        else:
            query = """
                UPDATE exceptions
                   SET status = %(status)s
                 WHERE id = %(id)s
            """ % form_data
            cur.execute(query)
            conn.commit()
            response = make_response('success', 200)
    except Exception as e:
        conn.rollback()
        logger.exception(e)
        tb = traceback.format_exc()
        response = make_response(tb, 400)
    return response

def evaluate_exceptions():
    conn = get_connection()
    cur = conn.cursor()
    query = """
        SELECT *
          FROM exceptions
         WHERE status = 0
    """
    rows = get_data_dict(cur, query)
    exceptions = []
    for row in rows:
        cur.execute(row['query'])
        result = cur.fetchone()[0]
        if result > 0:
            exceptions.append(row)
    return exceptions
    
    