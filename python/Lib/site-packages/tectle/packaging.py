from .db import get_connection, get_data_dict
from flask import render_template, url_for, make_response
import requests
import traceback
import math
import logging
logger = logging.getLogger()

def do_packaging():
    context = {'packaging_page': True}
    conn = get_connection()
    cur = conn.cursor()
    query = """
        SELECT *
          FROM package_classes
    """
    package_classes = get_data_dict(cur, query)
    query = """
        SELECT *
          FROM boxes
    """
    boxes = get_data_dict(cur, query)
    select_template = 'COALESCE("%(class)s".quantity, 0) %(class)s_quantity'
    join_template = """
          LEFT JOIN packaging "%(class)s"
                    ON "%(class)s".package_class_id = %(id)s
                   AND "%(class)s".package_id = up.package_id
    """
    selects = ",\n".join([select_template % package_class for package_class in package_classes])
    joins = "\n".join([join_template % package_class for package_class in package_classes])
    query = """
        WITH uniq_packaging as (
            SELECT package_id, box_id
              FROM packaging
             GROUP BY package_id, box_id
        )
        SELECT up.package_id,
               b.type,
               %s
          FROM uniq_packaging up
               JOIN boxes b
                 ON b.id = up.box_id
          %s
    """ % (selects, joins)
    keys = [("%(class)s_quantity" % package_class, package_class['id']) for package_class in package_classes]
    packaging = get_data_dict(cur, query)
    for row in packaging:
        row['quantities'] = []
        for package_class in package_classes:
            info = dict(package_class)
            info['qty'] = row['%(class)s_quantity' % package_class]
            row['quantities'].append(info)
    context['packaging'] = packaging
    context['package_classes'] = package_classes
    context['boxes_list'] = boxes
    return render_template('packaging.html', **context)
    
def do_add_packaging(form_data):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    rows = []
    try:
        query = "SELECT COALESCE(MAX(package_id)+1, 1) FROM packaging"
        cur.execute(query)
        package_id = cur.fetchone()[0]
        for key in form_data:
            if key.startswith('package-class-'):
                package_class_id = key.split('package-class-')[1]
                row = {'box_id': form_data['box_id'],
                       'package_class_id': package_class_id,
                       'quantity': form_data[key],
                       'package_id': package_id
                      }
                rows.append(row)
        
        query = """
                INSERT INTO packaging (package_id, box_id, package_class_id, quantity)
                VALUES %s
        """ % ",\n".join(["(%(package_id)s, %(box_id)s, %(package_class_id)s, %(quantity)s)" % row for row in rows])
        cur.execute(query)
        update_package_configs(cur)
        conn.commit()
        response = make_response('success', 200)
    except Exception as e:
        logger.exception(e)
        tb = traceback.format_exc()
        response = make_response(tb, 400)
    return response

def do_edit_packaging(form_data):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        for key in form_data:
            if key.startswith('package-class-'):
                package_class_id = key.split('package-class-')[1]
                row = {'box_id': form_data['box_id'],
                       'package_class_id': package_class_id,
                       'quantity': form_data[key],
                       'package_id': form_data['package_id']
                      }
                query = """
                    SELECT COUNT(1)
                      FROM packaging
                     WHERE package_id = %(package_id)s
                       AND package_class_id = %(package_class_id)s
                """ % row
                cur.execute(query)
                exists = cur.fetchone()[0] == 1
                if exists:
                    query = """
                        UPDATE packaging
                           SET quantity = %(quantity)s,
                               box_id = %(box_id)s
                         WHERE package_id = %(package_id)s
                           AND package_class_id = %(package_class_id)s
                    """ % row
                else:
                    query = """
                            INSERT INTO packaging (package_id, box_id, package_class_id, quantity)
                            VALUES (%(package_id)s, %(box_id)s, %(package_class_id)s, %(quantity)s)
                    """ % row
                cur.execute(query)
        update_package_configs(cur)
        conn.commit()
        response = make_response('success', 200)     
    except Exception as e:
        logger.exception(e)
        tb = traceback.format_exc()
        response = make_response(tb, 400)
    return response

def do_remove_packaging(package_id):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        query = """
            DELETE FROM packaging
             WHERE package_id = %s
        """ % package_id
        cur.execute(query)
        update_package_configs(cur)
        conn.commit()
        response = make_response('success', 200)
    except Exception as e:
        logger.exception(e)
        tb = traceback.format_exc()
        response = make_response(tb, 400)
    
    return response

def update_package_configs(cur):
    cur.execute("DELETE FROM package_configs")
    rows = get_data_dict(cur, "SELECT * FROM shipping_costs")
    shipping_costs = {}
    for row in rows:
        box_id = row['box_id']
        weight_str = row['weight_kg']
        if box_id not in shipping_costs:
            shipping_costs[box_id] = {}
        shipping_costs[box_id][weight_str] = row
    rows = get_data_dict(cur, "SELECT * FROM package_classes")
    package_class_list = [row for row in rows]
    package_ids = ["%s" % row['id'] for row in rows]
    package_classes = {str(row["id"]): row for row in rows}
    rows = get_data_dict(cur, "SELECT p.*, b.cost box_cost, b.weight_kg, (b.length_in*b.width_in*b.height_in) volume FROM packaging p JOIN boxes b ON b.id = p.box_id")
    packaging = {}
    for row in rows:
        package_id = row['package_id']
        if package_id not in packaging:
            packaging[package_id] = {'box_id': row['box_id'], 'weight_kg': row['weight_kg'], 'box_volume': row['volume'], 'box_cost': row['box_cost']}
        package_class_id = str(row['package_class_id'])
        packaging[package_id][package_class_id] = row['quantity']
        packaging[package_id]['weight_kg'] += package_classes[package_class_id]['weight_kg']*row['quantity']

    keys = ['box_id']
    keys.extend(package_ids)
    
    MAX_WEIGHT = 2.0
    
    combinations = {}
    for package_id in packaging:
        package = packaging[package_id]
        combinations.update(add_combinations(MAX_WEIGHT, package_class_list, package, combinations, keys))

    min_volume_combinations = {}
    
    for c in combinations:
        combination = combinations[c]
        weight = max(0.1, round(math.ceil(round(combination['weight_kg'],2)/0.1)*0.1, 1))
        if weight <= MAX_WEIGHT:
            weight_str = "%.1f" % weight
            shipping_cost = shipping_costs[combination['box_id']][weight_str]
            
            key = get_hashable(combination, package_ids)
            if (key not in min_volume_combinations or combination['box_volume'] < min_volume_combinations[key]['box_volume']):
                min_volume_combinations[key] = dict(combination)
                min_volume_combinations[key]['cost_ca'] = shipping_cost['cost_ca'] + combination['box_cost']
                min_volume_combinations[key]['cost_us'] = shipping_cost['cost_us'] + combination['box_cost']
    
    for key in min_volume_combinations:
        row = min_volume_combinations[key]
        query = "SELECT COALESCE(MAX(package_id)+1, 1) FROM package_configs"
        cur.execute(query)
        package_id = cur.fetchone()[0]
        template = "(%%s, %(box_id)s, %%s, %%s, %(cost_ca)s, %(cost_us)s)" % row
        values = ",\n".join([template % (package_id, x, row[x]) for x in package_ids])
        query = """
                INSERT INTO package_configs (package_id, box_id, package_class_id, quantity, cost_ca, cost_us)
                VALUES %s
        """ % values
        cur.execute(query)

def add_combinations(max_weight, package_class_list, current_combination, combinations, keys):
    key = get_hashable(current_combination, keys)
    if key in combinations:
        return combinations
    if current_combination['weight_kg'] <= max_weight:
        combinations[key] = current_combination
    for package_class in package_class_list:
        weight_kg = package_class['weight_kg']
        package_class_id = str(package_class['id'])
        if (current_combination[package_class_id] > 1):
            new_combination = dict(current_combination)
            new_combination[package_class_id] -= 1
            new_combination['weight_kg'] -= weight_kg
            combinations.update(add_combinations(max_weight, package_class_list, new_combination, combinations, keys))
    return combinations        
    
def get_hashable(data, keys):
    return ",".join([str(data[key]) for key in keys])