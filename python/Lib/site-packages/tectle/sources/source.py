from abc import ABC, abstractmethod
from ..db import get_connection, get_data_dict
from ..sku_util import import_new_skus
from ..package_util import package_new_receipts
import logging
logger = logging.getLogger()

class Source(ABC):

    # public

    def fetch_and_insert(self):
        src_receipts = self.fetch_receipts() # list in any format
        src_receipt_ids = [self.get_receipt_id(receipt) for receipt in src_receipts]
        conn = get_connection()
        cur = conn.cursor()
        new_receipt_ids = self.get_new_receipt_ids(cur, src_receipt_ids)
        
        if len(new_receipt_ids) > 0:
            new_receipts = [receipt for receipt in src_receipts 
                    if self.get_receipt_id(receipt) in new_receipt_ids]
            filtered_receipts = self.filter_receipts(new_receipts)
            receipts = [self.format_receipt(receipt) for receipt in filtered_receipts]
            
            receipt_items = self.fetch_receipt_items(new_receipts)
            parseable_receipt_items = self.get_receipt_parseable_items(receipt_items)
            parseable_receipt_ids = set(parseable_receipt_items.keys())
            
            if len(parseable_receipt_ids) > 0:
                parseable_receipts = [receipt for receipt in receipts
                                        if receipt['receipt_id'] in parseable_receipt_ids]
                
                self.insert_receipts(cur, parseable_receipts)
                self.insert_receipt_items(cur, parseable_receipt_items)
                
                logger.debug(parseable_receipt_ids)
                logger.debug(parseable_receipt_items)
                package_new_receipts(cur, parseable_receipt_ids, parseable_receipt_items)
                conn.commit()
    
    @abstractmethod
    def complete_order(self, receipt_id, tracking_pin):
        pass
    
    # private
    
    @abstractmethod
    def fetch_receipts(self):
        pass
    
    @abstractmethod
    def filter_receipts(self, receipts):
        pass
        
    @abstractmethod
    def format_receipt(self, receipt):
        pass
    
    @abstractmethod
    def fetch_receipt_items(self, receipts):
        pass
        
    @abstractmethod
    def get_receipt_id(self, receipt):
        pass
    
    def get_new_receipt_ids(self, cur, src_receipt_ids):
        receipt_ids = [str(receipt_id) for receipt_id in src_receipt_ids]
        query = """
            SELECT receipt_id
              FROM receipts
             WHERE receipt_id in ('%s')
        """ % "','".join(receipt_ids)
        cur.execute(query)
        rows = cur.fetchall()
        old_receipts = {row[0] for row in rows}
        return {receipt_id for receipt_id in receipt_ids if receipt_id not in old_receipts}
    
    
    def insert_receipts(self, cur, receipts):
        template_str = "('%(name)s', '%(receipt_id)s', '%(first_line)s', '%(second_line)s', '%(city)s', '%(state)s', '%(zip)s', '%(country)s', '%(country_id)s', '%(buyer_email)s', '%(source)s', '%(order_time)s')"
        values = ',\n'.join([template_str % receipt for receipt in receipts])
        logger.debug(values)
        logger.debug(str(receipts))
        query = """
            INSERT INTO receipts (name, receipt_id, first_line, second_line, city, state, zip, country, country_id, buyer_email, source, order_time)
            VALUES %s
        """ % values
        cur.execute(query)
        
    def insert_receipt_items(self, cur, receipt_items):
        # receipt_items = {'<receipt_id>': ['<full sku>', ...],
        #                  '192506723098': ['PD750001WTM.AC00001WT', ...]}
        receipt_ids = receipt_items.keys()
        queue_items = [(receipt_id, sku.strip()) for receipt_id in receipt_ids
                                                    for full_sku in receipt_items[receipt_id]
                                                        for sku in full_sku.split(',')]
        self.insert_into_printer_queue(cur, queue_items)
        
        skus = list({queue_item[1] for queue_item in queue_items})
        import_new_skus(cur, skus)
        
    def insert_into_printer_queue(self, cur, queue_items):
        values = ',\n'.join(["('%s', '%s')" % queue_item 
                                for queue_item in queue_items])
        query = """
            INSERT INTO printer_queue (receipt_id, sku)
            VALUES %s
        """ % values
        cur.execute(query)
        
    def get_receipt_parseable_items(self, receipt_items):
        parseable_receipt_items = {}
        is_parseable_dict = {}
        for receipt_id in receipt_items:
            fullskus = receipt_items[receipt_id]
            count = 0
            items = []
            for fullsku in fullskus:
                if fullsku not in is_parseable_dict:
                    is_parseable = True
                    for nsku in fullsku.split(','):
                        sku = nsku.strip()
                        is_parseable &= self.parseable(sku)
                        if not is_parseable:
                            break
                    is_parseable_dict[fullsku] = is_parseable
                if is_parseable_dict[fullsku]:
                    items.append(fullsku)
            if items:
                parseable_receipt_items[receipt_id] = items
        return parseable_receipt_items
        
    def parseable(self, sku):
        #PD750001WTM
        try:
            data = {}
            data['sku'] = sku
            category = sku[0]
            if category == 'P':
                data['category'] = 'Planter'
            elif category == 'A':
                data['category'] = 'Accessory'
            else:
                logger.error(sku)
                logger.error(data['category'])
                raise Exception('Invalid category')
                
            size = ord(sku[1]) - ord('A') + 1
            size_decimal = float("0."+sku[2:4])
            data['size'] = size + size_decimal
            
            data['design_id'] = int(sku[4:8])

            if category == 'P':
                if data['design_id'] == 1:
                    data['name'] = 'Fractal'
                elif data['design_id'] == 2:
                    data['name'] = 'Opal'
                elif data['design_id'] == 3:
                    data['name'] = 'Ripple'
                elif data['design_id'] == 4:
                    data['name'] = 'Mica'
                elif data['design_id'] == 5:
                    data['name'] = 'Pineapple'
                else:
                    logger.error(sku)
                    logger.error(data['design_id'])
                    raise Exception('Invalid design_id')
            elif category == 'A':
                data['name'] = 'WaterPlate'
            else:
                raise Exception('Invalid category')
            
            color = sku[8:10]
            if color == 'WT':
                data['color'] = 'White'
            elif color == 'BT':
                data['color'] = 'Blue'
            elif color == 'KT':
                data['color'] = 'Black'
            elif color == 'RT':
                data['color'] = 'Red'
            else:
                logger.error(sku)
                logger.error(data['color'])
                raise Exception('Invalid color')
                
            if category == 'P':
                bottom = sku[10]
                if bottom == 'M':
                    data['bottom'] = 'Mesh'
                elif bottom == 'S':
                    data['bottom'] = 'Sealed'
                else:
                    logger.error(sku)
                    logger.error(data['bottom'])
                    raise Exception('Invalid bottom')  
            else:
                data['bottom'] = ''
            return True
        except:
            logger.error("Error parsing sku")
            logger.error(sku)
            return False
        
    
    