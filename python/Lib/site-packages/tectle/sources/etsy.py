from .source import Source
from ..etsy import send_etsy_get_request, send_etsy_post_request
from ..config import is_debug
from ..util import get_local_ip
from flask import session
import requests
from math import ceil
import logging
logger = logging.getLogger()

class Etsy(Source):

    def __init__(self):
        super().__init__()
        self.sku_memoization = {}
        
    def complete_order(self, receipt_id, tracking_pin):
        data = {'tracking_code': tracking_pin, 'carrier_name': 'canada-post'}
        url = 'https://openapi.etsy.com/v2/shops/%s/receipts/%s/tracking' % (session['SHOP_ID'], receipt_id)
        headers = {'content-type': 'application/json'}
        response = send_etsy_post_request(url, data=None, params=data)
        debugging = """
        logger.debug("ETSY POST REQUEST")
        logger.debug("RESPONSE INFO")
        logger.debug(response.text)
        logger.debug(response.headers)
        logger.debug(response.status_code)
        logger.debug(response.url)
        
        logger.debug("REQUEST INFO")
        logger.debug(response.request.method)
        logger.debug(response.request.body)
        logger.debug(str(data))
        logger.debug(response.request.headers)
        """
    
    def fetch_receipts(self):
        batch_size = 25
        receipts, total_receipts = self.fetch_receipts_helper(batch_size, 0)
        num_loops = ceil((total_receipts/batch_size)-1)
        for x in range(num_loops):
            new_receipts, total_receipts = self.fetch_receipts_helper(batch_size, len(receipts))
            receipts.extend(new_receipts)
        return receipts
        
    def filter_receipts(self, receipts):
        filtered_receipts = []
        excluded_receipts = []
        for receipt in receipts:
            if receipt['country_id'] in self.country_ids:
                filtered_receipts.append(receipt)
            else:
                excluded_receipts.append(receipt)
        logger.debug('Excluded Etsy Receipts')
        logger.debug('\n'.join(['%(receipt_id)s - %(country_id)s' % receipt for receipt in excluded_receipts]))
        return filtered_receipts
    
    def format_receipt(self, receipt):
        receipt['country'] = self.country_ids[receipt['country_id']]['country_code']
        receipt['source'] = 'Etsy'
        receipt['order_time'] = int(receipt['creation_tsz'])
        receipt['receipt_id'] = str(receipt['receipt_id'])
        return receipt
    
    def fetch_receipt_items(self, receipts):
        receipt_items = {}
        for receipt in receipts:
            receipt_items[receipt['receipt_id']] = self.fetch_receipt_items_helper(receipt['receipt_id'])
        return receipt_items
        
    def get_receipt_id(self, receipt):
        return str(receipt['receipt_id'])
    
    # private
    
    def fetch_receipts_helper(self, limit, offset):
        url = None
        response = None
        if not is_debug():
            url = 'https://openapi.etsy.com/v2/shops/%s/receipts/open?limit=%s&offset=%s' % (session['SHOP_ID'], limit, offset)
            response = send_etsy_get_request(url)
        else:
            url = 'http://%s:80/receipts/open?limit=%s&offset=%s' % (get_local_ip(), limit, offset)
            response = requests.get(url)
        response.raise_for_status()
        response_json = response.json()
        receipts = response_json['results']
        total_receipts = response_json['count']
        return receipts, total_receipts
    
    def fetch_receipt_items_helper(self, receipt_id):
        url = None
        response = None
        if not is_debug():
            url = 'https://openapi.etsy.com/v2/receipts/%s/transactions' % receipt_id
            response = send_etsy_get_request(url)
        else:
            url = 'http://%s:80/receipts/%s/transactions' % (get_local_ip(), receipt_id)
            response = requests.get(url)
        response.raise_for_status()
        response_json = response.json()
        transactions = response_json['results']
        items = []
        for transaction in transactions:
            sku = self.fetch_sku_helper(transaction['listing_id'], transaction['product_data']['product_id'])
            logger.debug("kavin u fatass")
            logger.debug(sku)
            if sku:
                for i in range(transaction['quantity']):
                    items.append(sku)
        return items
    
    def fetch_sku_helper(self, listing_id, product_id):
        if listing_id in self.sku_memoization and product_id in self.sku_memoization[listing_id]:
            return self.sku_memoization[listing_id][product_id]
        url = None
        response = None
        sku = None
        try:
            if not is_debug():
                url = 'https://openapi.etsy.com/v2/listings/%s/products/%s' % (listing_id, product_id)
                response = send_etsy_get_request(url)
            else:
                url = 'http://%s:80/listings/%s/products/%s' % (get_local_ip(), listing_id, product_id)
                response = requests.get(url)
            logger.debug(url)
            response.raise_for_status()
            response_json = response.json()
            sku = response_json['results']['sku']
            if listing_id not in self.sku_memoization:
                self.sku_memoization[listing_id] = {}
            self.sku_memoization[listing_id][product_id] = sku
        except Exception as e:
            logger.debug(e)
        return sku
        
