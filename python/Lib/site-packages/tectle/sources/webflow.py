from .source import Source
from flask import session
from ..config import is_debug
import requests
from datetime import datetime


class Webflow(Source):
    
    def complete_order(self, receipt_id, tracking_pin):
        url = 'https://api.webflow.com/sites/%s/order/%s' % (session['WEBFLOW_SITE_ID'], receipt_id)
        headers = {'accept-version': '1.0.0', 'Authorization': 'Bearer %s' % (session['WEBFLOW_TOKEN'])}
        payload = {
            'fields': {
                'shippingProvider': 'canada-post',
                'shippingTracking': tracking_pin,
            }
        }
        requests.patch(url, json=payload, headers=headers)
        
        url = 'https://api.webflow.com/sites/%s/order/%s/fulfill' % (session['WEBFLOW_SITE_ID'], receipt_id)
        payload = {
            'sendOrderFulfilledEmail': True
        }
        requests.post(url, json=payload, headers=headers)
    
    # private
    
    def fetch_receipts(self):
        num_receipts = 1
        receipts = []
        while num_receipts > 0:
            new_receipts = self.fetch_receipts_helper(len(receipts))
            receipts.extend(new_receipts)
            num_receipts = len(new_receipts)
        return receipts
    
    def format_receipt(self, receipt):
        data = {
            'name': receipt['shippingAddress']['addressee'],
            'receipt_id': receipt['orderId'],
            'first_line': receipt['shippingAddress']['line1'],
            'second_line': receipt['shippingAddress']['line2'],
            'city': receipt['shippingAddress']['city'],
            'state': self.conv_state(receipt['shippingAddress']['state']),
            'zip': receipt['shippingAddress']['postalCode'],
            'country': receipt['shippingAddress']['country'],
            'country_id': 209 if receipt['shippingAddress']['country'] == 'US' else 79,
            'buyer_email': receipt['customerInfo']['email'],
            'source': 'Webflow',
            'order_time': int(datetime.strptime(receipt['acceptedOn'], '%Y-%m-%dT%H:%M:%S.%fZ').timestamp())
        }
        return data

    def conv_state(self, state):
        state_map = {
            'alabama': 'AL',
            'alaska': 'AK',
            'american Samoa': 'AS',
            'arizona': 'AZ',
            'arkansas': 'AR',
            'armed forces americas': 'AA',
            'armed forces europe': 'AE',
            'armed forces pacific': 'AP',
            'california': 'CA',
            'colorado': 'CO',
            'connecticut': 'CT',
            'delaware': 'DE',
            'district of columbia': 'DC',
            'florida': 'FL',
            'georgia': 'GA',
            'guam': 'GU',
            'hawaii': 'HI',
            'idaho': 'ID',
            'illinois': 'IL',
            'indiana': 'IN',
            'iowa': 'IA',
            'kansas': 'KS',
            'kentucky': 'KY',
            'louisiana': 'LA',
            'maine': 'ME',
            'marshall Islands': 'MH',
            'maryland': 'MD',
            'massachusetts': 'MA',
            'michigan': 'MI',
            'minnesota': 'MN',
            'mississippi': 'MS',
            'missouri': 'MO',
            'montana': 'MT',
            'nebraska': 'NE',
            'nevada': 'NV',
            'new hampshire': 'NH',
            'new jersey': 'NJ',
            'new mexico': 'NM',
            'new york': 'NY',
            'north carolina': 'NC',
            'north dakota': 'ND',
            'northern mariana islands': 'NP',
            'ohio': 'OH',
            'oklahoma': 'OK',
            'oregon': 'OR',
            'pennsylvania': 'PA',
            'puerto rico': 'PR',
            'rhode island': 'RI',
            'south carolina': 'SC',
            'south dakota': 'SD',
            'tennessee': 'TN',
            'texas': 'TX',
            'virgin islands': 'VI',
            'us virgin islands': 'VI',
            'utah': 'UT',
            'vermont': 'VT',
            'virginia': 'VA',
            'washington': 'WA',
            'west virginia': 'WV',
            'wisconsin': 'WI',
            'wyoming': 'WY',
            'alberta': 'AB',
            'british columbia': 'BC',
            'manitoba': 'MB',
            'new brunswick': 'NB',
            'newfoundland': 'NF',
            'northwest territory': 'NT',
            'nova scotia': 'NS',
            'nunavut': 'NU',
            'ontario': 'ON',
            'prince edward island': 'PE',
            'quebec': 'QC',
            'saskatchewan': 'SK',
            'yukon': 'YT'
        }
        return state_map.get(state.lower(), state)
    
    def fetch_receipt_items(self, receipts):
        receipt_items = {}
        for receipt in receipts:
            receipt_items[receipt['orderId']] = self.fetch_receipt_items_helper(receipt)
        return receipt_items
        
    def get_receipt_id(self, receipt):
        return receipt['orderId']
        
    def fetch_receipts_helper(self, offset):
        url = None
        headers = {}
        if not is_debug():
            url = 'https://api.webflow.com/sites/%s/orders?status=unfulfilled&offset=%s' % (session['WEBFLOW_SITE_ID'], offset)
            headers = {'accept-version': '1.0.0', 'Authorization': 'Bearer %s' % (session['WEBFLOW_TOKEN'])}
        else:
            url = 'http://127.0.0.1:8080/sites/orders?limit=100&offset=%s' %(offset)
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        receipts = response.json()
        return receipts
    
    def fetch_receipt_items_helper(self, receipt):
        items = []
        for purchased_items in receipt['purchasedItems']:
            for i in range(purchased_items['count']):
                items.append(purchased_items['variantSKU'])
        return items
        