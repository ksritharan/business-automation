from .db import get_connection, get_data_dict
from flask import render_template, Response, send_file
import requests
import traceback
import logging
import cv2
logger = logging.getLogger()

def do_video_feed(printer_id):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    
    query = """
        SELECT COUNT(1)
          FROM printers
         WHERE id = %s
    """ % printer_id
    cur.execute(query)
    existing = cur.fetchone()[0] > 0
    
    if existing:
        query = """
            SELECT rtsp_url
              FROM printers
             WHERE id = %s
        """ % printer_id
        cur.execute(query)
        rtsp_url = cur.fetchone()[0]
        if valid_link(rtsp_url):
            response = Response(gen_frames(rtsp_url), mimetype='multipart/x-mixed-replace; boundary=frame')
        else:
            response = send_file('static/img/no-cam.jpg', mimetype='image/jpg')
    else:
        # default image
        response = send_file('static/img/no-cam.jpg', mimetype='image/jpg')
    
    return response

def valid_link(rtsp_url):
    camera = cv2.VideoCapture(rtsp_url)
    valid = camera is not None and camera.isOpened()
    camera.release()
    return valid

def gen_frames(rtsp_url):
    camera = cv2.VideoCapture(rtsp_url)
    params = [int(cv2.IMWRITE_JPEG_QUALITY), 50]
    failures = 0
    successes = 0
    while True:
        success, frame = camera.read()
        if not success:
            failures += 1
            continue
        else:
            successes += 1
            ret, buffer = cv2.imencode('.jpg', frame, params)
            frame = buffer.tobytes()
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')