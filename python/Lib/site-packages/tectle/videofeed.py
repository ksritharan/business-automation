from .db import get_connection, get_connection_non_flask, get_data_dict
from .config import load_config_non_flask
from flask import render_template, Response, send_file
import threading
import requests
import traceback
import logging
import cv2
from time import sleep
logger = logging.getLogger()

def do_video_feed(rtsp_stream, jpeglib):
    response = None
    if rtsp_stream is not None:
        response = Response(gen_frames(rtsp_stream, jpeglib), mimetype='multipart/x-mixed-replace; boundary=frame')
    else:
        # default image
        response = send_file('static/img/no-cam.jpg', mimetype='image/jpg')
    return response

def valid_link(rtsp_url):
    camera = cv2.VideoCapture(rtsp_url)
    valid = camera is not None and camera.isOpened()
    camera.release()
    return valid

def gen_frames(rtsp_stream, jpeglib):
    while True:
        success, frame = rtsp_stream.read()
        if success:
            frame = cv2.resize(frame, (192, 144))
            frame = jpeglib.encode(frame)
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')
        sleep(0.16)

def start_streams(rtsp_streams):
    for printer_id in rtsp_streams:
        if rtsp_streams[printer_id].stopped:
            rtsp_streams[printer_id].start()

def stop_streams(rtsp_streams):
    for printer_id in rtsp_streams:
        if not rtsp_streams[printer_id].stopped:
            rtsp_streams[printer_id].stop()

def create_streams():
    config = load_config_non_flask()
    is_debug = 'DEBUG' in config and config['DEBUG'] == 'True'
    conn = get_connection_non_flask(is_debug)
    cur = conn.cursor()
    
    query = """
        SELECT id,
               rtsp_url
          FROM printers
    """
    rows = get_data_dict(cur, query)
    rtsp_streams = {}
    for row in rows:
        if valid_link(row['rtsp_url']):
            rtsp_streams[row['id']] = RTSPStream(row['rtsp_url'])
    return rtsp_streams

def add_stream(rtsp_streams, printer_id, rtsp_url):
    if valid_link(rtsp_url):
        rtsp_streams[int(printer_id)] = RTSPStream(rtsp_url).start()

def stop_stream(rtsp_streams, printer_id):
    if int(printer_id) in rtsp_streams:
        #rtsp_streams[int(printer_id)].stop()
        del rtsp_streams[int(printer_id)]

def edit_stream(rtsp_streams, printer_id, rtsp_url):
    stop_stream(rtsp_streams, printer_id)
    add_stream(rtsp_streams, printer_id, rtsp_url)

class RTSPStream:
    def __init__(self, rtsp_url):
        self.camera = cv2.VideoCapture(rtsp_url)
        self.thread = None
        self.grabbed = False
        self.frame = None
        self.stopped = True
    
    def start(self):
        if self.stopped:
            self.stopped = False
            self.thread = threading.Thread(target=self.update, daemon=True)
            self.thread.start()
        return self

    def update(self):
        while True:
            if self.stopped:
                break
            self.grabbed, self.frame = self.camera.read()
    
    def read(self):
        return self.grabbed, self.frame
    
    def stop(self):
        self.stopped = True