import sqlite3
from sqlite3 import Error
from .packaging import update_package_configs

DB_FILE = r"db\printer.db"
DB_DEBUG_FILE = r"db\printer_debug.db"

def get_connection(db_file):
    conn = None
    try:
        conn = sqlite3.connect(db_file)
    except Error as e:
        print(e)
    return conn

def build_schema(cur):
    cur.execute("DROP TABLE IF EXISTS printers");
    cur.execute("""
        CREATE TABLE printers (
            id          INTEGER PRIMARY KEY,
            printer_ip  TEXT    NOT NULL,
            status      INTEGER NOT NULL DEFAULT 0,
            ui_change   INTEGER DEFAULT 0
        );
    """)
    cur.execute("DROP TABLE IF EXISTS printer_queue");
    cur.execute("""
        CREATE TABLE printer_queue (
            id          INTEGER PRIMARY KEY,
            printer_id  INTEGER,
            sku         TEXT,
            receipt_id  INTEGER,
            status      INTEGER NOT NULL DEFAULT 0,
            progress    INTEGER NOT NULL DEFAULT 0,
            priority    INTEGER,
            FOREIGN KEY (printer_id) REFERENCES printers(id)
        );
    """)
    cur.execute("DROP TABLE IF EXISTS unassigned_queue");
    cur.execute("DROP TABLE IF EXISTS completed_queue");
    cur.execute("DROP TABLE IF EXISTS fake_printers");
    cur.execute("""
        CREATE TABLE fake_printers (
            id          INTEGER PRIMARY KEY,
            printer_ip  TEXT,
            status      TEXT,
            current_sku TEXT,
            start_time  TIMESTAMP,
            finish_time TIMESTAMP
        );
    """)
    cur.execute("DROP TABLE IF EXISTS fake_receipts");
    cur.execute("""
        CREATE TABLE fake_receipts (
            id          INTEGER PRIMARY KEY,
            name        TEXT,
            receipt_id  INTEGER,
            first_line  TEXT,
            second_line TEXT,
            city        TEXT,
            state       TEXT,
            zip         TEXT,
            country_id  INTEGER, /* 79 is Canada & 209 is United States */
            buyer_email TEXT,
            status      INTEGER DEFAULT 0
        );
    """)
    cur.execute("DROP TABLE IF EXISTS fake_transactions");
    cur.execute("""
        CREATE TABLE fake_transactions (
            id          INTEGER PRIMARY KEY,
            receipt_id  INTEGER,
            listing_id  INTEGER,
            product_id  INTEGER,
            quantity    INTEGER
        );
    """)
    cur.execute("DROP TABLE IF EXISTS fake_products");
    cur.execute("""
        CREATE TABLE fake_products (
            id          INTEGER PRIMARY KEY,
            sku         TEXT
        );
    """)
    skus = ['PD750001WTM', 'PD750001WTM.AE900001WT', 'PD750001GYM', 'PD750001GYM.AE900001WT', 'PD750001MRM', 'PD750001MRM.AE900001WT', 'PD750002WTM', 'PD750002WTM.AE900001WT', 'PD750002GYM', 'PD750002GYM.AE900001WT', 'PD750002MRM', 'PD750002MRM.AE900001WT', 'PD750003WTM', 'PD750003WTM.AE900001WT', 'PD750003GYM', 'PD750003GYM.AE900001WT', 'PD750003MRM', 'PD750003MRM.AE900001WT', 'PD750004WTM', 'PD750004WTM.AE900001WT', 'PD750004GYM', 'PD750004GYM.AE900001WT', 'PD750004MRM', 'PD750004MRM.AE900001WT', 'PD750005WTM', 'PD750005WTM.AE900001WT', 'PD750005GYM', 'PD750005GYM.AE900001WT', 'PD750005MRM', 'PD750005MRM.AE900001WT', 'PD750006WTM', 'PD750006WTM.AE900001WT', 'PD750006GYM', 'PD750006GYM.AE900001WT', 'PD750006MRM', 'PD750006MRM.AE900001WT', 'PD750007WTM', 'PD750007WTM.AE900001WT', 'PD750007GYM', 'PD750007GYM.AE900001WT', 'PD750007MRM', 'PD750007MRM.AE900001WT', 'PF000008WTM', 'PF000008WTM.AG480001WT', 'PF000008GYM', 'PF000008GYM.AG480001WT', 'PF000008MRM', 'PF000008MRM.AG480001WT', 'PH000001WTM', 'PH000001WTM.AJ000001WT', 'PH000001GYM', 'PH000001GYM.AJ000001WT', 'PH000001MRM', 'PH000001MRM.AJ000001WT', 'PH000002WTM', 'PH000002WTM.AJ000001WT', 'PH000002GYM', 'PH000002GYM.AJ000001WT', 'PH000002MRM', 'PH000002MRM.AJ000001WT', 'PH000003WTM', 'PH000003WTM.AJ000001WT', 'PH000003GYM', 'PH000003GYM.AJ000001WT', 'PH000003MRM', 'PH000003MRM.AJ000001WT', 'PH000004WTM', 'PH000004WTM.AJ000001WT', 'PH000004GYM', 'PH000004GYM.AJ000001WT', 'PH000004MRM', 'PH000004MRM.AJ000001WT', 'PH000005WTM', 'PH000005WTM.AJ000001WT', 'PH000005GYM', 'PH000005GYM.AJ000001WT', 'PH000005MRM', 'PH000005MRM.AJ000001WT', 'PH000006WTM', 'PH000006WTM.AJ000001WT', 'PH000006GYM', 'PH000006GYM.AJ000001WT', 'PH000006MRM', 'PH000006MRM.AJ000001WT', 'PH000007WTM', 'PH000007WTM.AJ000001WT', 'PH000007GYM', 'PH000007GYM.AJ000001WT', 'PH000007MRM', 'PH000007MRM.AJ000001WT', 'PI000001WTM', 'PI000001WTM.AJ000001WT', 'PI000001GYM', 'PI000001GYM.AJ000001WT', 'PI000001MRM', 'PI000001MRM.AJ000001WT', 'PK000001WTM', 'PK000001WTM.AJ000001WT', 'PK000001GYM', 'PK000001GYM.AJ000001WT', 'PK000001MRM', 'PK000001MRM.AJ000001WT', 'PD750001WTS', 'PD750001GYS', 'PD750001MRS', 'PD750002WTS', 'PD750002GYS', 'PD750002MRS', 'PD750003WTS', 'PD750003GYS', 'PD750003MRS', 'PD750004WTS', 'PD750004GYS', 'PD750004MRS', 'PD750005WTS', 'PD750005GYS', 'PD750005MRS', 'PD750006WTS', 'PD750006GYS', 'PD750006MRS', 'PD750007WTS', 'PD750007GYS', 'PD750007MRS', 'PF000008WTS', 'PF000008GYS', 'PF000008MRS', 'PH000001WTS', 'PH000001GYS', 'PH000001MRS', 'PH000002WTS', 'PH000002GYS', 'PH000002MRS', 'PH000003WTS', 'PH000003GYS', 'PH000003MRS', 'PH000004WTS', 'PH000004GYS', 'PH000004MRS', 'PH000005WTS', 'PH000005GYS', 'PH000005MRS', 'PH000006WTS', 'PH000006GYS', 'PH000006MRS', 'PH000007WTS', 'PH000007GYS', 'PH000007MRS', 'PI000001WTS', 'PI000001GYS', 'PI000001MRS', 'PK000001WTS', 'PK000001GYS', 'PK000001MRS', 'PB750001WTS', 'PB750001MRS', 'PB750001GYS', 'PB750001WTM', 'PB750001WTM.AC540001WT', 'PB750001MRM', 'PB750001MRM.AC540001WT', 'PB750001GYM', 'PB750001GYM.AC540001WT']
    cur.execute("""
        INSERT INTO fake_products (sku)
        VALUES %s
    """ % ',\n'.join(["('%s')" % sku for sku in skus]))
    cur.execute("DROP TABLE IF EXISTS receipts");
    cur.execute("""
        CREATE TABLE receipts (
            id             INTEGER PRIMARY KEY,
            name           TEXT,
            receipt_id     INTEGER,
            first_line     TEXT,
            second_line    TEXT,
            city           TEXT,
            state          TEXT,
            zip            TEXT,
            country        TEXT,
            country_id     INTEGER, /* 79 is Canada & 209 is United States */
            buyer_email    TEXT,
            status         INTEGER DEFAULT 0, /* 0 is PENDING */
            shipping_label TEXT
        );
    """)
    cur.execute("DROP TABLE IF EXISTS boxes");
    cur.execute("""
        CREATE TABLE boxes (
            id          INTEGER PRIMARY KEY,
            type        TEXT, /* A, B, C, D, E, F */
            length_cm   REAL,
            width_cm    REAL,
            height_cm   REAL,
            length_in   INTEGER, /* inch measurements are rounded */
            width_in    INTEGER,
            height_in   INTEGER,
            cost        REAL,
            weight_kg   REAL
        );
    """)
    cur.execute("""
        INSERT INTO boxes (type, length_cm, width_cm, height_cm, length_in, width_in, height_in, cost, weight_kg)
        VALUES ('A',17.8,17.8,12.7,7,7,5,0.63,0.117),
               ('B',25.4,20.4,20.4,10,8,8,0.61,0.202),
               ('C',22.9,22.9,22.9,9,9,9,0.65,0.211),
               ('D',38.1,33.1,17.8,15,13,7,1.84,0.44),
               ('E',43.2,22.9,22.9,17,9,9,1.69,0.366),
               ('F',30.5,28,28,12,11,11,1.69,0.411)
    """)
    cur.execute("DROP TABLE IF EXISTS package_classes");
    cur.execute("""
        CREATE TABLE package_classes (
            id        INTEGER PRIMARY KEY,
            class     TEXT, /* small, medium, large, xlarge, wildflower */
            weight_kg REAL,
            cost      REAL
        );
    """)
    cur.execute("""
        INSERT INTO package_classes (class, weight_kg, cost)
        VALUES ('Small',0.25,1.99),
               ('Medium',0.25,1.99),
               ('Large',0.55,3.99),
               ('XLarge',1.1,3.99),
               ('Wildflower',0.25,3.99)
    """)
    cur.execute("DROP TABLE IF EXISTS products");
    cur.execute("""
        CREATE TABLE products (
            id                INTEGER PRIMARY KEY,
            sku               TEXT,
            design_id         INTEGER,
            category          TEXT,
            name              TEXT,
            color             TEXT,
            size              REAL,
            bottom            TEXT,
            package_class_id  INTEGER,
            FOREIGN KEY (package_class_id) REFERENCES package_classes(id)
        );
    """)
    cur.execute("DROP TABLE IF EXISTS packaging");
    cur.execute("""
        CREATE TABLE packaging (
            id                INTEGER PRIMARY KEY,
            package_id        INTEGER,
            box_id            INTEGER,
            package_class_id  INTEGER,
            quantity          INTEGER,
            FOREIGN KEY (box_id) REFERENCES boxes(id),
            FOREIGN KEY (package_class_id) REFERENCES package_classes(id)
        );
    """)
    cur.execute("""
    INSERT INTO packaging (package_id, box_id, package_class_id, quantity)
VALUES (1,1,1,1),
(1,1,2,0),
(1,1,3,0),
(1,1,4,0),
(1,1,5,0),
(2,1,1,0),
(2,1,2,1),
(2,1,3,0),
(2,1,4,0),
(2,1,5,0),
(3,2,1,0),
(3,2,2,2),
(3,2,3,0),
(3,2,4,0),
(3,2,5,0),
(4,2,1,2),
(4,2,2,0),
(4,2,3,0),
(4,2,4,0),
(4,2,5,0),
(5,2,1,1),
(5,2,2,1),
(5,2,3,0),
(5,2,4,0),
(5,2,5,0),
(6,3,1,0),
(6,3,2,0),
(6,3,3,1),
(6,3,4,0),
(6,3,5,1),
(7,3,1,0),
(7,3,2,0),
(7,3,3,1),
(7,3,4,0),
(7,3,5,0),
(8,4,1,6),
(8,4,2,0),
(8,4,3,0),
(8,4,4,0),
(8,4,5,0),
(9,4,1,5),
(9,4,2,1),
(9,4,3,0),
(9,4,4,0),
(9,4,5,0),
(10,4,1,4),
(10,4,2,2),
(10,4,3,0),
(10,4,4,0),
(10,4,5,0),
(11,4,1,3),
(11,4,2,3),
(11,4,3,0),
(11,4,4,0),
(11,4,5,0),
(12,4,1,2),
(12,4,2,4),
(12,4,3,0),
(12,4,4,0),
(12,4,5,0),
(13,4,1,1),
(13,4,2,5),
(13,4,3,0),
(13,4,4,0),
(13,4,5,0),
(14,4,1,0),
(14,4,2,6),
(14,4,3,0),
(14,4,4,0),
(14,4,5,0),
(15,4,1,0),
(15,4,2,3),
(15,4,3,0),
(15,4,4,0),
(15,4,5,1),
(16,4,1,0),
(16,4,2,1),
(16,4,3,0),
(16,4,4,0),
(16,4,5,2),
(17,5,1,0),
(17,5,2,0),
(17,5,3,2),
(17,5,4,0),
(17,5,5,0),
(18,5,1,0),
(18,5,2,1),
(18,5,3,1),
(18,5,4,0),
(18,5,5,1),
(19,5,1,0),
(19,5,2,2),
(19,5,3,1),
(19,5,4,0),
(19,5,5,0),
(20,5,1,0),
(20,5,2,0),
(20,5,3,1),
(20,5,4,0),
(20,5,5,2),
(21,5,1,1),
(21,5,2,0),
(21,5,3,1),
(21,5,4,0),
(21,5,5,1),
(22,5,1,2),
(22,5,2,0),
(22,5,3,1),
(22,5,4,0),
(22,5,5,0),
(23,5,1,1),
(23,5,2,1),
(23,5,3,1),
(23,5,4,0),
(23,5,5,0),
(24,6,1,7),
(24,6,2,0),
(24,6,3,0),
(24,6,4,0),
(24,6,5,0),
(25,6,1,6),
(25,6,2,1),
(25,6,3,0),
(25,6,4,0),
(25,6,5,0),
(26,6,1,5),
(26,6,2,2),
(26,6,3,0),
(26,6,4,0),
(26,6,5,0),
(27,6,1,4),
(27,6,2,3),
(27,6,3,0),
(27,6,4,0),
(27,6,5,0),
(28,6,1,3),
(28,6,2,4),
(28,6,3,0),
(28,6,4,0),
(28,6,5,0),
(29,6,1,2),
(29,6,2,5),
(29,6,3,0),
(29,6,4,0),
(29,6,5,0),
(30,6,1,1),
(30,6,2,6),
(30,6,3,0),
(30,6,4,0),
(30,6,5,0),
(31,6,1,0),
(31,6,2,7),
(31,6,3,0),
(31,6,4,0),
(31,6,5,0),
(32,6,1,0),
(32,6,2,0),
(32,6,3,0),
(32,6,4,0),
(32,6,5,4),
(33,6,1,0),
(33,6,2,5),
(33,6,3,0),
(33,6,4,0),
(33,6,5,1),
(34,6,1,0),
(34,6,2,4),
(34,6,3,0),
(34,6,4,0),
(34,6,5,2),
(35,6,1,0),
(35,6,2,0),
(35,6,3,1),
(35,6,4,0),
(35,6,5,1),
(36,6,1,0),
(36,6,2,0),
(36,6,3,0),
(36,6,4,1),
(36,6,5,0),
(37,6,1,0),
(37,6,2,1),
(37,6,3,0),
(37,6,4,1),
(37,6,5,0),
(38,6,1,0),
(38,6,2,5),
(38,6,3,0),
(38,6,4,0),
(38,6,5,1),
(39,6,1,0),
(39,6,2,4),
(39,6,3,0),
(39,6,4,0),
(39,6,5,2),
(40,6,1,0),
(40,6,2,3),
(40,6,3,0),
(40,6,4,0),
(40,6,5,2),
(41,6,1,5),
(41,6,2,0),
(41,6,3,0),
(41,6,4,0),
(41,6,5,1),
(42,6,1,4),
(42,6,2,0),
(42,6,3,0),
(42,6,4,0),
(42,6,5,2)
    """)
    cur.execute("DROP TABLE IF EXISTS package_config");
    cur.execute("DROP TABLE IF EXISTS package_configs");
    cur.execute("""
        CREATE TABLE package_configs (
            id                INTEGER PRIMARY KEY,
            package_id        INTEGER,
            box_id            INTEGER,
            package_class_id  INTEGER,
            quantity          INTEGER,
            cost_ca           REAL,
            cost_us           REAL,
            FOREIGN KEY (box_id) REFERENCES boxes(id),
            FOREIGN KEY (package_class_id) REFERENCES package_classes(id)
        );
    """)
    cur.execute("DROP TABLE IF EXISTS shipping_costs");
    cur.execute("""
        CREATE TABLE shipping_costs (
            id        INTEGER PRIMARY KEY,
            box_id    INTEGER,
            weight_kg TEXT,
            cost_ca   REAL,
            cost_us   REAL,
            FOREIGN KEY (box_id) REFERENCES boxes(id)
        );
    """)
    cur.execute("""
        INSERT INTO shipping_costs (box_id, weight_kg, cost_ca, cost_us)
        VALUES
(1,'0.1',16.38,7.29),
(2,'0.1',19.33,7.29),
(3,'0.1',19.33,7.29),
(4,'0.1',22.76,7.29),
(5,'0.1',23.63,7.29),
(6,'0.1',23.63,7.29),
(1,'0.2',16.38,8.92),
(2,'0.2',19.33,8.92),
(3,'0.2',19.33,8.92),
(4,'0.2',22.76,8.92),
(5,'0.2',23.63,8.92),
(6,'0.2',23.63,8.92),
(1,'0.3',16.38,11.71),
(2,'0.3',19.33,11.71),
(3,'0.3',19.33,11.71),
(4,'0.3',22.76,11.71),
(5,'0.3',23.63,11.71),
(6,'0.3',23.63,11.71),
(1,'0.4',16.38,11.71),
(2,'0.4',19.33,11.71),
(3,'0.4',19.33,11.71),
(4,'0.4',22.76,11.71),
(5,'0.4',23.63,11.71),
(6,'0.4',23.63,11.71),
(1,'0.5',16.38,11.71),
(2,'0.5',19.33,11.71),
(3,'0.5',19.33,11.71),
(4,'0.5',22.76,11.71),
(5,'0.5',23.63,11.71),
(6,'0.5',23.63,11.71),
(1,'0.6',16.38,17.17),
(2,'0.6',19.33,17.17),
(3,'0.6',19.33,17.17),
(4,'0.6',22.76,17.17),
(5,'0.6',23.63,17.17),
(6,'0.6',23.63,17.17),
(1,'0.7',16.38,17.17),
(2,'0.7',19.33,17.17),
(3,'0.7',19.33,17.17),
(4,'0.7',22.76,17.17),
(5,'0.7',23.63,17.17),
(6,'0.7',23.63,17.17),
(1,'0.8',16.38,17.17),
(2,'0.8',19.33,17.17),
(3,'0.8',19.33,17.17),
(4,'0.8',22.76,17.17),
(5,'0.8',23.63,17.17),
(6,'0.8',23.63,17.17),
(1,'0.9',16.38,17.17),
(2,'0.9',19.33,17.17),
(3,'0.9',19.33,17.17),
(4,'0.9',22.76,17.17),
(5,'0.9',23.63,17.17),
(6,'0.9',23.63,17.17),
(1,'1.0',16.38,17.17),
(2,'1.0',19.33,17.17),
(3,'1.0',19.33,17.17),
(4,'1.0',22.76,17.17),
(5,'1.0',23.63,17.17),
(6,'1.0',23.63,17.17),
(1,'1.1',17.79,20.0),
(2,'1.1',19.33,20.0),
(3,'1.1',19.33,20.0),
(4,'1.1',22.76,20.0),
(5,'1.1',23.63,20.0),
(6,'1.1',23.63,20.0),
(1,'1.2',17.79,20.0),
(2,'1.2',19.33,20.0),
(3,'1.2',19.33,20.0),
(4,'1.2',22.76,20.0),
(5,'1.2',23.63,20.0),
(6,'1.2',23.63,20.0),
(1,'1.3',17.79,20.0),
(2,'1.3',19.33,20.0),
(3,'1.3',19.33,20.0),
(4,'1.3',22.76,20.0),
(5,'1.3',23.63,20.0),
(6,'1.3',23.63,20.0),
(1,'1.4',17.79,20.0),
(2,'1.4',19.33,20.0),
(3,'1.4',19.33,20.0),
(4,'1.4',22.76,20.0),
(5,'1.4',23.63,20.0),
(6,'1.4',23.63,20.0),
(1,'1.5',17.79,20.0),
(2,'1.5',19.33,20.0),
(3,'1.5',19.33,20.0),
(4,'1.5',22.76,20.0),
(5,'1.5',23.63,20.0),
(6,'1.5',23.63,20.0),
(1,'1.6',18.74,22.43),
(2,'1.6',19.33,22.43),
(3,'1.6',19.33,22.43),
(4,'1.6',22.76,22.43),
(5,'1.6',23.63,22.43),
(6,'1.6',23.63,22.43),
(1,'1.7',18.74,22.43),
(2,'1.7',19.33,22.43),
(3,'1.7',19.33,22.43),
(4,'1.7',22.76,22.43),
(5,'1.7',23.63,22.43),
(6,'1.7',23.63,22.43),
(1,'1.8',18.74,22.43),
(2,'1.8',19.33,22.43),
(3,'1.8',19.33,22.43),
(4,'1.8',22.76,22.43),
(5,'1.8',23.63,22.43),
(6,'1.8',23.63,22.43),
(1,'1.9',18.74,22.43),
(2,'1.9',19.33,22.43),
(3,'1.9',19.33,22.43),
(4,'1.9',22.76,22.43),
(5,'1.9',23.63,22.43),
(6,'1.9',23.63,22.43),
(1,'2.0',18.74,22.43),
(2,'2.0',19.33,22.43),
(3,'2.0',19.33,22.43),
(4,'2.0',22.76,22.43),
(5,'2.0',23.63,22.43),
(6,'2.0',23.63,22.43)
    
    """)
    cur.execute("DROP TABLE IF EXISTS receipt_packages");
    cur.execute("""
        CREATE TABLE receipt_packages (
            id                INTEGER PRIMARY KEY,
            receipt_id        INTEGER,
            package_id        INTEGER,
            box_id            INTEGER,
            sku               TEXT,
            quantity          INTEGER,
            label_url         TEXT,
            tracking_pin      TEXT,
            filename          TEXT,
            FOREIGN KEY (box_id) REFERENCES boxes(id)
        );
    """)
    cur.execute("DROP TABLE IF EXISTS config")
    cur.execute("""
        CREATE TABLE config (
            id    INTEGER PRIMARY KEY,
            key   TEXT,
            value TEXT
        );
    """)
    cur.execute("""
        INSERT INTO config (key, value)
        VALUES ('oauth_token', ''),
               ('oauth_verifier', ''),
               ('oauth_token_secret', '')
    """)
    
import random

def create_printer_queue(cur, printer_id, receipt_id):
    skus = ["PD750001WTM", "PH000007WTM", "AE900001WT", "AJ000001WT"]
    max_num = 10
    num_choices = random.randint(1, max_num)
    for i in range(num_choices):
        sku = random.choice(skus)
        cur.execute("""
            INSERT INTO printer_queue (printer_id, sku, receipt_id, priority)
            VALUES (%(printer_id)s, '%(sku)s', %(receipt_id)s, %(priority)s)
        """ % {'printer_id': printer_id,
               'sku': sku,
               'receipt_id': receipt_id,
               'priority': i})
        receipt_id += random.randint(0, 1)
    return receipt_id

def create_printers(cur, n):
    template_ip = "192.168.0.%s"
    start = 101
    #receipt_id = random.randint(1e8, 2e8)
    for x in range(start, start+n):
        printer_ip = template_ip % x
        cur.execute("INSERT INTO printers (printer_ip) VALUES ('%s')" % printer_ip)
        printer_id = cur.lastrowid
        #receipt_id = create_printer_queue(cur, printer_id, receipt_id)
        #receipt_id += 1
        cur.execute("INSERT INTO fake_printers (printer_ip) VALUES ('%s')" % printer_ip)

def create_test_data(cur, num_printers, num_fake_receipts, max_num_items, max_quantity):
    create_printers(cur, num_printers)
    receipt_id = random.randint(1e8, 2e8)
    create_fake_receipts(cur, receipt_id, num_fake_receipts, max_num_items, max_quantity)
    
def create_fake_receipts(cur, receipt_id, n, max_num_items, max_quantity):
    names = ["Jeramiah Bell","Gaige West","Alyvia Hughes","Muhammad Hunt","Oswaldo Salazar","Hudson Santana","Jamir Wagner","Dylan Stevenson","Camila Hernandez","Kobe Stanton","Zachary Camacho","Coby Morris","Kylee Fuentes","Ana Mueller","Patricia Roman","Alonzo Hebert","Nicolas Howe","Anika Hopkins","Adyson Dillon","Lillian Houston","Jabari Black","Charles Evans","Brandon Chan","Robert Newman","Clare Cooke","Carleigh Mcdonald","Tristian Malone","Xzavier Sanders","Jazmine Henderson","Kolton Phelps","Amelia Reilly","Ireland Fischer","Abram Bautista","Lorenzo Ortega","Melany Ayers","Ali Tyler","Amiah Mcintyre","Misael Bass","Kathryn Abbott","Lauren Robbins","Porter Bryan","Karlee Walsh","Abdullah West","Ismael Pacheco","Leonel Decker","Cristopher Booth","James Arroyo","Easton Silva","Paisley Werner","Lawrence Chang","Jeffery Swanson","Tyler Buchanan","Ally Ramsey","Skyla Lamb","Guillermo Kemp","Beckham Barnes","Yasmine Mccann","Yuliana Velazquez","Alia Steele","Skyler Hatfield","Nelson White","Xiomara Bean","Reynaldo Burns","Stephen Mcdonald","Bridget Mata","Cason Frank","Linda Gaines","Aryana Hull","Kaylah Mclean","Kaden Luna","Miguel Holder","Kadyn Bowen","Dennis Andrews","Maritza Sanford","Jaylen Decker","Jayvon Lucero","Aarav Ruiz","Barbara Riley","Katrina Ellis","Marcel Nelson","Sandra Moses","Zackery Sexton","Jaylene Gregory","Tyson Garner","Boston Arias","Mylee Weeks","Jaylin Hubbard","Jada Oconnell","Aylin Price","Kaleigh Wilkins","Tate Heath","Aurora Cooke","Brooklynn Mcconnell","Hailie Hinton","Todd Gaines","Leonidas Mueller","Nico Mccall","John Vaughan","Alana Gill","Aliya Frazier"]
    addresses = [('8618 South Williams Rd.', '', 'Milledgeville', 'GA', '31061', 'US', '209'),('400 Devonshire Circle', '', 'Reisterstown', 'MD', '21136', 'US', '209'),('612 West Union Drive', '', 'Palos Verdes Peninsula', 'CA', '90274', 'US', '209'),('698 Pulaski Ave.', '', 'Trenton', 'NJ', '08610', 'US', '209'),('9557 NE. Ketch Harbour Street', '', 'Chicago', 'IL', '60621', 'US', '209'),('143 Albany Drive', '', 'Wheeling', 'WV', '26003', 'US', '209'),('16 Hillcrest Drive', '', 'North Kingstown', 'RI', '02852', 'US', '209'),('36 S. Sunset Street', '', 'Nampa', 'ID', '83651', 'US', '209'),('621 Wayne St.', '', 'Hanover Park', 'IL', '60133', 'US', '209'),('68 Prospect Avenue', '', 'Venice', 'FL', '34293', 'US', '209'),('183 E. Kirkland Dr.', '', 'New York', 'NY', '10002', 'US', '209'),('8622 Hillside Ave.', '', 'San Antonio', 'TX', '78213', 'US', '209'),('54 Squaw Creek Ave.', '', 'Winter Garden', 'FL', '34787', 'US', '209'),('89 Manhattan St.', '', 'Eastlake', 'OH', '44095', 'US', '209'),('7 Trenton St.', '', 'Tiffin', 'OH', '44883', 'US', '209'),('3 Meadow St.', '', 'Hopkinsville', 'KY', '42240', 'US', '209'),('65 Addison Street', '', 'Gulfport', 'MS', '39503', 'US', '209'),('129 Tanglewood Rd.', '', 'Saint Louis', 'MO', '63109', 'US', '209'),('9997 Harvard Ave.', '', 'Shirley', 'NY', '11967', 'US', '209'),('5 John Dr.', '', 'Stuart', 'FL', '34997', 'US', '209'),('274 North Penn Ave.', '', 'Lawrence', 'MA', '01841', 'US', '209'),('525 Theatre Ave.', '', 'Longview', 'TX', '75604', 'US', '209'),('9896 Howard St.', '', 'Hernando', 'MS', '38632', 'US', '209'),('8521 Wellington St.', '', 'Algonquin', 'IL', '60102', 'US', '209'),('543 Sunnyslope Ave.', '', 'North Fort Myers', 'FL', '33917', 'US', '209'),('32 Hillcrest St.', '', 'Fair Lawn', 'NJ', '07410', 'US', '209'),('11 Henry Smith Drive', '', 'Desoto', 'TX', '75115', 'US', '209'),('438 New Lane', '', 'Sanford', 'NC', '27330', 'US', '209'),('9259 Fairfield St.', '', 'Orlando', 'FL', '32806', 'US', '209'),('9343 Creekside Lane', '', 'Johnson City', 'TN', '37601', 'US', '209'),('555 West Cactus Court', '', 'Delaware', 'OH', '43015', 'US', '209'),('756 N. Del Monte Court', '', 'Palm Bay', 'FL', '32907', 'US', '209'),('415 Griffin Dr.', '', 'Palmetto', 'FL', '34221', 'US', '209'),('3 Linda Dr.', '', 'Fort Dodge', 'IA', '50501', 'US', '209'),('7480 Richardson Ave.', '', 'Sugar Land', 'TX', '77478', 'US', '209'),('8569 Hilltop Drive', '', 'Glen Cove', 'NY', '11542', 'US', '209'),('51 East Grant Street', '', 'Huntington Station', 'NY', '11746', 'US', '209'),('6 SW. New Dr.', '', 'Watertown', 'MA', '02472', 'US', '209'),('7033 Ocean Dr.', '', 'Bedford', 'OH', '44146', 'US', '209'),('77 Airport Street', '', 'Bozeman', 'MT', '59715', 'US', '209'),('46 North Arlington Lane', '', 'Fort Worth', 'TX', '76110', 'US', '209'),('7037 Essex Ave.', '', 'Hicksville', 'NY', '11801', 'US', '209'),('935 Colonial Ave.', '', 'Glasgow', 'KY', '42141', 'US', '209'),('33 Franklin Lane', '', 'Cottage Grove', 'MN', '55016', 'US', '209'),('604 Summer Rd.', '', 'Orchard Park', 'NY', '14127', 'US', '209'),('99 Miller Dr.', '', 'Westbury', 'NY', '11590', 'US', '209'),('7 Kent Street', '', 'San Diego', 'CA', '92111', 'US', '209'),('751 Court Ave.', '', 'Lansing', 'MI', '48910', 'US', '209'),('138 S. Pleasant Ave.', '', 'Glen Burnie', 'MD', '21060', 'US', '209'),('485 Meadow Drive', '', 'Glenview', 'IL', '60025', 'US', '209'),('943 Mammoth Court', '', 'South Ozone Park', 'NY', '11420', 'US', '209'),('7382 Gainsway Street', '', 'Shelbyville', 'TN', '37160', 'US', '209'),('1 Hill Avenue', '', 'Hoffman Estates', 'IL', '60169', 'US', '209'),('449 Bow Ridge St.', '', 'Tuckerton', 'NJ', '08087', 'US', '209'),('690 Jones St.', '', 'Oak Park', 'MI', '48237', 'US', '209'),('523 Mill Pond St.', '', 'Beckley', 'WV', '25801', 'US', '209'),('947 Peninsula St.', '', 'Mocksville', 'NC', '27028', 'US', '209'),('524 Saxon Street', '', 'Hoboken', 'NJ', '07030', 'US', '209'),('3 Stillwater Drive', '', 'Dothan', 'AL', '36301', 'US', '209'),('193 Sugar Dr.', '', 'Providence', 'RI', '02904', 'US', '209'),('533 E. Linda St.', '', 'Hudsonville', 'MI', '49426', 'US', '209'),('603 NW. Vale St.', '', 'Miamisburg', 'OH', '45342', 'US', '209'),('238 James Ave.', '', 'Manchester', 'NH', '03102', 'US', '209'),('578 Indian Spring St.', '', 'Clarksville', 'TN', '37040', 'US', '209'),('630 W. Prospect Circle', '', 'Athens', 'GA', '30605', 'US', '209'),('9071 Green Lake Drive', '', 'Riverdale', 'GA', '30274', 'US', '209'),('8505 Wentworth Dr.', '', 'Bayonne', 'NJ', '07002', 'US', '209'),('8993 West River St.', '', 'Kings Mountain', 'NC', '28086', 'US', '209'),('9326 Front Drive', '', 'Flowery Branch', 'GA', '30542', 'US', '209'),('8436 NE. Garfield Street', '', 'Branford', 'CT', '06405', 'US', '209'),('8369 Pulaski Dr.', '', 'West Palm Beach', 'FL', '33404', 'US', '209'),('902 Redwood Street', '', 'Endicott', 'NY', '13760', 'US', '209'),('49 Spruce Dr.', '', 'Libertyville', 'IL', '60048', 'US', '209'),('7117 North St Paul Ave.', '', 'Howell', 'NJ', '07731', 'US', '209'),('66 N. Sycamore Street', '', 'West Haven', 'CT', '06516', 'US', '209'),('60 Cleveland Dr.', '', 'Cap-PelÃ©', 'NB', 'E4N 4P8', 'CA', '79'),('5 Golf Ave.', '', 'Beauceville', 'QC', 'G5X 7Y6', 'CA', '79'),('945 Wagon Street', '', 'Lakeside', 'NS', 'B3T 6X8', 'CA', '79'),('801 South State Street', '', 'Rock Forest', 'QC', 'J1N 5E7', 'CA', '79'),('9020 Spruce Dr.', '', 'Smiths Falls', 'ON', 'K7A 3C5', 'CA', '79'),('807 SW. Court Street', '', 'Asbestos', 'QC', 'J1T 8G9', 'CA', '79'),('20 Peachtree Rd.', '', 'Apohaqui', 'NB', 'E5P 0R7', 'CA', '79'),('7039 South Bellevue St.', '', 'Minto', 'NB', 'E4B 4N9', 'CA', '79'),('605 Snake Hill Rd.', '', 'Capitale-Nationale', 'QC', 'G0A 3X0', 'CA', '79'),('387 Charles Court', '', 'Tantallon', 'NS', 'B3Z 7Y9', 'CA', '79'),('40 West Plymouth Lane', '', 'Shediac', 'NB', 'E4P 8M6', 'CA', '79'),('788 Linda Ave.', '', 'La Malbaie', 'QC', 'G5A 0V9', 'CA', '79'),('7208 Shady Ave.', '', 'Kananaskis Country', 'AB', 'T0L 7G5', 'CA', '79'),('9 Beach Street', '', 'Scarborough', 'ON', 'M1B 6C9', 'CA', '79'),('3 Clark Court', '', 'Chelsea', 'QC', 'J9B 3C4', 'CA', '79'),('90 W. Glen Eagles Dr.', '', 'Maisonneuve', 'QC', 'H1V 8C6', 'CA', '79'),('7196 Mayflower Court', '', 'Terrace', 'BC', 'V8G 1T9', 'CA', '79'),('340 Brookside St.', '', 'Rogersville', 'NB', 'E4Y 6H4', 'CA', '79'),('9 S. Magnolia Circle', '', 'Etobicoke', 'ON', 'M8V 2S7', 'CA', '79'),('55 East Proctor Lane', '', 'Coaldale', 'AB', 'T1M 7M5', 'CA', '79'),('144 Ramblewood Rd.', '', 'Whitehorse', 'Yukon', 'Y1A 2N6', 'CA', '79'),('630 S. Valley View Ave.', '', 'Outremont', 'QC', 'H2V 3C2', 'CA', '79'),('669 Aspen Dr.', '', 'London', 'ON', 'N5V 8Y2', 'CA', '79'),('56 Harvard St.', '', 'Laval-sur-le-Lac', 'QC', 'H7R 3R7', 'CA', '79'),('8322 Cactus Drive', '', 'Meadow Lake', 'SK', 'S9X 2R6', 'CA', '79')]
    email_prefix = ["jeramiah.bell","gaige.west","alyvia.hughes","muhammad.hunt","oswaldo.salazar","hudson.santana","jamir.wagner","dylan.stevenson","camila.hernandez","kobe.stanton","zachary.camacho","coby.morris","kylee.fuentes","ana.mueller","patricia.roman","alonzo.hebert","nicolas.howe","anika.hopkins","adyson.dillon","lillian.houston","jabari.black","charles.evans","brandon.chan","robert.newman","clare.cooke","carleigh.mcdonald","tristian.malone","xzavier.sanders","jazmine.henderson","kolton.phelps","amelia.reilly","ireland.fischer","abram.bautista","lorenzo.ortega","melany.ayers","ali.tyler","amiah.mcintyre","misael.bass","kathryn.abbott","lauren.robbins","porter.bryan","karlee.walsh","abdullah.west","ismael.pacheco","leonel.decker","cristopher.booth","james.arroyo","easton.silva","paisley.werner","lawrence.chang","jeffery.swanson","tyler.buchanan","ally.ramsey","skyla.lamb","guillermo.kemp","beckham.barnes","yasmine.mccann","yuliana.velazquez","alia.steele","skyler.hatfield","nelson.white","xiomara.bean","reynaldo.burns","stephen.mcdonald","bridget.mata","cason.frank","linda.gaines","aryana.hull","kaylah.mclean","kaden.luna","miguel.holder","kadyn.bowen","dennis.andrews","maritza.sanford","jaylen.decker","jayvon.lucero","aarav.ruiz","barbara.riley","katrina.ellis","marcel.nelson","sandra.moses","zackery.sexton","jaylene.gregory","tyson.garner","boston.arias","mylee.weeks","jaylin.hubbard","jada.oconnell","aylin.price","kaleigh.wilkins","tate.heath","aurora.cooke","brooklynn.mcconnell","hailie.hinton","todd.gaines","leonidas.mueller","nico.mccall","john.vaughan","alana.gill","aliya.frazier"]
    email_provider = ["hotmail.com", "yahoo.com", "gmail.com", "msn.com", "aol.com", "outlook.com"]
   
    cur.execute("SELECT COUNT(1) FROM fake_products")
    num_products = cur.fetchone()[0]
    for x in range(n):
        i = random.randint(0, len(names)-1)
        name = names[i]
        address = addresses[i]
        buyer_email = "%s%s@%s" % (email_prefix[i],random.randint(100, 999),random.choice(email_provider))
        data = {
                'name': name,
                'receipt_id': receipt_id,
                'first_line': address[0],
                'second_line': address[1],
                'city': address[2],
                'state': address[3],
                'zip': address[4],
                'country_id': address[6],
                'buyer_email': buyer_email
               }
        cur.execute("""
            INSERT INTO fake_receipts (name, receipt_id, first_line, second_line, city, state, zip, country_id, buyer_email)
            VALUES ('%(name)s', %(receipt_id)s, '%(first_line)s', '%(second_line)s', '%(city)s', '%(state)s', '%(zip)s', %(country_id)s, '%(buyer_email)s')
        """ % data)
        create_fake_transactions(cur, receipt_id, num_products, max_num_items, max_quantity)
        receipt_id += 1

def create_fake_transactions(cur, receipt_id, num_products, max_num_items, max_quantity):
    num_items = random.randint(1, max_num_items)
    for i in range(num_items):
        listing_product_id = random.randint(1, num_products+1)
        quantity = random.randint(1, max_quantity)
        cur.execute("""
            INSERT INTO fake_transactions(receipt_id, listing_id, product_id, quantity)
            VALUES (%s, %s, %s, %s)
        """ % (receipt_id, listing_product_id, listing_product_id, quantity))

from .db import get_data_dict
def fetch_shipping_costs(cur):
    cur.execute("DELETE FROM shipping_costs")
    boxes = get_data_dict(cur, "SELECT * FROM boxes")
    # US cost is a function of weight_kg
    us_costs = {'0.1': 7.29,'0.2': 8.92,'0.3': 11.71,'0.4': 11.71,'0.5': 11.71,'0.6': 17.17,'0.7': 17.17,'0.8': 17.17,'0.9': 17.17,'1.0': 17.17,'1.1': 20,'1.2': 20,'1.3': 20,'1.4': 20,'1.5': 20,'1.6': 22.43,'1.7': 22.43,'1.8': 22.43,'1.9': 22.43,'2.0': 22.43}
    data_rows = []
    for i in range(1, 21):
        weight_kg = "%.1f" % round(i/10.0, 1)
        cost_us = us_costs[weight_kg]
        for box in boxes:
            cost_ca = cp_request(weight_kg, box['length_cm'], box['width_cm'], box['height_cm'])
            data_row = {'box_id': box['id'], 'weight_kg': weight_kg, 'cost_ca': cost_ca, 'cost_us': cost_us}
            data_rows.append(data_row)
    cur.execute("""
                INSERT INTO shipping_costs (box_id, weight_kg, cost_ca, cost_us)
                VALUES %s
    """ % ',\n'.join(["(%(box_id)s, '%(weight_kg)s', %(cost_ca)s, %(cost_us)s)" % data_row for data_row in data_rows]))

import requests
import time
def cp_request(weight_kg, length_cm, width_cm, height_cm):
    payload = """<?xml version="1.0" encoding="UTF-8"?>
<mailing-scenario xmlns="http://www.canadapost.ca/ws/ship/rate-v4">
    <customer-number>0009486299</customer-number>
    <parcel-characteristics>
        <weight>%s</weight>
        <dimensions>
            <length>%.1f</length>
            <width>%.1f</width>
            <height>%.1f</height>
        </dimensions>
    </parcel-characteristics>
    <services>
        <service-code>DOM.EP</service-code>
    </services>
    <origin-postal-code>M1H2A0</origin-postal-code>
    <destination>
        <domestic>
            <postal-code>V6J3Y2</postal-code>
            <!-- V6J3Y2-->
        </domestic>
    </destination>
</mailing-scenario>
    """ % (weight_kg, length_cm, width_cm, height_cm)
    headers = {
      'Accept': 'application/vnd.cpc.ship.rate-v4+xml',
      'Content-Type': 'application/vnd.cpc.ship.rate-v4+xml',
      'Accept-language': 'en-CA',
      'Authorization': 'Basic MDQzZmVjOGE1NjYxZDA4Mzo0MjliMGJiYmM0YWRmNGZmYmViNDAw'
    }
    url = "https://ct.soa-gw.canadapost.ca/rs/ship/price"
    response = requests.request("POST", url, headers=headers, data = payload)
    amount_due = None
    try:
        amount_due = response.text.split('<due>')[1].split('</due>')[0]
    except:
        print(response.text)
    time.sleep(2.5)
    return amount_due

def super_build_schema(db_file):
    conn = get_connection(db_file)
    cur = conn.cursor()
    build_schema(cur)
    create_test_data(cur, num_printers, num_fake_receipts, max_num_items, max_quantity)
    update_package_configs(cur)
    #fetch_shipping_costs(cur)
    conn.commit()
    

if __name__ == '__main__':
    super_build_schema(DB_FILE)
    super_build_schema(DB_DEBUG_FILE)