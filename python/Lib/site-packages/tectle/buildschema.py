import sqlite3
from sqlite3 import Error
from .packaging import update_package_configs

DB_FILE = r"db\printer.db"
DB_DEBUG_FILE = r"db\printer_debug.db"

def get_connection(db_file):
    conn = None
    try:
        conn = sqlite3.connect(db_file)
    except Error as e:
        print(e)
    return conn

def build_schema(cur):
    cur.execute("DROP TABLE IF EXISTS printers");
    cur.execute("""
        CREATE TABLE printers (
            id          INTEGER PRIMARY KEY,
            name        TEXT,
            printer_ip  TEXT    NOT NULL,
            status      INTEGER NOT NULL DEFAULT 0,
            ui_change   INTEGER DEFAULT 0,
            color       TEXT DEFAULT 'White',
            gcode       TEXT
        );
    """)
    cur.execute("DROP TABLE IF EXISTS printer_queue");
    cur.execute("""
        CREATE TABLE printer_queue (
            id          INTEGER PRIMARY KEY,
            printer_id  INTEGER,
            sku         TEXT,
            receipt_id  TEXT,
            status      INTEGER NOT NULL DEFAULT 0,
            progress    INTEGER NOT NULL DEFAULT 0,
            priority    INTEGER,
            FOREIGN KEY (printer_id) REFERENCES printers(id)
        );
    """)
    cur.execute("DROP TABLE IF EXISTS unassigned_queue");
    cur.execute("DROP TABLE IF EXISTS completed_queue");
    cur.execute("DROP TABLE IF EXISTS fake_printers");
    cur.execute("""
        CREATE TABLE fake_printers (
            id          INTEGER PRIMARY KEY,
            printer_ip  TEXT,
            status      TEXT,
            current_sku TEXT,
            start_time  TIMESTAMP,
            finish_time TIMESTAMP,
            last_resp   TEXT
        );
    """)
    cur.execute("DROP TABLE IF EXISTS fake_receipts");
    cur.execute("""
        CREATE TABLE fake_receipts (
            id           INTEGER PRIMARY KEY,
            name         TEXT,
            receipt_id   TEXT,
            first_line   TEXT,
            second_line  TEXT,
            city         TEXT,
            state        TEXT,
            zip          TEXT,
            country_id   INTEGER, /* 79 is Canada & 209 is United States */
            buyer_email  TEXT,
            status       INTEGER DEFAULT 0,
            source       TEXT, /* Etsy or Webflow */
            creation_tsz INTEGER
        );
    """)
    cur.execute("DROP TABLE IF EXISTS fake_transactions");
    cur.execute("""
        CREATE TABLE fake_transactions (
            id          INTEGER PRIMARY KEY,
            receipt_id  TEXT,
            listing_id  INTEGER,
            product_id  INTEGER,
            quantity    INTEGER
        );
    """)
    cur.execute("DROP TABLE IF EXISTS fake_products");
    cur.execute("""
        CREATE TABLE fake_products (
            id          INTEGER PRIMARY KEY,
            sku         TEXT
        );
    """)
    skus = ['PD750001WTM', 'PD750001WTM ,  AE900001WT', 'PD750001BKM', 'PD750001BKM , AE900001BK', 'PD750001SKM', 'PD750001SKM , AE900001SK', 'PH000001WTM', 'PH000001WTM , AK000001WT', 'PH000001BKM', 'PH000001BKM , AK000001BK', 'PH000001SKM', 'PH000001SKM , AK000001SK', 'PK000001WTM', 'PK000001WTM , AK000001WT', 'PK000001BKM', 'PK000001BKM , AK000001BK', 'PK000001SKM', 'PK000001SKM , AK000001SK', 'PD750002WTM', 'PD750002WTM , AE900001WT', 'PD750002BKM', 'PD750002BKM , AE900001BK', 'PD750002SKM', 'PD750002SKM , AE900001SK', 'PH000002WTM', 'PH000002WTM , AK000001WT', 'PH000002BKM', 'PH000002BKM , AK000001BK', 'PH000002SKM', 'PH000002SKM , AK000001SK', 'PK000002WTM', 'PK000002WTM , AK000001WT', 'PK000002BKM', 'PK000002BKM , AK000001BK', 'PK000002SKM', 'PK000002SKM , AK000001SK', 'PD750003WTM', 'PD750003WTM , AE900001WT', 'PD750003BKM', 'PD750003BKM , AE900001BK', 'PD750003SKM', 'PD750003SKM , AE900001SK', 'PH000003WTM', 'PH000003WTM , AK000001WT', 'PH000003BKM', 'PH000003BKM , AK000001BK', 'PH000003SKM', 'PH000003SKM , AK000001SK', 'PK000003WTM', 'PK000003WTM , AK000001WT', 'PK000003BKM', 'PK000003BKM , AK000001BK', 'PK000003SKM', 'PK000003SKM , AK000001SK', 'PD750004WTM', 'PD750004WTM , AE900001WT', 'PD750004BKM', 'PD750004BKM , AE900001BK', 'PD750004SKM', 'PD750004SKM , AE900001SK', 'PH000004WTM', 'PH000004WTM , AK000001WT', 'PH000004BKM', 'PH000004BKM , AK000001BK', 'PH000004SKM', 'PH000004SKM , AK000001SK', 'PK000004WTM', 'PK000004WTM , AK000001WT', 'PK000004BKM', 'PK000004BKM , AK000001BK', 'PK000004SKM', 'PK000004SKM , AK000001SK']
    fake_skus = ['', 'doodoo', 'heyman', 'ur', 'PD750001XYM', 'AE900001WT', 'PE750001WTM']
    skus.extend(fake_skus)
    cur.execute("""
        INSERT INTO fake_products (sku)
        VALUES %s
    """ % ',\n'.join(["('%s')" % sku for sku in skus]))
    cur.execute("DROP TABLE IF EXISTS receipts");
    cur.execute("""
        CREATE TABLE receipts (
            id             INTEGER PRIMARY KEY,
            name           TEXT,
            receipt_id     TEXT,
            first_line     TEXT,
            second_line    TEXT,
            city           TEXT,
            state          TEXT,
            zip            TEXT,
            country        TEXT,
            country_id     INTEGER, /* 79 is Canada & 209 is United States */
            buyer_email    TEXT,
            status         INTEGER DEFAULT 0, /* 0 is PENDING */
            shipping_label TEXT,
            source         TEXT,
            order_time     INTEGER, /* epoch time in seconds */
            group_id       TEXT     /* unique id for contract shipping */
        );
    """)
    cur.execute("DROP TABLE IF EXISTS boxes");
    cur.execute("""
        CREATE TABLE boxes (
            id          INTEGER PRIMARY KEY,
            type        TEXT, /* A, B, C */
            length_cm   REAL,
            width_cm    REAL,
            height_cm   REAL,
            length_in   INTEGER, /* inch measurements are rounded */
            width_in    INTEGER,
            height_in   INTEGER,
            cost        REAL,
            weight_kg   REAL
        );
    """)
    cur.execute("""
        INSERT INTO boxes (type, length_cm, width_cm, height_cm, length_in, width_in, height_in, cost, weight_kg)
        VALUES ('A',22.9,22.9,22.9,9,9,9,0.65,0.0),
               ('B',43.2,22.9,22.9,17,9,9,1.69,0.0),
               ('C',30.5,28,28,12,11,11,1.59,0.0)
    """)
    cur.execute("DROP TABLE IF EXISTS package_classes");
    cur.execute("""
        CREATE TABLE package_classes (
            id        INTEGER PRIMARY KEY,
            class     TEXT, /* medium, large, xlarge, set */
            weight_kg REAL,
            cost      REAL
        );
    """)
    cur.execute("""
        INSERT INTO package_classes (class, weight_kg, cost)
        VALUES ('Medium',0.2,1.99),
               ('Large',0.5,3.99),
               ('XLarge',1.0,3.99),
               ('Set',1.0,3.99)
    """)
    cur.execute("DROP TABLE IF EXISTS products");
    cur.execute("""
        CREATE TABLE products (
            id                INTEGER PRIMARY KEY,
            sku               TEXT,
            design_id         INTEGER,
            category          TEXT,
            name              TEXT,
            color             TEXT,
            size              REAL,
            bottom            TEXT,
            package_class_id  INTEGER,
            FOREIGN KEY (package_class_id) REFERENCES package_classes(id)
        );
    """)
    cur.execute("DROP TABLE IF EXISTS packaging");
    cur.execute("""
        CREATE TABLE packaging (
            id                INTEGER PRIMARY KEY,
            package_id        INTEGER,
            box_id            INTEGER,
            package_class_id  INTEGER,
            quantity          INTEGER,
            FOREIGN KEY (box_id) REFERENCES boxes(id),
            FOREIGN KEY (package_class_id) REFERENCES package_classes(id)
        );
    """)
    cur.execute("""
    INSERT INTO packaging (package_id, box_id, package_class_id, quantity)
VALUES (1,1,1,2),
(1,1,2,0),
(1,1,3,0),
(1,1,4,0),
(2,1,1,0),
(2,1,2,1),
(2,1,3,0),
(2,1,4,0),
(3,2,1,3),
(3,2,2,0),
(3,2,3,0),
(3,2,4,0),
(4,2,1,2),
(4,2,2,1),
(4,2,3,0),
(4,2,4,0),
(5,2,1,0),
(5,2,2,2),
(5,2,3,0),
(5,2,4,0),
(6,2,1,0),
(6,2,2,0),
(6,2,3,0),
(6,2,4,1),
(7,3,1,6),
(7,3,2,0),
(7,3,3,0),
(7,3,4,0),
(8,3,1,0),
(8,3,2,1),
(8,3,3,0),
(8,3,4,0),
(9,3,1,0),
(9,3,2,0),
(9,3,3,1),
(9,3,4,0),
(10,3,1,1),
(10,3,2,0),
(10,3,3,1),
(10,3,4,0)
    """)
    cur.execute("DROP TABLE IF EXISTS package_config");
    cur.execute("DROP TABLE IF EXISTS package_configs");
    cur.execute("""
        CREATE TABLE package_configs (
            id                INTEGER PRIMARY KEY,
            package_id        INTEGER,
            box_id            INTEGER,
            package_class_id  INTEGER,
            quantity          INTEGER,
            cost_ca           REAL,
            cost_us           REAL,
            FOREIGN KEY (box_id) REFERENCES boxes(id),
            FOREIGN KEY (package_class_id) REFERENCES package_classes(id)
        );
    """)
    cur.execute("DROP TABLE IF EXISTS shipping_costs");
    cur.execute("""
        CREATE TABLE shipping_costs (
            id        INTEGER PRIMARY KEY,
            box_id    INTEGER,
            weight_kg TEXT,
            cost_ca   REAL,
            cost_us   REAL,
            FOREIGN KEY (box_id) REFERENCES boxes(id)
        );
    """)

    cur.execute("""
        INSERT INTO shipping_costs (box_id, weight_kg, cost_ca, cost_us)
        VALUES
(1,'0.1',20.84,7.29),
(2,'0.1',25.46,7.29),
(3,'0.1',25.46,7.29),
(1,'0.2',20.84,8.92),
(2,'0.2',25.46,8.92),
(3,'0.2',25.46,8.92),
(1,'0.3',20.84,11.71),
(2,'0.3',25.46,11.71),
(3,'0.3',25.46,11.71),
(1,'0.4',20.84,11.71),
(2,'0.4',25.46,11.71),
(3,'0.4',25.46,11.71),
(1,'0.5',20.84,11.71),
(2,'0.5',25.46,11.71),
(3,'0.5',25.46,11.71),
(1,'0.6',20.84,17.17),
(2,'0.6',25.46,17.17),
(3,'0.6',25.46,17.17),
(1,'0.7',20.84,17.17),
(2,'0.7',25.46,17.17),
(3,'0.7',25.46,17.17),
(1,'0.8',20.84,17.17),
(2,'0.8',25.46,17.17),
(3,'0.8',25.46,17.17),
(1,'0.9',20.84,17.17),
(2,'0.9',25.46,17.17),
(3,'0.9',25.46,17.17),
(1,'1.0',20.84,17.17),
(2,'1.0',25.46,17.17),
(3,'1.0',25.46,17.17),
(1,'1.1',20.84,20.0),
(2,'1.1',25.46,20.0),
(3,'1.1',25.46,20.0),
(1,'1.2',20.84,20.0),
(2,'1.2',25.46,20.0),
(3,'1.2',25.46,20.0),
(1,'1.3',20.84,20.0),
(2,'1.3',25.46,20.0),
(3,'1.3',25.46,20.0),
(1,'1.4',20.84,20.0),
(2,'1.4',25.46,20.0),
(3,'1.4',25.46,20.0),
(1,'1.5',20.84,20.0),
(2,'1.5',25.46,20.0),
(3,'1.5',25.46,20.0),
(1,'1.6',20.84,22.43),
(2,'1.6',25.46,22.43),
(3,'1.6',25.46,22.43),
(1,'1.7',20.84,22.43),
(2,'1.7',25.46,22.43),
(3,'1.7',25.46,22.43),
(1,'1.8',20.84,22.43),
(2,'1.8',25.46,22.43),
(3,'1.8',25.46,22.43),
(1,'1.9',20.84,22.43),
(2,'1.9',25.46,22.43),
(3,'1.9',25.46,22.43),
(1,'2.0',20.84,22.43),
(2,'2.0',25.46,22.43),
(3,'2.0',25.46,22.43)
    """)
    cur.execute("DROP TABLE IF EXISTS receipt_packages");
    cur.execute("""
        CREATE TABLE receipt_packages (
            id                INTEGER PRIMARY KEY,
            receipt_id        TEXT,
            package_id        INTEGER,
            box_id            INTEGER,
            sku               TEXT,
            quantity          INTEGER,
            label_url         TEXT,
            tracking_pin      TEXT,
            filename          TEXT,
            FOREIGN KEY (box_id) REFERENCES boxes(id)
        );
    """)
    cur.execute("DROP TABLE IF EXISTS config")
    cur.execute("""
        CREATE TABLE config (
            id    INTEGER PRIMARY KEY,
            key   TEXT,
            value TEXT
        );
    """)
    cur.execute("""
        INSERT INTO config (key, value)
        VALUES ('oauth_token', ''),
               ('oauth_verifier', ''),
               ('oauth_token_secret', '')
    """)
    
    cur.execute("DROP TABLE IF EXISTS inventory");
    cur.execute("""
        CREATE TABLE inventory (
            id                INTEGER PRIMARY KEY,
            product_id        INTEGER,
            sku               TEXT,
            quantity          INTEGER,
            FOREIGN KEY (product_id) REFERENCES products(id)
        );
    """)
    
    cur.execute("DROP TABLE IF EXISTS manifests");
    cur.execute("""
        CREATE TABLE manifests (
            id                INTEGER PRIMARY KEY,
            date_key          TEXT,
            group_id          TEXT,
            status            INTEGER NOT NULL DEFAULT 0, /* 0 is unprocessed, 1 is completed */
            filename          TEXT
        );
    """)
    
    cur.execute("DROP TABLE IF EXISTS manifest_links");
    cur.execute("""
        CREATE TABLE manifest_links (
            id                INTEGER PRIMARY KEY,
            manifest_id       INTEGER,
            get_url           TEXT,
            pdf_url           TEXT,
            filename          TEXT,
            FOREIGN KEY (manifest_id) REFERENCES manifests(id)
        );
    """)
    
    cur.execute("DROP TABLE IF EXISTS colors");
    cur.execute("""
        CREATE TABLE colors (
            id          INTEGER PRIMARY KEY,
            color       TEXT,
            color_abbr  TEXT
        );
    """)
    cur.execute("""
        INSERT INTO colors (color, color_abbr)
        VALUES ('Red', 'RT'),
               ('Blue', 'BT'),
               ('White', 'WT'),
               ('Black', 'KT')
    """)
    
import random

def create_printer_queue(cur, printer_id, receipt_id):
    skus = ["PD750001WTM", "PH000007WTM", "AE900001WT", "AJ000001WT"]
    max_num = 10
    num_choices = random.randint(1, max_num)
    for i in range(num_choices):
        sku = random.choice(skus)
        cur.execute("""
            INSERT INTO printer_queue (printer_id, sku, receipt_id, priority)
            VALUES (%(printer_id)s, '%(sku)s', '%(receipt_id)s', %(priority)s)
        """ % {'printer_id': printer_id,
               'sku': sku,
               'receipt_id': receipt_id,
               'priority': i})
        receipt_id += random.randint(0, 1)
    return receipt_id

def create_printers(cur, n):
    template_ip = "192.168.0.%s"
    start = 101
    #receipt_id = random.randint(1e8, 2e8)
    for x in range(start, start+n):
        printer_ip = template_ip % x
        cur.execute("INSERT INTO printers (printer_ip, color) VALUES ('%s', 'White')" % printer_ip)
        printer_id = cur.lastrowid
        #receipt_id = create_printer_queue(cur, printer_id, receipt_id)
        #receipt_id += 1
        cur.execute("INSERT INTO fake_printers (printer_ip) VALUES ('%s')" % printer_ip)

def create_test_data(cur, num_printers, num_fake_receipts, max_num_items, max_quantity):
    create_printers(cur, num_printers)
    receipt_id = random.randint(1e8, 2e8)
    create_fake_receipts(cur, receipt_id, num_fake_receipts, max_num_items, max_quantity)

from datetime import datetime, timedelta
def get_random_date():
    newdate = datetime.now() - timedelta(days=random.randint(5, 100),
                                            hours=random.randint(1, 23),
                                            seconds=random.randint(0, 86400))
    return int(newdate.timestamp())

def create_fake_receipts(cur, receipt_id, n, max_num_items, max_quantity):
    names = ["Jeramiah Bell","Gaige West","Alyvia Hughes","Muhammad Hunt","Oswaldo Salazar","Hudson Santana","Jamir Wagner","Dylan Stevenson","Camila Hernandez","Kobe Stanton","Zachary Camacho","Coby Morris","Kylee Fuentes","Ana Mueller","Patricia Roman","Alonzo Hebert","Nicolas Howe","Anika Hopkins","Adyson Dillon","Lillian Houston","Jabari Black","Charles Evans","Brandon Chan","Robert Newman","Clare Cooke","Carleigh Mcdonald","Tristian Malone","Xzavier Sanders","Jazmine Henderson","Kolton Phelps","Amelia Reilly","Ireland Fischer","Abram Bautista","Lorenzo Ortega","Melany Ayers","Ali Tyler","Amiah Mcintyre","Misael Bass","Kathryn Abbott","Lauren Robbins","Porter Bryan","Karlee Walsh","Abdullah West","Ismael Pacheco","Leonel Decker","Cristopher Booth","James Arroyo","Easton Silva","Paisley Werner","Lawrence Chang","Jeffery Swanson","Tyler Buchanan","Ally Ramsey","Skyla Lamb","Guillermo Kemp","Beckham Barnes","Yasmine Mccann","Yuliana Velazquez","Alia Steele","Skyler Hatfield","Nelson White","Xiomara Bean","Reynaldo Burns","Stephen Mcdonald","Bridget Mata","Cason Frank","Linda Gaines","Aryana Hull","Kaylah Mclean","Kaden Luna","Miguel Holder","Kadyn Bowen","Dennis Andrews","Maritza Sanford","Jaylen Decker","Jayvon Lucero","Aarav Ruiz","Barbara Riley","Katrina Ellis","Marcel Nelson","Sandra Moses","Zackery Sexton","Jaylene Gregory","Tyson Garner","Boston Arias","Mylee Weeks","Jaylin Hubbard","Jada Oconnell","Aylin Price","Kaleigh Wilkins","Tate Heath","Aurora Cooke","Brooklynn Mcconnell","Hailie Hinton","Todd Gaines","Leonidas Mueller","Nico Mccall","John Vaughan","Alana Gill","Aliya Frazier"]
    #addresses = [('240 Beverly Dr', '', 'Beverly Hills', 'CA', '90212', 'US', '209'),('176 Bedford', '', 'Calgary', 'AB', 'T3K2M9', 'CA', '79')]
    addresses = [('176 Bedford', '', 'Calgary', 'AB', 'T3K2M9', 'CA', '79'), ('240 Beverly Dr', '', 'Beverly Hills', 'CA', '90212', 'US', '209'), ('19 Leicester Square', 'West End', 'London', 'England', 'WC2H 7LE', 'GB', '105'), ('197 Avenue Jean Jaurès', '', 'Drancy', '', '93700', 'FR', '103')]
    email_prefix = ["jeramiah.bell","gaige.west","alyvia.hughes","muhammad.hunt","oswaldo.salazar","hudson.santana","jamir.wagner","dylan.stevenson","camila.hernandez","kobe.stanton","zachary.camacho","coby.morris","kylee.fuentes","ana.mueller","patricia.roman","alonzo.hebert","nicolas.howe","anika.hopkins","adyson.dillon","lillian.houston","jabari.black","charles.evans","brandon.chan","robert.newman","clare.cooke","carleigh.mcdonald","tristian.malone","xzavier.sanders","jazmine.henderson","kolton.phelps","amelia.reilly","ireland.fischer","abram.bautista","lorenzo.ortega","melany.ayers","ali.tyler","amiah.mcintyre","misael.bass","kathryn.abbott","lauren.robbins","porter.bryan","karlee.walsh","abdullah.west","ismael.pacheco","leonel.decker","cristopher.booth","james.arroyo","easton.silva","paisley.werner","lawrence.chang","jeffery.swanson","tyler.buchanan","ally.ramsey","skyla.lamb","guillermo.kemp","beckham.barnes","yasmine.mccann","yuliana.velazquez","alia.steele","skyler.hatfield","nelson.white","xiomara.bean","reynaldo.burns","stephen.mcdonald","bridget.mata","cason.frank","linda.gaines","aryana.hull","kaylah.mclean","kaden.luna","miguel.holder","kadyn.bowen","dennis.andrews","maritza.sanford","jaylen.decker","jayvon.lucero","aarav.ruiz","barbara.riley","katrina.ellis","marcel.nelson","sandra.moses","zackery.sexton","jaylene.gregory","tyson.garner","boston.arias","mylee.weeks","jaylin.hubbard","jada.oconnell","aylin.price","kaleigh.wilkins","tate.heath","aurora.cooke","brooklynn.mcconnell","hailie.hinton","todd.gaines","leonidas.mueller","nico.mccall","john.vaughan","alana.gill","aliya.frazier"]
    email_provider = ["hotmail.com", "yahoo.com", "gmail.com", "msn.com", "aol.com", "outlook.com"]
    sources = ["Etsy", "Webflow"]
    
    cur.execute("SELECT COUNT(1) FROM fake_products")
    num_products = cur.fetchone()[0]
    for x in range(n):
        i = random.randint(0, len(names)-1)
        name = names[i]
        address = random.choice(addresses)
        buyer_email = "%s%s@%s" % (email_prefix[i],random.randint(100, 999),random.choice(email_provider))
        source = random.choice(sources)
        src_receipt_id = str(receipt_id)
        if source == 'Webflow':
            new_receipt_id = ''
            for c in src_receipt_id[:-3]:
                new_receipt_id += chr(ord('a') + int(c))
            new_receipt_id += '-' + src_receipt_id[-3:]
            src_receipt_id = new_receipt_id
        data = {
                'name': name,
                'receipt_id': src_receipt_id,
                'first_line': address[0],
                'second_line': address[1],
                'city': address[2],
                'state': address[3],
                'zip': address[4],
                'country_id': address[6],
                'buyer_email': buyer_email,
                'source': source,
                'creation_tsz': get_random_date()
               }
        cur.execute("""
            INSERT INTO fake_receipts (name, receipt_id, first_line, second_line, city, state, zip, country_id, buyer_email, source, creation_tsz)
            VALUES ('%(name)s', '%(receipt_id)s', '%(first_line)s', '%(second_line)s', '%(city)s', '%(state)s', '%(zip)s', %(country_id)s, '%(buyer_email)s', '%(source)s', %(creation_tsz)s)
        """ % data)
        create_fake_transactions(cur, src_receipt_id, num_products, max_num_items, max_quantity)
        receipt_id += 1

def create_fake_transactions(cur, receipt_id, num_products, max_num_items, max_quantity):
    num_items = random.randint(1, max_num_items)
    for i in range(num_items):
        listing_product_id = random.randint(1, num_products)
        quantity = random.randint(1, max_quantity)
        cur.execute("""
            INSERT INTO fake_transactions(receipt_id, listing_id, product_id, quantity)
            VALUES ('%s', %s, %s, %s)
        """ % (receipt_id, listing_product_id, listing_product_id, quantity))

from .db import get_data_dict
def fetch_shipping_costs(cur):
    cur.execute("DELETE FROM shipping_costs")
    boxes = get_data_dict(cur, "SELECT * FROM boxes")
    # US cost is a function of weight_kg
    us_costs = {'0.1': 7.29,'0.2': 8.92,'0.3': 11.71,'0.4': 11.71,'0.5': 11.71,'0.6': 17.17,'0.7': 17.17,'0.8': 17.17,'0.9': 17.17,'1.0': 17.17,'1.1': 20,'1.2': 20,'1.3': 20,'1.4': 20,'1.5': 20,'1.6': 22.43,'1.7': 22.43,'1.8': 22.43,'1.9': 22.43,'2.0': 22.43}
    data_rows = []
    for i in range(1, 21):
        weight_kg = "%.1f" % round(i/10.0, 1)
        cost_us = us_costs[weight_kg]
        for box in boxes:
            cost_ca = cp_request(weight_kg, box['length_cm'], box['width_cm'], box['height_cm'])
            data_row = {'box_id': box['id'], 'weight_kg': weight_kg, 'cost_ca': cost_ca, 'cost_us': cost_us}
            data_rows.append(data_row)
    cur.execute("""
                INSERT INTO shipping_costs (box_id, weight_kg, cost_ca, cost_us)
                VALUES %s
    """ % ',\n'.join(["(%(box_id)s, '%(weight_kg)s', %(cost_ca)s, %(cost_us)s)" % data_row for data_row in data_rows]))

import requests
import time
def cp_request(weight_kg, length_cm, width_cm, height_cm):
    payload = """<?xml version="1.0" encoding="UTF-8"?>
<mailing-scenario xmlns="http://www.canadapost.ca/ws/ship/rate-v4">
    <customer-number>0009486299</customer-number>
    <parcel-characteristics>
        <weight>%s</weight>
        <dimensions>
            <length>%.1f</length>
            <width>%.1f</width>
            <height>%.1f</height>
        </dimensions>
    </parcel-characteristics>
    <services>
        <service-code>DOM.EP</service-code>
    </services>
    <origin-postal-code>M1H2E7</origin-postal-code>
    <destination>
        <domestic>
            <postal-code>M1H2E6</postal-code>
            <!-- V6J3Y2-->
        </domestic>
    </destination>
</mailing-scenario>
    """ % (weight_kg, length_cm, width_cm, height_cm)
    headers = {
      'Accept': 'application/vnd.cpc.ship.rate-v4+xml',
      'Content-Type': 'application/vnd.cpc.ship.rate-v4+xml',
      'Accept-language': 'en-CA',
      'Authorization': 'Basic MDQzZmVjOGE1NjYxZDA4Mzo0MjliMGJiYmM0YWRmNGZmYmViNDAw'
    }
    url = "https://ct.soa-gw.canadapost.ca/rs/ship/price"
    response = requests.request("POST", url, headers=headers, data = payload)
    amount_due = None
    try:
        amount_due = response.text.split('<due>')[1].split('</due>')[0]
    except:
        print(response.text)
    time.sleep(1.25)
    return amount_due

def super_build_schema(db_file):
    conn = get_connection(db_file)
    cur = conn.cursor()
    build_schema(cur)
    create_test_data(cur, num_printers, num_fake_receipts, max_num_items, max_quantity)
    update_package_configs(cur)
    #fetch_shipping_costs(cur)
    conn.commit()
    

if __name__ == '__main__':
    super_build_schema(DB_FILE)
    super_build_schema(DB_DEBUG_FILE)