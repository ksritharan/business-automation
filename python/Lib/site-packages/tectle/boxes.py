from .db import get_connection, get_data_dict
from flask import render_template, url_for, make_response
import requests
import traceback
from .buildschema import fetch_shipping_costs
import logging
logger = logging.getLogger()

def do_boxes():
    context = {'boxes': True}
    conn = get_connection()
    cur = conn.cursor()
    query = """
        SELECT *
          FROM boxes
    """
    boxes = get_data_dict(cur, query)
    
    query = """
        SELECT b.type,
               s.*
          FROM shipping_costs s
               JOIN boxes b ON b.id = s.box_id
         ORDER BY s.weight_kg, id
    """
    rows = get_data_dict(cur, query)
    shipping_costs = []
    completed_set = set()
    data_row = dict()
    box_types_set = set()
    box_types = []
    for row in rows:
        if row['weight_kg'] not in completed_set:
            if data_row:
                shipping_costs.append(data_row)
            completed_set.add(row['weight_kg'])
            data_row = dict()
            data_row['weight_kg'] = row['weight_kg']
            data_row['costs'] = []
        if row['type'] not in box_types_set:
            box_types_set.add(row['type'])
            box_types.append(row['type'])
        data_row['costs'].append(("%.2f" % row['cost_ca'], "%.2f" % row['cost_us']))
    shipping_costs.append(data_row)  
        
    context['boxes'] = boxes
    context['shipping_costs'] = shipping_costs
    context['box_types'] = box_types
    return render_template('boxes.html', **context)
    
def do_add_boxes(box_data):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        query = """
            SELECT COUNT(1)
              FROM boxes
             WHERE type = '%(type)s'
        """ % box_data
        cur.execute(query)
        exists = cur.fetchone()[0] > 0
        if exists:
            response = make_response('box type already exists', 400)
        else:
            query = """
                INSERT INTO boxes (type, length_cm, width_cm, height_cm, length_in, width_in, height_in, cost, weight_kg)
                VALUES ('%(type)s', %(length_cm)s, %(width_cm)s, %(height_cm)s, %(length_in)s, %(width_in)s, %(height_in)s, %(cost)s, %(weight_kg)s)
            """ % box_data
            cur.execute(query)
            conn.commit()
            response = make_response('success', 200)
    except Exception as e:
        logger.exception(e)
        tb = traceback.format_exc()
        response = make_response(tb, 400)
    return response

def do_edit_boxes(box_data):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        query = """
            SELECT COUNT(1)
              FROM boxes
             WHERE type = '%(type)s'
               AND id <> %(id)s
        """ % box_data
        cur.execute(query)
        exists = cur.fetchone()[0] > 0
        if exists:
            response = make_response('box type already exists', 400)
        else:
            query = """
                UPDATE boxes
                   SET type = '%(type)s',
                       length_cm = %(length_cm)s, 
                       width_cm = %(width_cm)s, 
                       height_cm = %(height_cm)s, 
                       length_in = %(length_in)s, 
                       width_in = %(width_in)s, 
                       height_in = %(height_in)s, 
                       cost = %(cost)s, 
                       weight_kg = %(weight_kg)s
                WHERE id = %(id)s
            """ % box_data
            cur.execute(query)
            conn.commit()
            response = make_response('success', 200)
    except Exception as e:
        logger.exception(e)
        tb = traceback.format_exc()
        response = make_response(tb, 400)
    return response

def do_remove_boxes(box_id):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        query = """
            DELETE FROM boxes
             WHERE id = %s
        """ % box_id
        cur.execute(query)
        conn.commit()
        response = make_response('success', 200)
    except Exception as e:
        logger.exception(e)
        tb = traceback.format_exc()
        response = make_response(tb, 400)
    
    return response
    
def do_shipping_costs():
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        fetch_shipping_costs(cur)
        conn.commit()
        response = make_response('success', 200)
    except Exception as e:
        logger.exception(e)
        tb = traceback.format_exc()
        response = make_response(tb, 400)
    return response
 
def do_edit_box_inventory(inv_data):
    response = None
    conn = get_connection()
    cur = conn.cursor()
    try:
        query = """
            SELECT COUNT(1)
              FROM boxes
             WHERE id = %(id)s
        """ % inv_data
        cur.execute(query)
        exists = cur.fetchone()[0] > 0
        if not exists:
            response = make_response('box does not exist', 400)
        else:
            query = """
                UPDATE boxes
                   SET quantity = %(quantity)s
                 WHERE id = %(id)s
            """ % inv_data
            cur.execute(query)
            conn.commit()
            response = make_response('success', 200)
    except Exception as e:
        logger.exception(e)
        tb = traceback.format_exc()
        response = make_response(tb, 400)
    return response   