from .db import get_connection, get_data_dict
from flask import render_template, url_for, make_response
import requests
import traceback
import logging
logger = logging.getLogger()

def do_orderinfo_by_tracking(tracking_pin):
    context = {'orders': True}
    conn = get_connection()
    cur = conn.cursor()
    query = """
        SELECT COUNT(1)
          FROM receipt_packages
         WHERE tracking_pin = '%s'
    """ % tracking_pin
    cur.execute(query)
    existing = cur.fetchone()[0] > 0
    if existing:
        order_info = {}
        
        query = """
            SELECT b.type box_type,
                   b.length_cm,
                   b.width_cm,
                   b.height_cm,
                   p.sku,
                   p.name,
                   p.color,
                   p.size,
                   p.bottom,
                   COALESCE(pc.class, '') product_type,
                   p.category,
                   rp.quantity
              FROM receipt_packages rp
                   JOIN boxes b ON b.id = rp.box_id
                   JOIN products p ON p.sku = rp.sku
                   LEFT JOIN package_classes pc ON pc.id = p.package_class_id
             WHERE rp.tracking_pin = '%s'
        """ % tracking_pin
        rows = get_data_dict(cur, query)
        
        for row in rows:
            if 'box_type' not in order_info:
                order_info['box_type'] = row['box_type']
                order_info['length_cm'] = row['length_cm']
                order_info['width_cm'] = row['width_cm']
                order_info['height_cm'] = row['height_cm']
                order_info['skus'] = []
            item = {'sku': row['sku'],
                    'name': row['name'],
                    'color': row['color'],
                    'size': row['size'],
                    'quantity': row['quantity'],
                    'bottom': row['bottom'],
                    'category': row['category'],
                    'product_type': row['product_type']
                   }
            order_info['skus'].append(item)
        logger.debug(order_info)
        context['order_info'] = order_info
    
    return render_template('orderinfo.html', **context)